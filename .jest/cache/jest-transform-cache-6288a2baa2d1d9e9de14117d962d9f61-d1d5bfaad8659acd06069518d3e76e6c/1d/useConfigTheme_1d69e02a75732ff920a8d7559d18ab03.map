{"version":3,"sources":["useConfigTheme.ts"],"names":["isDarkMode","mode","setMode","primary","secondary","backgroundScreens","textLight","textDark","textPrimary","textSecondary","textButtonPrimary","textButtonSecondary","textInputTitle","textInputText","card","alingContentCenter","justifyContent","alignItems","alingContentBetweenRow","configTheme","setConfigTheme","setTheme","theme"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA2Be,oBAAM;AAAA;AACjB,MAAMA,UAAU,4BAAG,kCAAH,CAAhB;;AAEA,sCAAwB,qBAAoCA,UAApC,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAEA,uCAAsC,qBAAuB;AACzDC,IAAAA,OAAO,EAAE,SADgD;AAEzDC,IAAAA,SAAS,EAAE,SAF8C;AAGzDC,IAAAA,iBAAiB,EAAE,SAHsC;AAIzDC,IAAAA,SAAS,EAAE,OAJ8C;AAKzDC,IAAAA,QAAQ,EAAE,OAL+C;AAMzDC,IAAAA,WAAW,EAAE,SAN4C;AAOzDC,IAAAA,aAAa,EAAE,SAP0C;AAQzDC,IAAAA,iBAAiB,EAAE,OARsC;AASzDC,IAAAA,mBAAmB,EAAE,SAToC;AAUzDC,IAAAA,cAAc,EAAE,SAVyC;AAWzDC,IAAAA,aAAa,EAAE,OAX0C;AAYzDC,IAAAA,IAAI,EAAE,OAZmD;AAgBzDC,IAAAA,kBAAkB,EAAE;AAChBC,MAAAA,cAAc,EAAE,QADA;AAEhBC,MAAAA,UAAU,EAAE;AAFI,KAhBqC;AAoBzDC,IAAAA,sBAAsB,EAAE;AACpBF,MAAAA,cAAc,EAAE,eADI;AAEpBC,MAAAA,UAAU,EAAE;AAFQ;AApBiC,GAAvB,CAAtC;AAAA;AAAA,MAAOE,WAAP;AAAA,MAAoBC,cAApB;;AALiB;AA+BjB,wBAAU,YAAM;AAAA;AAAA;;AACZ,QAAInB,IAAI,KAAK,MAAb,EAAqB;AAAA;AAAA;AACjBmB,MAAAA,cAAc,4BACPD,WADO,EAAd;AAGH,KAJD,MAIO;AAAA;AAAA;AACHC,MAAAA,cAAc,4BACPD,WADO,EAAd;AAGH;AACJ,GAVD,EAUG,CAAClB,IAAD,CAVH;AA/BiB;;AA2CjB,MAAMoB,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmB;AAAA;AAAA;AAAA,WAAApB,OAAO,CAACoB,KAAD,CAAP;AAAc,GAAlD;;AA3CiB;AA6CjB,SAAO;AACHrB,IAAAA,IAAI,EAAJA,IADG;AAEHkB,IAAAA,WAAW,EAAXA,WAFG;AAGHE,IAAAA,QAAQ,EAARA;AAHG,GAAP;AAKH,C","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Platform, useColorScheme } from 'react-native';\n\nexport interface ConfigEntity {\n    primary: string;\n    secondary: string;\n    backgroundScreens: string;\n    textLight: string;\n    textDark: string;\n    textPrimary: string;\n    textSecondary: string;\n    textButtonPrimary: string;\n    textButtonSecondary: string;\n    textInputTitle: string;\n    textInputText: string;\n    card: string;\n    /* fontLight: string;\n    fontRegular: string;\n    fontBold: string; */\n    alingContentCenter?: Alings;\n    alingContentBetweenRow: Alings;\n}\n\ninterface Alings {\n    justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';\n    alignItems?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline';\n}\n\nexport default () => {\n    const isDarkMode = useColorScheme();\n\n    const [mode, setMode] = useState<string | null | undefined>(isDarkMode)\n\n    const [configTheme, setConfigTheme] = useState<ConfigEntity>({\n        primary: '#FE4A01',\n        secondary: '#FEE2CE',\n        backgroundScreens: '#f2f2f4',\n        textLight: 'white',\n        textDark: 'black',\n        textPrimary: '#000000',\n        textSecondary: '#B9B9BB',\n        textButtonPrimary: 'white',\n        textButtonSecondary: '#1e344f',\n        textInputTitle: '#B9B9BB',\n        textInputText: 'black',\n        card: 'white',\n        /* fontLight: Platform.OS === 'ios' ? 'SonnyGothic-UltraLight' : 'W Foundry - Sonny Gothic Ultra Light',\n        fontRegular: Platform.OS === 'ios' ? 'SonnyGothic-Regular' : 'W Foundry - Sonny Gothic Regular',\n        fontBold: Platform.OS === 'ios' ? 'SonnyGothic-Bold' : 'W Foundry - Sonny Gothic Bold', */\n        alingContentCenter: {\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        alingContentBetweenRow: {\n            justifyContent: 'space-between',\n            alignItems: 'center',\n        },\n    })\n\n    useEffect(() => {\n        if (mode === 'dark') {\n            setConfigTheme({\n                ...configTheme,\n            })\n        } else {\n            setConfigTheme({\n                ...configTheme,\n            })\n        }\n    }, [mode])\n\n    const setTheme = (theme: string) => setMode(theme);\n\n    return {\n        mode,\n        configTheme,\n        setTheme,\n    }\n}"]}