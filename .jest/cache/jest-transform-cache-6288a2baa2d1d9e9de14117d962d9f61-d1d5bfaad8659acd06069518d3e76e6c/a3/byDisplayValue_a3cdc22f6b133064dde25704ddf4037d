0470b001687b5d44a33998664cfd0c3d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;

var _makeQueries = require("./makeQueries");

var _filterNodeByType = require("./filterNodeByType");

var _errors = require("./errors");

var getTextInputNodeByDisplayValue = function getTextInputNodeByDisplayValue(node, value) {
  try {
    var _require = require('react-native'),
        TextInput = _require.TextInput;

    var nodeValue = node.props.value !== undefined ? node.props.value : node.props.defaultValue;
    return (0, _filterNodeByType.filterNodeByType)(node, TextInput) && (typeof value === 'string' ? value === nodeValue : value.test(nodeValue));
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function queryAllByDisplayValueFn(displayValue) {
    return instance.findAll(function (node) {
      return getTextInputNodeByDisplayValue(node, displayValue);
    });
  };
};

exports.queryAllByDisplayValue = queryAllByDisplayValue;

var getMultipleError = function getMultipleError(displayValue) {
  return "Found multiple elements with display value: " + String(displayValue) + " ";
};

var getMissingError = function getMissingError(displayValue) {
  return "Unable to find an element with displayValue: " + String(displayValue);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError),
    getByDisplayValue = _ref.getBy,
    getAllByDisplayValue = _ref.getAllBy,
    queryByDisplayValue = _ref.queryBy,
    findByDisplayValue = _ref.findBy,
    findAllByDisplayValue = _ref.findAllBy;

exports.findAllByDisplayValue = findAllByDisplayValue;
exports.findByDisplayValue = findByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5RGlzcGxheVZhbHVlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeURpc3BsYXlWYWx1ZSIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUiLCJnZXRCeURpc3BsYXlWYWx1ZSIsImdldEFsbEJ5RGlzcGxheVZhbHVlIiwiZmluZEJ5RGlzcGxheVZhbHVlIiwiZmluZEFsbEJ5RGlzcGxheVZhbHVlIiwiX21ha2VRdWVyaWVzIiwicmVxdWlyZSIsIl9maWx0ZXJOb2RlQnlUeXBlIiwiX2Vycm9ycyIsImdldFRleHRJbnB1dE5vZGVCeURpc3BsYXlWYWx1ZSIsIm5vZGUiLCJUZXh0SW5wdXQiLCJub2RlVmFsdWUiLCJwcm9wcyIsInVuZGVmaW5lZCIsImRlZmF1bHRWYWx1ZSIsImZpbHRlck5vZGVCeVR5cGUiLCJ0ZXN0IiwiZXJyb3IiLCJjcmVhdGVMaWJyYXJ5Tm90U3VwcG9ydGVkRXJyb3IiLCJpbnN0YW5jZSIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWVGbiIsImRpc3BsYXlWYWx1ZSIsImZpbmRBbGwiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsImZpbmRCeSIsImZpbmRBbGxCeSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLG1CQUFSLEdBQThCRixPQUFPLENBQUNHLHNCQUFSLEdBQWlDSCxPQUFPLENBQUNJLGlCQUFSLEdBQTRCSixPQUFPLENBQUNLLG9CQUFSLEdBQStCTCxPQUFPLENBQUNNLGtCQUFSLEdBQTZCTixPQUFPLENBQUNPLHFCQUFSLEdBQWdDLEtBQUssQ0FBNUw7O0FBRUEsSUFBSUMsWUFBWSxHQUFHQyxPQUFPLGlCQUExQjs7QUFFQSxJQUFJQyxpQkFBaUIsR0FBR0QsT0FBTyxzQkFBL0I7O0FBRUEsSUFBSUUsT0FBTyxHQUFHRixPQUFPLFlBQXJCOztBQUVBLElBQU1HLDhCQUE4QixHQUFHLFNBQWpDQSw4QkFBaUMsQ0FBQ0MsSUFBRCxFQUFPWixLQUFQLEVBQWlCO0FBQ3RELE1BQUk7QUFDRixtQkFFSVEsT0FBTyxDQUFDLGNBQUQsQ0FGWDtBQUFBLFFBQ0VLLFNBREYsWUFDRUEsU0FERjs7QUFJQSxRQUFNQyxTQUFTLEdBQUdGLElBQUksQ0FBQ0csS0FBTCxDQUFXZixLQUFYLEtBQXFCZ0IsU0FBckIsR0FBaUNKLElBQUksQ0FBQ0csS0FBTCxDQUFXZixLQUE1QyxHQUFvRFksSUFBSSxDQUFDRyxLQUFMLENBQVdFLFlBQWpGO0FBQ0EsV0FBTyxDQUFDLEdBQUdSLGlCQUFpQixDQUFDUyxnQkFBdEIsRUFBd0NOLElBQXhDLEVBQThDQyxTQUE5QyxNQUE2RCxPQUFPYixLQUFQLEtBQWlCLFFBQWpCLEdBQTRCQSxLQUFLLEtBQUtjLFNBQXRDLEdBQWtEZCxLQUFLLENBQUNtQixJQUFOLENBQVdMLFNBQVgsQ0FBL0csQ0FBUDtBQUNELEdBUEQsQ0FPRSxPQUFPTSxLQUFQLEVBQWM7QUFDZCxVQUFNLENBQUMsR0FBR1YsT0FBTyxDQUFDVyw4QkFBWixFQUE0Q0QsS0FBNUMsQ0FBTjtBQUNEO0FBQ0YsQ0FYRDs7QUFhQSxJQUFNbEIsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFBb0IsUUFBUTtBQUFBLFNBQUksU0FBU0Msd0JBQVQsQ0FBa0NDLFlBQWxDLEVBQWdEO0FBQ3pGLFdBQU9GLFFBQVEsQ0FBQ0csT0FBVCxDQUFpQixVQUFBYixJQUFJO0FBQUEsYUFBSUQsOEJBQThCLENBQUNDLElBQUQsRUFBT1ksWUFBUCxDQUFsQztBQUFBLEtBQXJCLENBQVA7QUFDRCxHQUZzQztBQUFBLENBQXZDOztBQUlBekIsT0FBTyxDQUFDRyxzQkFBUixHQUFpQ0Esc0JBQWpDOztBQUVBLElBQU13QixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFGLFlBQVk7QUFBQSwwREFBbURHLE1BQU0sQ0FBQ0gsWUFBRCxDQUF6RDtBQUFBLENBQXJDOztBQUVBLElBQU1JLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQUosWUFBWTtBQUFBLDJEQUFvREcsTUFBTSxDQUFDSCxZQUFELENBQTFEO0FBQUEsQ0FBcEM7O0FBRUEsV0FNSSxDQUFDLEdBQUdqQixZQUFZLENBQUNzQixXQUFqQixFQUE4QjNCLHNCQUE5QixFQUFzRDBCLGVBQXRELEVBQXVFRixnQkFBdkUsQ0FOSjtBQUFBLElBQ1N2QixpQkFEVCxRQUNFMkIsS0FERjtBQUFBLElBRVkxQixvQkFGWixRQUVFMkIsUUFGRjtBQUFBLElBR1c5QixtQkFIWCxRQUdFK0IsT0FIRjtBQUFBLElBSVUzQixrQkFKVixRQUlFNEIsTUFKRjtBQUFBLElBS2EzQixxQkFMYixRQUtFNEIsU0FMRjs7QUFPQW5DLE9BQU8sQ0FBQ08scUJBQVIsR0FBZ0NBLHFCQUFoQztBQUNBUCxPQUFPLENBQUNNLGtCQUFSLEdBQTZCQSxrQkFBN0I7QUFDQU4sT0FBTyxDQUFDRSxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0FGLE9BQU8sQ0FBQ0ssb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBTCxPQUFPLENBQUNJLGlCQUFSLEdBQTRCQSxpQkFBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEFsbEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IHZvaWQgMDtcblxudmFyIF9tYWtlUXVlcmllcyA9IHJlcXVpcmUoXCIuL21ha2VRdWVyaWVzXCIpO1xuXG52YXIgX2ZpbHRlck5vZGVCeVR5cGUgPSByZXF1aXJlKFwiLi9maWx0ZXJOb2RlQnlUeXBlXCIpO1xuXG52YXIgX2Vycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcblxuY29uc3QgZ2V0VGV4dElucHV0Tm9kZUJ5RGlzcGxheVZhbHVlID0gKG5vZGUsIHZhbHVlKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgVGV4dElucHV0XG4gICAgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuXG4gICAgY29uc3Qgbm9kZVZhbHVlID0gbm9kZS5wcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gbm9kZS5wcm9wcy52YWx1ZSA6IG5vZGUucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiAoMCwgX2ZpbHRlck5vZGVCeVR5cGUuZmlsdGVyTm9kZUJ5VHlwZSkobm9kZSwgVGV4dElucHV0KSAmJiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlID09PSBub2RlVmFsdWUgOiB2YWx1ZS50ZXN0KG5vZGVWYWx1ZSkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93ICgwLCBfZXJyb3JzLmNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvcikoZXJyb3IpO1xuICB9XG59O1xuXG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gaW5zdGFuY2UgPT4gZnVuY3Rpb24gcXVlcnlBbGxCeURpc3BsYXlWYWx1ZUZuKGRpc3BsYXlWYWx1ZSkge1xuICByZXR1cm4gaW5zdGFuY2UuZmluZEFsbChub2RlID0+IGdldFRleHRJbnB1dE5vZGVCeURpc3BsYXlWYWx1ZShub2RlLCBkaXNwbGF5VmFsdWUpKTtcbn07XG5cbmV4cG9ydHMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWU7XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSBkaXNwbGF5VmFsdWUgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggZGlzcGxheSB2YWx1ZTogJHtTdHJpbmcoZGlzcGxheVZhbHVlKX0gYDtcblxuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gZGlzcGxheVZhbHVlID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggZGlzcGxheVZhbHVlOiAke1N0cmluZyhkaXNwbGF5VmFsdWUpfWA7XG5cbmNvbnN0IHtcbiAgZ2V0Qnk6IGdldEJ5RGlzcGxheVZhbHVlLFxuICBnZXRBbGxCeTogZ2V0QWxsQnlEaXNwbGF5VmFsdWUsXG4gIHF1ZXJ5Qnk6IHF1ZXJ5QnlEaXNwbGF5VmFsdWUsXG4gIGZpbmRCeTogZmluZEJ5RGlzcGxheVZhbHVlLFxuICBmaW5kQWxsQnk6IGZpbmRBbGxCeURpc3BsYXlWYWx1ZVxufSA9ICgwLCBfbWFrZVF1ZXJpZXMubWFrZVF1ZXJpZXMpKHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUsIGdldE1pc3NpbmdFcnJvciwgZ2V0TXVsdGlwbGVFcnJvcik7XG5leHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IGZpbmRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZmluZEJ5RGlzcGxheVZhbHVlO1xuZXhwb3J0cy5xdWVyeUJ5RGlzcGxheVZhbHVlID0gcXVlcnlCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QWxsQnlEaXNwbGF5VmFsdWUgPSBnZXRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBnZXRCeURpc3BsYXlWYWx1ZTsiXX0=