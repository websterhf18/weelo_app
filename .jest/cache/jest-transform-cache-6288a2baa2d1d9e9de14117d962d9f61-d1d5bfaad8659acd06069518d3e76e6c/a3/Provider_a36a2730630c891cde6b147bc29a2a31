1242142cd3a5105974bc919b5ce5a10e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Context = require("./Context");

var _Subscription = _interopRequireDefault(require("../utils/Subscription"));

var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");

function Provider(_ref) {
  var store = _ref.store,
      context = _ref.context,
      children = _ref.children;
  var contextValue = (0, _react.useMemo)(function () {
    var subscription = new _Subscription["default"](store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store: store,
      subscription: subscription
    };
  }, [store]);
  var previousState = (0, _react.useMemo)(function () {
    return store.getState();
  }, [store]);
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();

    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }

    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || _Context.ReactReduxContext;
  return _react["default"].createElement(Context.Provider, {
    value: contextValue
  }, children);
}

if (process.env.NODE_ENV !== 'production') {
  Provider.propTypes = {
    store: _propTypes["default"].shape({
      subscribe: _propTypes["default"].func.isRequired,
      dispatch: _propTypes["default"].func.isRequired,
      getState: _propTypes["default"].func.isRequired
    }),
    context: _propTypes["default"].object,
    children: _propTypes["default"].any
  };
}

var _default = Provider;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfQ29udGV4dCIsIl9TdWJzY3JpcHRpb24iLCJfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIlByb3ZpZGVyIiwiX3JlZiIsInN0b3JlIiwiY29udGV4dCIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsInN1YnNjcmlwdGlvbiIsIm9uU3RhdGVDaGFuZ2UiLCJub3RpZnlOZXN0ZWRTdWJzIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwiQ29udGV4dCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwic2hhcGUiLCJzdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImRpc3BhdGNoIiwib2JqZWN0IiwiYW55IiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBcEM7O0FBRUEsSUFBSUMsdUJBQXVCLEdBQUdELE9BQU8sQ0FBQywrQ0FBRCxDQUFyQzs7QUFFQUUsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdILHVCQUF1QixDQUFDRCxPQUFPLENBQUMsT0FBRCxDQUFSLENBQXBDOztBQUVBLElBQUlLLFVBQVUsR0FBR04sc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFELENBQVIsQ0FB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QnFDLFFBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0NvbnRleHQgPSByZXF1aXJlKFwiLi9Db250ZXh0XCIpO1xuXG52YXIgX1N1YnNjcmlwdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL1N1YnNjcmlwdGlvblwiKSk7XG5cbnZhciBfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHJlcXVpcmUoXCIuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XCIpO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBfU3Vic2NyaXB0aW9uW1wiZGVmYXVsdFwiXShzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gICgwLCBfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC51c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IF9Db250ZXh0LlJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IFByb3ZpZGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXX0=