{"version":3,"sources":["../src/utils/env.ts","../src/utils/errors.ts","../src/utils/common.ts","../src/utils/plugins.ts","../src/core/scope.ts","../src/core/finalize.ts","../src/core/proxy.ts","../src/core/immerClass.ts","../src/core/current.ts","../src/plugins/es5.ts","../src/plugins/patches.ts","../src/plugins/mapset.ts","../src/plugins/all.ts","../src/immer.ts"],"names":["hasSymbol","Symbol","hasMap","hasSet","hasProxies","Proxy","NOTHING","DRAFTABLE","DRAFT_STATE","iteratorSymbol","errors","die","error","args","e","msg","isDraft","value","isDraftable","isPlainObject","Array","isMap","isSet","objectCtorString","Object","proto","Ctor","Function","original","ownKeys","Reflect","getOwnPropertyDescriptors","res","each","obj","iter","enumerableOnly","getArchtype","thing","state","has","prop","get","set","propOrOldValue","t","is","x","y","target","latest","shallowCopy","base","descriptors","keys","i","key","desc","configurable","writable","enumerable","freeze","deep","isFrozen","plugins","getPlugin","pluginKey","plugin","loadPlugin","implementation","getCurrentScope","drafts_","parent_","immer_","canAutoFreeze_","unfinalizedDrafts_","usePatchesInScope","scope","patchListener","revokeScope","leaveScope","currentScope","enterScope","immer","createScope","draft","processResult","result","baseDraft","isReplaced","finalize","maybeFreeze","finalizeProperty","path","rootScope","childValue","parentState","rootPath","createProxyProxy","parent","isArray","type_","scope_","modified_","finalized_","assigned_","base_","draft_","copy_","revoke_","isManual_","traps","revoke","proxy","objectTraps","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current","currentState","markChanged","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","getPrototypeOf","setPrototypeOf","arrayTraps","arguments","fn","isNaN","parseInt","Immer","config","defaultBase","recipe","self","hasError","arg1","nextState","patches","inversePatches","createDraft","finishDraft","setAutoFreeze","setUseProxies","applyPatches","patch","applyPatchesImpl","currentImpl","archType","copy","copyHelper","enableES5","markChangesRecursively","markChangesSweep","proxyProperty","createES5Draft","revoked_","assertUnrevoked","drafts","hasArrayChanges","hasObjectChanges","object","min","Math","baseValue","baseIsDraft","descriptor","JSON","createES5Proxy_","willFinalizeES5_","hasChanges_","enablePatches","REPLACE","ADD","REMOVE","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","basePath","op","clonePatchValueIfNeeded","length","origValue","replacement","rootState","parentType","p","type","deepClonePatchValue","k","v","cloned","applyPatches_","generatePatches_","generateReplacementPatches_","enableMapSet","extendStatics","__proto__","d","b","__","DraftMap","__extends","prepareMapCopy","cb","iterator","r","done","DraftSet","prepareSetCopy","proxyMap_","proxySet_","enableAllPlugins","produce","produceWithPatches","castDraft","castImmutable"],"mappings":"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","sourcesContent":["// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\trootState: ImmerState,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyType.Set ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\tstate.copy_![prop] === value &&\n\t\t\t// special case: NaN\n\t\t\ttypeof value !== \"number\" &&\n\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t(value !== undefined || prop in state.copy_)\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches) as any\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches.slice(i + 1))\n\t\t) as any\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\trootState: ImmerState,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: rootState.base_\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyType,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tstate.assigned_!.set(key, false)\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n"]}