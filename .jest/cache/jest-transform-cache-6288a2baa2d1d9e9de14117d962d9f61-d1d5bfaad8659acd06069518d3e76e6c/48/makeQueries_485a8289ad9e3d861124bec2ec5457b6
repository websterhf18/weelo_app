26f0446a19eb54439a9074c329667089
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeQueries = makeQueries;

var _waitFor = _interopRequireDefault(require("../waitFor"));

var _errors = require("./errors");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function makeQueries(queryAllByQuery, getMissingError, getMultipleError) {
  function getAllByQuery(instance) {
    return function getAllFn(args) {
      var results = queryAllByQuery(instance)(args);

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getAllFn);
      }

      return results;
    };
  }

  function queryByQuery(instance) {
    return function singleQueryFn(args) {
      var results = queryAllByQuery(instance)(args);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), singleQueryFn);
      }

      if (results.length === 0) {
        return null;
      }

      return results[0];
    };
  }

  function getByQuery(instance) {
    return function getFn(args) {
      var results = queryAllByQuery(instance)(args);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), getFn);
      }

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getFn);
      }

      return results[0];
    };
  }

  function findAllByQuery(instance) {
    return function findAllFn(args) {
      var waitForOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return (0, _waitFor.default)(function () {
        return getAllByQuery(instance)(args);
      }, waitForOptions);
    };
  }

  function findByQuery(instance) {
    return function findFn(args) {
      var waitForOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return (0, _waitFor.default)(function () {
        return getByQuery(instance)(args);
      }, waitForOptions);
    };
  }

  return {
    getBy: getByQuery,
    getAllBy: getAllByQuery,
    queryBy: queryByQuery,
    findBy: findByQuery,
    findAllBy: findAllByQuery
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2VRdWVyaWVzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWFrZVF1ZXJpZXMiLCJfd2FpdEZvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Vycm9ycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicXVlcnlBbGxCeVF1ZXJ5IiwiZ2V0TWlzc2luZ0Vycm9yIiwiZ2V0TXVsdGlwbGVFcnJvciIsImdldEFsbEJ5UXVlcnkiLCJpbnN0YW5jZSIsImdldEFsbEZuIiwiYXJncyIsInJlc3VsdHMiLCJsZW5ndGgiLCJFcnJvcldpdGhTdGFjayIsInF1ZXJ5QnlRdWVyeSIsInNpbmdsZVF1ZXJ5Rm4iLCJnZXRCeVF1ZXJ5IiwiZ2V0Rm4iLCJmaW5kQWxsQnlRdWVyeSIsImZpbmRBbGxGbiIsIndhaXRGb3JPcHRpb25zIiwiZmluZEJ5UXVlcnkiLCJmaW5kRm4iLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsImZpbmRCeSIsImZpbmRBbGxCeSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLFdBQVIsR0FBc0JBLFdBQXRCOztBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sY0FBUixDQUFyQzs7QUFFQSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sWUFBckI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVFLElBQUFBLE9BQU8sRUFBRUY7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0wsV0FBVCxDQUFxQlEsZUFBckIsRUFBc0ND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QUVUO0FBTE4sR0FBUDtBQU9EIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1ha2VRdWVyaWVzID0gbWFrZVF1ZXJpZXM7XG5cbnZhciBfd2FpdEZvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3dhaXRGb3JcIikpO1xuXG52YXIgX2Vycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbWFrZVF1ZXJpZXMocXVlcnlBbGxCeVF1ZXJ5LCBnZXRNaXNzaW5nRXJyb3IsIGdldE11bHRpcGxlRXJyb3IpIHtcbiAgZnVuY3Rpb24gZ2V0QWxsQnlRdWVyeShpbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXRBbGxGbihhcmdzKSB7XG4gICAgICBjb25zdCByZXN1bHRzID0gcXVlcnlBbGxCeVF1ZXJ5KGluc3RhbmNlKShhcmdzKTtcblxuICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXJyb3JzLkVycm9yV2l0aFN0YWNrKGdldE1pc3NpbmdFcnJvcihhcmdzKSwgZ2V0QWxsRm4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVlcnlCeVF1ZXJ5KGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNpbmdsZVF1ZXJ5Rm4oYXJncykge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IHF1ZXJ5QWxsQnlRdWVyeShpbnN0YW5jZSkoYXJncyk7XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9lcnJvcnMuRXJyb3JXaXRoU3RhY2soZ2V0TXVsdGlwbGVFcnJvcihhcmdzKSwgc2luZ2xlUXVlcnlGbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ5UXVlcnkoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Rm4oYXJncykge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IHF1ZXJ5QWxsQnlRdWVyeShpbnN0YW5jZSkoYXJncyk7XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9lcnJvcnMuRXJyb3JXaXRoU3RhY2soZ2V0TXVsdGlwbGVFcnJvcihhcmdzKSwgZ2V0Rm4pO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IF9lcnJvcnMuRXJyb3JXaXRoU3RhY2soZ2V0TWlzc2luZ0Vycm9yKGFyZ3MpLCBnZXRGbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHRzWzBdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kQWxsQnlRdWVyeShpbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBmaW5kQWxsRm4oYXJncywgd2FpdEZvck9wdGlvbnMgPSB7fSkge1xuICAgICAgcmV0dXJuICgwLCBfd2FpdEZvci5kZWZhdWx0KSgoKSA9PiBnZXRBbGxCeVF1ZXJ5KGluc3RhbmNlKShhcmdzKSwgd2FpdEZvck9wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kQnlRdWVyeShpbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBmaW5kRm4oYXJncywgd2FpdEZvck9wdGlvbnMgPSB7fSkge1xuICAgICAgcmV0dXJuICgwLCBfd2FpdEZvci5kZWZhdWx0KSgoKSA9PiBnZXRCeVF1ZXJ5KGluc3RhbmNlKShhcmdzKSwgd2FpdEZvck9wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEJ5OiBnZXRCeVF1ZXJ5LFxuICAgIGdldEFsbEJ5OiBnZXRBbGxCeVF1ZXJ5LFxuICAgIHF1ZXJ5Qnk6IHF1ZXJ5QnlRdWVyeSxcbiAgICBmaW5kQnk6IGZpbmRCeVF1ZXJ5LFxuICAgIGZpbmRBbGxCeTogZmluZEFsbEJ5UXVlcnlcbiAgfTtcbn0iXX0=