6de89ade6308b84fa3c777f58744c036
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.getEnforcing = getEnforcing;

var _invariant = _interopRequireDefault(require("invariant"));

var NativeModules = require("../BatchedBridge/NativeModules");

var turboModuleProxy = global.__turboModuleProxy;

function requireModule(name, schema) {
  if (!global.RN$Bridgeless) {
    var legacyModule = NativeModules[name];

    if (legacyModule != null) {
      return legacyModule;
    }
  }

  if (turboModuleProxy != null) {
    var module = schema != null ? turboModuleProxy(name, schema) : turboModuleProxy(name);
    return module;
  }

  return null;
}

function get(name) {
  var schema = arguments.length === 2 ? arguments[1] : undefined;
  return requireModule(name, schema);
}

function getEnforcing(name) {
  var schema = arguments.length === 2 ? arguments[1] : undefined;
  var module = requireModule(name, schema);
  (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
  return module;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlR1cmJvTW9kdWxlUmVnaXN0cnkuanMiXSwibmFtZXMiOlsiTmF0aXZlTW9kdWxlcyIsInJlcXVpcmUiLCJ0dXJib01vZHVsZVByb3h5IiwiZ2xvYmFsIiwiX190dXJib01vZHVsZVByb3h5IiwicmVxdWlyZU1vZHVsZSIsIm5hbWUiLCJzY2hlbWEiLCJSTiRCcmlkZ2VsZXNzIiwibGVnYWN5TW9kdWxlIiwibW9kdWxlIiwiZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZ2V0RW5mb3JjaW5nIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUlBOztBQUZBLElBQU1BLGFBQWEsR0FBR0MsT0FBTyxrQ0FBN0I7O0FBSUEsSUFBTUMsZ0JBQWdCLEdBQUdDLE1BQU0sQ0FBQ0Msa0JBQWhDOztBQUVBLFNBQVNDLGFBQVQsQ0FBdUNDLElBQXZDLEVBQXFEQyxNQUFyRCxFQUErRTtBQUU3RSxNQUFJLENBQUNKLE1BQU0sQ0FBQ0ssYUFBWixFQUEyQjtBQUV6QixRQUFNQyxZQUFZLEdBQUdULGFBQWEsQ0FBQ00sSUFBRCxDQUFsQzs7QUFDQSxRQUFJRyxZQUFZLElBQUksSUFBcEIsRUFBMEI7QUFDeEIsYUFBU0EsWUFBVDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSVAsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDNUIsUUFBTVEsTUFBVSxHQUNkSCxNQUFNLElBQUksSUFBVixHQUFpQkwsZ0JBQWdCLENBQUNJLElBQUQsRUFBT0MsTUFBUCxDQUFqQyxHQUFrREwsZ0JBQWdCLENBQUNJLElBQUQsQ0FEcEU7QUFFQSxXQUFPSSxNQUFQO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsR0FBVCxDQUE2QkwsSUFBN0IsRUFBK0M7QUFVcEQsTUFBTUMsTUFBTSxHQUFHSyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsR0FBeUJELFNBQVMsQ0FBQyxDQUFELENBQWxDLEdBQXdDRSxTQUF2RDtBQUNBLFNBQU9ULGFBQWEsQ0FBSUMsSUFBSixFQUFVQyxNQUFWLENBQXBCO0FBQ0Q7O0FBRU0sU0FBU1EsWUFBVCxDQUFzQ1QsSUFBdEMsRUFBdUQ7QUFVNUQsTUFBTUMsTUFBTSxHQUFHSyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsR0FBeUJELFNBQVMsQ0FBQyxDQUFELENBQWxDLEdBQXdDRSxTQUF2RDtBQUNBLE1BQU1KLE1BQU0sR0FBR0wsYUFBYSxDQUFJQyxJQUFKLEVBQVVDLE1BQVYsQ0FBNUI7QUFDQSwwQkFDRUcsTUFBTSxJQUFJLElBRFosRUFFRSw2Q0FBMkNKLElBQTNDLDhCQUNFLHVFQUhKO0FBS0EsU0FBT0ksTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZU1vZHVsZXMgPSByZXF1aXJlKCcuLi9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnKTtcbmltcG9ydCB0eXBlIHtUdXJib01vZHVsZX0gZnJvbSAnLi9SQ1RFeHBvcnQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG5jb25zdCB0dXJib01vZHVsZVByb3h5ID0gZ2xvYmFsLl9fdHVyYm9Nb2R1bGVQcm94eTtcblxuZnVuY3Rpb24gcmVxdWlyZU1vZHVsZTxUOiBUdXJib01vZHVsZT4obmFtZTogc3RyaW5nLCBzY2hlbWE/OiA/JEZsb3dGaXhNZSk6ID9UIHtcbiAgLy8gQnJpZGdlbGVzcyBtb2RlIHJlcXVpcmVzIFR1cmJvTW9kdWxlc1xuICBpZiAoIWdsb2JhbC5STiRCcmlkZ2VsZXNzKSB7XG4gICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSBsYXllciBkdXJpbmcgbWlncmF0aW9uLlxuICAgIGNvbnN0IGxlZ2FjeU1vZHVsZSA9IE5hdGl2ZU1vZHVsZXNbbmFtZV07XG4gICAgaWYgKGxlZ2FjeU1vZHVsZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gKChsZWdhY3lNb2R1bGU6ICRGbG93Rml4TWUpOiBUKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHVyYm9Nb2R1bGVQcm94eSAhPSBudWxsKSB7XG4gICAgY29uc3QgbW9kdWxlOiA/VCA9XG4gICAgICBzY2hlbWEgIT0gbnVsbCA/IHR1cmJvTW9kdWxlUHJveHkobmFtZSwgc2NoZW1hKSA6IHR1cmJvTW9kdWxlUHJveHkobmFtZSk7XG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0PFQ6IFR1cmJvTW9kdWxlPihuYW1lOiBzdHJpbmcpOiA/VCB7XG4gIC8qKlxuICAgKiBXaGF0IGlzIFNjaGVtYT9cbiAgICpcbiAgICogQHJlYWN0LW5hdGl2ZS9iYWJlbC1wbHVnaW4tY29kZWdlbiB3aWxsIHBhcnNlIHRoZSBOYXRpdmVNb2R1bGVcbiAgICogc3BlYywgYW5kIHBhc3MgaW4gdGhlIGdlbmVyYXRlZCBzY2hlbWEgYXMgdGhlIHNlY29uZCBhcmd1bWVudFxuICAgKiB0byB0aGlzIGZ1bmN0aW9uLiBUaGUgc2NoZW0gd2lsbCB0aGVuIGJlIHVzZWQgdG8gcGVyZm9ybSBtZXRob2RcbiAgICogZGlzcGF0Y2ggb24sIGFuZCB0cmFuc2xhdGUgYXJndW1lbnRzL3JldHVybiB0byBhbmQgZnJvbSB0aGUgTmF0aXZlXG4gICAqIFR1cmJvTW9kdWxlIG9iamVjdC5cbiAgICovXG4gIGNvbnN0IHNjaGVtYSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDIgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHJldHVybiByZXF1aXJlTW9kdWxlPFQ+KG5hbWUsIHNjaGVtYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmZvcmNpbmc8VDogVHVyYm9Nb2R1bGU+KG5hbWU6IHN0cmluZyk6IFQge1xuICAvKipcbiAgICogV2hhdCBpcyBTY2hlbWE/XG4gICAqXG4gICAqIEByZWFjdC1uYXRpdmUvYmFiZWwtcGx1Z2luLWNvZGVnZW4gd2lsbCBwYXJzZSB0aGUgTmF0aXZlTW9kdWxlXG4gICAqIHNwZWMsIGFuZCBwYXNzIGluIHRoZSBnZW5lcmF0ZWQgc2NoZW1hIGFzIHRoZSBzZWNvbmQgYXJndW1lbnRcbiAgICogdG8gdGhpcyBmdW5jdGlvbi4gVGhlIHNjaGVtIHdpbGwgdGhlbiBiZSB1c2VkIHRvIHBlcmZvcm0gbWV0aG9kXG4gICAqIGRpc3BhdGNoIG9uLCBhbmQgdHJhbnNsYXRlIGFyZ3VtZW50cy9yZXR1cm4gdG8gYW5kIGZyb20gdGhlIE5hdGl2ZVxuICAgKiBUdXJib01vZHVsZSBvYmplY3QuXG4gICAqL1xuICBjb25zdCBzY2hlbWEgPSBhcmd1bWVudHMubGVuZ3RoID09PSAyID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICBjb25zdCBtb2R1bGUgPSByZXF1aXJlTW9kdWxlPFQ+KG5hbWUsIHNjaGVtYSk7XG4gIGludmFyaWFudChcbiAgICBtb2R1bGUgIT0gbnVsbCxcbiAgICBgVHVyYm9Nb2R1bGVSZWdpc3RyeS5nZXRFbmZvcmNpbmcoLi4uKTogJyR7bmFtZX0nIGNvdWxkIG5vdCBiZSBmb3VuZC4gYCArXG4gICAgICAnVmVyaWZ5IHRoYXQgYSBtb2R1bGUgYnkgdGhpcyBuYW1lIGlzIHJlZ2lzdGVyZWQgaW4gdGhlIG5hdGl2ZSBiaW5hcnkuJyxcbiAgKTtcbiAgcmV0dXJuIG1vZHVsZTtcbn1cbiJdfQ==