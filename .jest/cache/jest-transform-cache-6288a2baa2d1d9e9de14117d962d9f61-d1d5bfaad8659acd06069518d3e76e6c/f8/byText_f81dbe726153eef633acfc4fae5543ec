97c81421a3874922c64107e8404485ca
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;

var React = _interopRequireWildcard(require("react"));

var _makeQueries = require("./makeQueries");

var _filterNodeByType = require("./filterNodeByType");

var _errors = require("./errors");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var getChildrenAsText = function getChildrenAsText(children, TextComponent) {
  var textContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  React.Children.forEach(children, function (child) {
    var _child$props;

    if (typeof child === 'string') {
      textContent.push(child);
      return;
    }

    if (typeof child === 'number') {
      textContent.push(child.toString());
      return;
    }

    if (child !== null && child !== void 0 && (_child$props = child.props) !== null && _child$props !== void 0 && _child$props.children) {
      if ((0, _filterNodeByType.filterNodeByType)(child, TextComponent) && textContent.length === 0) {
        return;
      }

      getChildrenAsText(child.props.children, TextComponent, textContent);
    }
  });
  return textContent;
};

var getNodeByText = function getNodeByText(node, text) {
  try {
    var _require = require('react-native'),
        Text = _require.Text;

    var isTextComponent = (0, _filterNodeByType.filterNodeByType)(node, Text);

    if (isTextComponent) {
      var textChildren = getChildrenAsText(node.props.children, Text);

      if (textChildren) {
        var textToTest = textChildren.join('');
        return typeof text === 'string' ? text === textToTest : text.test(textToTest);
      }
    }

    return false;
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var queryAllByText = function queryAllByText(instance) {
  return function queryAllByTextFn(text) {
    var results = instance.findAll(function (node) {
      return getNodeByText(node, text);
    });
    return results;
  };
};

exports.queryAllByText = queryAllByText;

var getMultipleError = function getMultipleError(text) {
  return "Found multiple elements with text: " + String(text);
};

var getMissingError = function getMissingError(text) {
  return "Unable to find an element with text: " + String(text);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByText, getMissingError, getMultipleError),
    getByText = _ref.getBy,
    getAllByText = _ref.getAllBy,
    queryByText = _ref.queryBy,
    findByText = _ref.findBy,
    findAllByText = _ref.findAllBy;

exports.findAllByText = findAllByText;
exports.findByText = findByText;
exports.queryByText = queryByText;
exports.getAllByText = getAllByText;
exports.getByText = getByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5VGV4dC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUZXh0IiwicXVlcnlBbGxCeVRleHQiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJmaW5kQnlUZXh0IiwiZmluZEFsbEJ5VGV4dCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX21ha2VRdWVyaWVzIiwiX2ZpbHRlck5vZGVCeVR5cGUiLCJfZXJyb3JzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZ2V0Q2hpbGRyZW5Bc1RleHQiLCJjaGlsZHJlbiIsIlRleHRDb21wb25lbnQiLCJ0ZXh0Q29udGVudCIsIkNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwiX2NoaWxkJHByb3BzIiwicHVzaCIsInRvU3RyaW5nIiwicHJvcHMiLCJmaWx0ZXJOb2RlQnlUeXBlIiwibGVuZ3RoIiwiZ2V0Tm9kZUJ5VGV4dCIsIm5vZGUiLCJ0ZXh0IiwiVGV4dCIsImlzVGV4dENvbXBvbmVudCIsInRleHRDaGlsZHJlbiIsInRleHRUb1Rlc3QiLCJqb2luIiwidGVzdCIsImVycm9yIiwiY3JlYXRlTGlicmFyeU5vdFN1cHBvcnRlZEVycm9yIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5VGV4dEZuIiwicmVzdWx0cyIsImZpbmRBbGwiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlC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QUFBZixJQUFJO0FBQUEsbURBQTRDYyxNQUFNLENBQUNkLElBQUQsQ0FBbEQ7QUFBQSxDQUE1Qjs7QUFFQSxXQU1JLENBQUMsR0FBR25DLFlBQVksQ0FBQ21ELFdBQWpCLEVBQThCM0QsY0FBOUIsRUFBOEMwRCxlQUE5QyxFQUErREYsZ0JBQS9ELENBTko7QUFBQSxJQUNTdkQsU0FEVCxRQUNFMkQsS0FERjtBQUFBLElBRVkxRCxZQUZaLFFBRUUyRCxRQUZGO0FBQUEsSUFHVzlELFdBSFgsUUFHRStELE9BSEY7QUFBQSxJQUlVM0QsVUFKVixRQUlFNEQsTUFKRjtBQUFBLElBS2EzRCxhQUxiLFFBS0U0RCxTQUxGOztBQU9BbkUsT0FBTyxDQUFDTyxhQUFSLEdBQXdCQSxhQUF4QjtBQUNBUCxPQUFPLENBQUNNLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0FOLE9BQU8sQ0FBQ0UsV0FBUixHQUFzQkEsV0FBdEI7QUFDQUYsT0FBTyxDQUFDSyxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBTCxPQUFPLENBQUNJLFNBQVIsR0FBb0JBLFNBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9IGV4cG9ydHMuZ2V0QnlUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBleHBvcnRzLmZpbmRCeVRleHQgPSBleHBvcnRzLmZpbmRBbGxCeVRleHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfbWFrZVF1ZXJpZXMgPSByZXF1aXJlKFwiLi9tYWtlUXVlcmllc1wiKTtcblxudmFyIF9maWx0ZXJOb2RlQnlUeXBlID0gcmVxdWlyZShcIi4vZmlsdGVyTm9kZUJ5VHlwZVwiKTtcblxudmFyIF9lcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5jb25zdCBnZXRDaGlsZHJlbkFzVGV4dCA9IChjaGlsZHJlbiwgVGV4dENvbXBvbmVudCwgdGV4dENvbnRlbnQgPSBbXSkgPT4ge1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgdmFyIF9jaGlsZCRwcm9wcztcblxuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0ZXh0Q29udGVudC5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgdGV4dENvbnRlbnQucHVzaChjaGlsZC50b1N0cmluZygpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgIT09IG51bGwgJiYgY2hpbGQgIT09IHZvaWQgMCAmJiAoX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMpICE9PSBudWxsICYmIF9jaGlsZCRwcm9wcyAhPT0gdm9pZCAwICYmIF9jaGlsZCRwcm9wcy5jaGlsZHJlbikge1xuICAgICAgLy8gQmFpbCBvbiB0cmF2ZXJzaW5nIHRleHQgY2hpbGRyZW4gZG93biB0aGUgdHJlZSBpZiBjdXJyZW50IG5vZGUgKGNoaWxkKVxuICAgICAgLy8gaGFzIG5vIHRleHQuIEluIHN1Y2ggc2l0dWF0aW9ucywgcmVhY3QtdGVzdC1yZW5kZXJlciB3aWxsIHRyYXZlcnNlIGRvd25cbiAgICAgIC8vIHRoaXMgdHJlZSBpbiBhIHNlcGFyYXRlIGNhbGwgYW5kIHJ1biB0aGlzIHF1ZXJ5IGFnYWluLiBBcyBhIHJlc3VsdCwgdGhlXG4gICAgICAvLyBxdWVyeSB3aWxsIG1hdGNoIHRoZSBkZWVwZXN0IHRleHQgbm9kZSB0aGF0IG1hdGNoZXMgcmVxdWVzdGVkIHRleHQuXG4gICAgICBpZiAoKDAsIF9maWx0ZXJOb2RlQnlUeXBlLmZpbHRlck5vZGVCeVR5cGUpKGNoaWxkLCBUZXh0Q29tcG9uZW50KSAmJiB0ZXh0Q29udGVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBnZXRDaGlsZHJlbkFzVGV4dChjaGlsZC5wcm9wcy5jaGlsZHJlbiwgVGV4dENvbXBvbmVudCwgdGV4dENvbnRlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0ZXh0Q29udGVudDtcbn07XG5cbmNvbnN0IGdldE5vZGVCeVRleHQgPSAobm9kZSwgdGV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIFRleHRcbiAgICB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG5cbiAgICBjb25zdCBpc1RleHRDb21wb25lbnQgPSAoMCwgX2ZpbHRlck5vZGVCeVR5cGUuZmlsdGVyTm9kZUJ5VHlwZSkobm9kZSwgVGV4dCk7XG5cbiAgICBpZiAoaXNUZXh0Q29tcG9uZW50KSB7XG4gICAgICBjb25zdCB0ZXh0Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbkFzVGV4dChub2RlLnByb3BzLmNoaWxkcmVuLCBUZXh0KTtcblxuICAgICAgaWYgKHRleHRDaGlsZHJlbikge1xuICAgICAgICBjb25zdCB0ZXh0VG9UZXN0ID0gdGV4dENoaWxkcmVuLmpvaW4oJycpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnID8gdGV4dCA9PT0gdGV4dFRvVGVzdCA6IHRleHQudGVzdCh0ZXh0VG9UZXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgKDAsIF9lcnJvcnMuY3JlYXRlTGlicmFyeU5vdFN1cHBvcnRlZEVycm9yKShlcnJvcik7XG4gIH1cbn07XG5cbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0ID0gaW5zdGFuY2UgPT4gZnVuY3Rpb24gcXVlcnlBbGxCeVRleHRGbih0ZXh0KSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBpbnN0YW5jZS5maW5kQWxsKG5vZGUgPT4gZ2V0Tm9kZUJ5VGV4dChub2RlLCB0ZXh0KSk7XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9IHF1ZXJ5QWxsQnlUZXh0O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gdGV4dCA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0ZXh0OiAke1N0cmluZyh0ZXh0KX1gO1xuXG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSB0ZXh0ID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGV4dDogJHtTdHJpbmcodGV4dCl9YDtcblxuY29uc3Qge1xuICBnZXRCeTogZ2V0QnlUZXh0LFxuICBnZXRBbGxCeTogZ2V0QWxsQnlUZXh0LFxuICBxdWVyeUJ5OiBxdWVyeUJ5VGV4dCxcbiAgZmluZEJ5OiBmaW5kQnlUZXh0LFxuICBmaW5kQWxsQnk6IGZpbmRBbGxCeVRleHRcbn0gPSAoMCwgX21ha2VRdWVyaWVzLm1ha2VRdWVyaWVzKShxdWVyeUFsbEJ5VGV4dCwgZ2V0TWlzc2luZ0Vycm9yLCBnZXRNdWx0aXBsZUVycm9yKTtcbmV4cG9ydHMuZmluZEFsbEJ5VGV4dCA9IGZpbmRBbGxCeVRleHQ7XG5leHBvcnRzLmZpbmRCeVRleHQgPSBmaW5kQnlUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5VGV4dCA9IHF1ZXJ5QnlUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBnZXRBbGxCeVRleHQ7XG5leHBvcnRzLmdldEJ5VGV4dCA9IGdldEJ5VGV4dDsiXX0=