5e75f9e669ce3c438e2884e6cba9aa40
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.serialize = exports.test = void 0;

var _collections = require("../collections");

var SPACE = ' ';
var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;

var testName = function testName(name) {
  return OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
};

var test = function test(val) {
  return val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
};

exports.test = test;

var isNamedNodeMap = function isNamedNodeMap(collection) {
  return collection.constructor.name === 'NamedNodeMap';
};

var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
  var name = collection.constructor.name;

  if (++depth > config.maxDepth) {
    return '[' + name + ']';
  }

  return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce(function (props, attribute) {
    props[attribute.name] = attribute.value;
    return props;
  }, {}) : (0, _extends2.default)({}, collection), config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
};

exports.serialize = serialize;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRPTUNvbGxlY3Rpb24uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0Iiwic2VyaWFsaXplIiwidGVzdCIsIl9jb2xsZWN0aW9ucyIsInJlcXVpcmUiLCJTUEFDRSIsIk9CSkVDVF9OQU1FUyIsIkFSUkFZX1JFR0VYUCIsInRlc3ROYW1lIiwibmFtZSIsImluZGV4T2YiLCJ2YWwiLCJjb25zdHJ1Y3RvciIsImlzTmFtZWROb2RlTWFwIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwibWluIiwicHJpbnRPYmplY3RQcm9wZXJ0aWVzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwicHJvcHMiLCJhdHRyaWJ1dGUiLCJwcmludExpc3RJdGVtcyIsInBsdWdpbiIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JGLE9BQU8sQ0FBQ0csU0FBUixHQUFvQkgsT0FBTyxDQUFDSSxJQUFSLEdBQWUsS0FBSyxDQUExRDs7QUFFQSxJQUFJQyxZQUFZLEdBQUdDLE9BQU8sa0JBQTFCOztBQVVBLElBQU1DLEtBQUssR0FBRyxHQUFkO0FBQ0EsSUFBTUMsWUFBWSxHQUFHLENBQUMsY0FBRCxFQUFpQixjQUFqQixDQUFyQjtBQUNBLElBQU1DLFlBQVksR0FBRyxnQ0FBckI7O0FBRUEsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQUMsSUFBSTtBQUFBLFNBQ25CSCxZQUFZLENBQUNJLE9BQWIsQ0FBcUJELElBQXJCLE1BQStCLENBQUMsQ0FBaEMsSUFBcUNGLFlBQVksQ0FBQ0wsSUFBYixDQUFrQk8sSUFBbEIsQ0FEbEI7QUFBQSxDQUFyQjs7QUFHQSxJQUFNUCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBUyxHQUFHO0FBQUEsU0FDZEEsR0FBRyxJQUNIQSxHQUFHLENBQUNDLFdBREosSUFFQSxDQUFDLENBQUNELEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkgsSUFGbEIsSUFHQUQsUUFBUSxDQUFDRyxHQUFHLENBQUNDLFdBQUosQ0FBZ0JILElBQWpCLENBSk07QUFBQSxDQUFoQjs7QUFNQVgsT0FBTyxDQUFDSSxJQUFSLEdBQWVBLElBQWY7O0FBRUEsSUFBTVcsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFBQyxVQUFVO0FBQUEsU0FDL0JBLFVBQVUsQ0FBQ0YsV0FBWCxDQUF1QkgsSUFBdkIsS0FBZ0MsY0FERDtBQUFBLENBQWpDOztBQUdBLElBQU1SLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNhLFVBQUQsRUFBYUMsTUFBYixFQUFxQkMsV0FBckIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxFQUErQ0MsT0FBL0MsRUFBMkQ7QUFDM0UsTUFBTVYsSUFBSSxHQUFHSyxVQUFVLENBQUNGLFdBQVgsQ0FBdUJILElBQXBDOztBQUVBLE1BQUksRUFBRVEsS0FBRixHQUFVRixNQUFNLENBQUNLLFFBQXJCLEVBQStCO0FBQzdCLFdBQU8sTUFBTVgsSUFBTixHQUFhLEdBQXBCO0FBQ0Q7O0FBRUQsU0FDRSxDQUFDTSxNQUFNLENBQUNNLEdBQVAsR0FBYSxFQUFiLEdBQWtCWixJQUFJLEdBQUdKLEtBQTFCLEtBQ0NDLFlBQVksQ0FBQ0ksT0FBYixDQUFxQkQsSUFBckIsTUFBK0IsQ0FBQyxDQUFoQyxHQUNHLE1BQ0EsQ0FBQyxHQUFHTixZQUFZLENBQUNtQixxQkFBakIsRUFDRVQsY0FBYyxDQUFDQyxVQUFELENBQWQsR0FDSVMsS0FBSyxDQUFDQyxJQUFOLENBQVdWLFVBQVgsRUFBdUJXLE1BQXZCLENBQThCLFVBQUNDLEtBQUQsRUFBUUMsU0FBUixFQUFzQjtBQUNsREQsSUFBQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNsQixJQUFYLENBQUwsR0FBd0JrQixTQUFTLENBQUM1QixLQUFsQztBQUNBLFdBQU8yQixLQUFQO0FBQ0QsR0FIRCxFQUdHLEVBSEgsQ0FESiw4QkFLUVosVUFMUixDQURGLEVBT0VDLE1BUEYsRUFRRUMsV0FSRixFQVNFQyxLQVRGLEVBVUVDLElBVkYsRUFXRUMsT0FYRixDQURBLEdBY0EsR0FmSCxHQWdCRyxNQUNBLENBQUMsR0FBR2hCLFlBQVksQ0FBQ3lCLGNBQWpCLEVBQ0VMLEtBQUssQ0FBQ0MsSUFBTixDQUFXVixVQUFYLENBREYsRUFFRUMsTUFGRixFQUdFQyxXQUhGLEVBSUVDLEtBSkYsRUFLRUMsSUFMRixFQU1FQyxPQU5GLENBREEsR0FTQSxHQTFCSixDQURGO0FBNkJELENBcENEOztBQXNDQXJCLE9BQU8sQ0FBQ0csU0FBUixHQUFvQkEsU0FBcEI7QUFDQSxJQUFNNEIsTUFBTSxHQUFHO0FBQ2I1QixFQUFBQSxTQUFTLEVBQVRBLFNBRGE7QUFFYkMsRUFBQUEsSUFBSSxFQUFKQTtBQUZhLENBQWY7QUFJQSxJQUFJNEIsUUFBUSxHQUFHRCxNQUFmO0FBQ0EvQixPQUFPLENBQUNFLE9BQVIsR0FBa0I4QixRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMudGVzdCA9IHZvaWQgMDtcblxudmFyIF9jb2xsZWN0aW9ucyA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbG9jYWwvYmFuLXR5cGVzLWV2ZW50dWFsbHkgKi9cbmNvbnN0IFNQQUNFID0gJyAnO1xuY29uc3QgT0JKRUNUX05BTUVTID0gWydET01TdHJpbmdNYXAnLCAnTmFtZWROb2RlTWFwJ107XG5jb25zdCBBUlJBWV9SRUdFWFAgPSAvXihIVE1MXFx3KkNvbGxlY3Rpb258Tm9kZUxpc3QpJC87XG5cbmNvbnN0IHRlc3ROYW1lID0gbmFtZSA9PlxuICBPQkpFQ1RfTkFNRVMuaW5kZXhPZihuYW1lKSAhPT0gLTEgfHwgQVJSQVlfUkVHRVhQLnRlc3QobmFtZSk7XG5cbmNvbnN0IHRlc3QgPSB2YWwgPT5cbiAgdmFsICYmXG4gIHZhbC5jb25zdHJ1Y3RvciAmJlxuICAhIXZhbC5jb25zdHJ1Y3Rvci5uYW1lICYmXG4gIHRlc3ROYW1lKHZhbC5jb25zdHJ1Y3Rvci5uYW1lKTtcblxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcblxuY29uc3QgaXNOYW1lZE5vZGVNYXAgPSBjb2xsZWN0aW9uID0+XG4gIGNvbGxlY3Rpb24uY29uc3RydWN0b3IubmFtZSA9PT0gJ05hbWVkTm9kZU1hcCc7XG5cbmNvbnN0IHNlcmlhbGl6ZSA9IChjb2xsZWN0aW9uLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBuYW1lID0gY29sbGVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgcmV0dXJuICdbJyArIG5hbWUgKyAnXSc7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIChjb25maWcubWluID8gJycgOiBuYW1lICsgU1BBQ0UpICtcbiAgICAoT0JKRUNUX05BTUVTLmluZGV4T2YobmFtZSkgIT09IC0xXG4gICAgICA/ICd7JyArXG4gICAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRPYmplY3RQcm9wZXJ0aWVzKShcbiAgICAgICAgICBpc05hbWVkTm9kZU1hcChjb2xsZWN0aW9uKVxuICAgICAgICAgICAgPyBBcnJheS5mcm9tKGNvbGxlY3Rpb24pLnJlZHVjZSgocHJvcHMsIGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3BzW2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgOiB7Li4uY29sbGVjdGlvbn0sXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgcHJpbnRlclxuICAgICAgICApICtcbiAgICAgICAgJ30nXG4gICAgICA6ICdbJyArXG4gICAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRMaXN0SXRlbXMpKFxuICAgICAgICAgIEFycmF5LmZyb20oY29sbGVjdGlvbiksXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgcHJpbnRlclxuICAgICAgICApICtcbiAgICAgICAgJ10nKVxuICApO1xufTtcblxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl19