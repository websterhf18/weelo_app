272c0299922eb6ae418dee34d41a942e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

var React = _interopRequireWildcard(require("react"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _act = _interopRequireDefault(require("./act"));

var _cleanup = require("./cleanup");

var _getByAPI = require("./helpers/getByAPI");

var _queryByAPI = require("./helpers/queryByAPI");

var _findByAPI = require("./helpers/findByAPI");

var _a11yAPI = require("./helpers/a11yAPI");

var _debugShallow = _interopRequireDefault(require("./helpers/debugShallow"));

var _debugDeep = _interopRequireDefault(require("./helpers/debugDeep"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function render(component) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      Wrapper = _ref.wrapper,
      createNodeMock = _ref.createNodeMock;

  var wrap = function wrap(innerElement) {
    return Wrapper ? React.createElement(Wrapper, null, innerElement) : innerElement;
  };

  var renderer = renderWithAct(wrap(component), createNodeMock ? {
    createNodeMock: createNodeMock
  } : undefined);
  var update = updateWithAct(renderer, wrap);
  var instance = renderer.root;
  (0, _cleanup.addToCleanupQueue)(renderer.unmount);
  return (0, _extends2.default)({}, (0, _getByAPI.getByAPI)(instance), (0, _queryByAPI.queryByAPI)(instance), (0, _findByAPI.findByAPI)(instance), (0, _a11yAPI.a11yAPI)(instance), {
    update: update,
    container: instance,
    rerender: update,
    unmount: renderer.unmount,
    toJSON: renderer.toJSON,
    debug: debug(instance, renderer)
  });
}

function renderWithAct(component, options) {
  var renderer;
  (0, _act.default)(function () {
    renderer = _reactTestRenderer.default.create(component, options);
  });
  return renderer;
}

function updateWithAct(renderer, wrap) {
  return function (component) {
    (0, _act.default)(function () {
      renderer.update(wrap(component));
    });
  };
}

function debug(instance, renderer) {
  function debugImpl(message) {
    return (0, _debugDeep.default)(renderer.toJSON(), message);
  }

  debugImpl.shallow = function (message) {
    return (0, _debugShallow.default)(instance, message);
  };

  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,