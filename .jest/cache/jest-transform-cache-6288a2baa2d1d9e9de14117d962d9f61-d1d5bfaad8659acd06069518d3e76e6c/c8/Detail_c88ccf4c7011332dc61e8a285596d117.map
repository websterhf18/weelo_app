{"version":3,"sources":["Detail.tsx"],"names":["Detail","props","configTheme","styles","dispatch","data","setData","loadingRefresh","setLoadingRefresh","fetch","error","console","log","onRefresh","container","route","params","item","nombre","navigation","goBack","margin"],"mappings":";;;;;;;;;;;AAKA;;AACA;;AACA;;AACA;;AAEA;;AAKA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAMA,MAAsC,GAAG,SAAzCA,MAAyC,CAACC,KAAD,EAAW;AAAA;;AAAA;;AACtD,uCAAwB,8BAAxB;AAAA,MAAQC,WAAR,QAAQA,WAAR;;AACA,MAAMC,MAAM,6BAAG,qBAAUD,WAAV,CAAH,CAAZ;AAEA,MAAME,QAAQ,6BAAG,8BAAH,CAAd;;AAGA,wCAAwB,qBAAS,uBAAO,EAAP,CAAT,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,wCAA4C,qBAAS,IAAT,CAA5C;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AARsD;AAUtD,wBAAU,YAAM;AAAA;;AACZ,aAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACI,kBAAI;AAAA;AAEAD,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,eAHD,CAGE,OAAOE,KAAP,EAAc;AAAA;AACZC,gBAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACH;;AANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADY;AASZD,IAAAA,KAAK;AACR,GAVD,EAUG,EAVH;AAVsD;AAsBtD,wBAAU,YAAM;AAAA;AAGf,GAHD,EAGG,EAHH;AAtBsD;;AA2BtD,MAAMI,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACd,gBAAI;AAAA;AACAL,cAAAA,iBAAiB,CAAC,IAAD,CAAjB;AADA;AAGAA,cAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,aAJD,CAIE,OAAOE,KAAP,EAAc;AAAA;AACZF,cAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AA3BsD;AAyCtD,SACI,6BAAC,wCAAD;AAAc,IAAA,KAAK,EAAEL,MAAM,CAACW;AAA5B,KACI,6BAAC,mBAAD;AACI,IAAA,UAAU,EAAC,OADf;AAEI,IAAA,KAAK,yBAAEb,KAAK,CAACc,KAAN,CAAYC,MAAd,8CAAE,oBAAoBC,IAAtB,+CAAE,sBAA0BZ,IAA5B,qBAAE,uBAAgCa,MAF3C;AAGI,IAAA,OAAO,EAAEjB,KAAK,CAACkB,UAAN,CAAiBC;AAH9B,IADJ,EAMKb,cAAc,gCACX,6BAAC,8BAAD;AAAmB,IAAA,KAAK,EAAC,OAAzB;AAAiC,IAAA,IAAI,EAAE,EAAvC;AAA2C,IAAA,KAAK,EAAE;AAAEc,MAAAA,MAAM,EAAE;AAAV;AAAlD,IADW,iCAGX,EAHW,CANnB,CADJ;AAqBH,CA9DD;;eAgEerB,M","sourcesContent":["/**\n * @author Hugo Garcia\n * @description Detail Screen\n * @returns \n */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { fromJS, Map as ImmutableMap } from 'immutable';\n\nimport useConfigTheme from '@hooks/useConfigTheme';\n\nimport { SlicesDetail } from '@navigation/interfaceInject';\n\nimport List from '@components/List/List';\nimport HeaderBack from '@components/HeaderBack/HeaderBack';\nimport RenderItemDetail from '@components/RenderItemDetail/RenderItemDetail';\n\nimport useStyles from './styles';\nimport { ActivityIndicator } from 'react-native';\n\ninterface Props {\n    navigation: any;\n    route: any;\n}\n\nconst Detail: React.FC<Props & SlicesDetail> = (props) => {\n    const { configTheme } = useConfigTheme();\n    const styles = useStyles(configTheme);\n\n    const dispatch = useDispatch()\n    //const seriesRedux = useSelector(({ indicadores }: { indicadores: any }) => indicadores.series);\n\n    const [data, setData] = useState(fromJS([]));\n    const [loadingRefresh, setLoadingRefresh] = useState(true)\n\n    useEffect(() => {\n        async function fetch() {\n            try {\n                //await dispatch(props.getIndicadoresByTypeRedux(props.route.params?.item.name));\n                setLoadingRefresh(false);\n            } catch (error) {\n                console.log('**** ERROR in View *****', error);\n            }\n        }\n        fetch()\n    }, [])\n\n    useEffect(() => {\n        //console.log('seriesRedux', seriesRedux)\n        //setData(fromJS(seriesRedux))\n    }, [/**seriesRedux**/])\n\n    const onRefresh = async () => {\n        try {\n            setLoadingRefresh(true);\n            //await dispatch(props.getIndicadoresByTypeRedux(props.route.params?.item.name))\n            setLoadingRefresh(false);\n        } catch (error) {\n            setLoadingRefresh(false);\n        }\n    }\n\n    /**const renderItem = ({ item, index }: { item: ImmutableMap<string, any>, index: number }) => (\n        <RenderItemDetail item={item} />\n    )**/\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <HeaderBack\n                routerBack='Coins'\n                title={props.route.params?.item?.data?.nombre}\n                onPress={props.navigation.goBack}\n            />\n            {loadingRefresh ? (\n                <ActivityIndicator color='black' size={30} style={{ margin: 20 }} />\n            ) : (\n                {/** <List\n                    dataSource={data}\n                    extraData={fromJS(seriesRedux)}\n                    renderItem={renderItem}\n                    refreshing={loadingRefresh}\n                    onRefresh={onRefresh}\n                />*/}\n            )}\n\n        </SafeAreaView>\n    )\n}\n\nexport default Detail;\n"]}