{"version":3,"sources":["List.tsx"],"names":["List","props","configTheme","styles","dataSource","getItem","data","index","get","getItemCount","size","keyExtractor","item","noFoundData","text","container"],"mappings":";;;;;;;;;AAKA;;AACA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,IAAqB,GAAG,SAAxBA,IAAwB,CAACC,KAAD,EAAW;AAAA;;AACvC,uCAAwB,8BAAxB;AAAA,MAAQC,WAAR,QAAQA,WAAR;;AACA,MAAMC,MAAM,6BAAG,qBAAUD,WAAV,CAAH,CAAZ;;AAEA,wCAAuBD,KAAvB;AAAA,MAAQG,UAAR,SAAQA,UAAR;;AAJuC;;AAKvC,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAYC,KAAZ,EAA8B;AAAA;AAAA;AAAA,WAAAD,IAAI,CAACE,GAAL,CAASD,KAAT;AAAe,GAA7D;;AALuC;;AAMvC,MAAME,YAAY,GAAG,SAAfA,YAAe,GACrB;AAAA;AAAA;AAAA,WAAAL,UAAU,CAACM,IAAX;AAAe,GADf;;AANuC;;AAQvC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAkCL,KAAlC,EAAoD;AAAA;AAAA;AAAA,WAAGK,IAAI,CAACF,IAAR,SAAgBH,KAAhB;AAAuB,GAAhG;;AARuC;;AASvC,MAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;AAAA;AAAA,wCAAC,iBAAD;AAAM,MAAA,KAAK,EAAEV,MAAM,CAACW;AAApB;AAAqD,GAA/E;;AATuC;AAWvC,SACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACY;AAApB,KACE,6BAAC,4BAAD,6BACOd,KADP;AAEE,IAAA,mBAAmB,EAAE,CAFvB;AAGE,IAAA,kBAAkB,EAAE,CAHtB;AAIE,IAAA,OAAO,EAAEI,OAJX;AAKE,IAAA,YAAY,EAAEI,YALhB;AAME,IAAA,IAAI,EAAEL,UANR;AAOE,IAAA,YAAY,EAAEO,YAPhB;AAQE,IAAA,kBAAkB,EAAEE;AARtB,KADF,CADF;AAcD,CAzBD;;eA2Beb,I","sourcesContent":["/**\n * @author Hugo Garcia\n * @description List Component\n * @returns \n */\nimport React from 'react';\nimport { Text, View, VirtualizedList } from 'react-native';\nimport { List as ImmutableList, Map as ImmutableMap } from 'immutable';\n\nimport useConfigTheme from '@hooks/useConfigTheme';\nimport useStyles from './styles';\n\ninterface Props {\n  dataSource: ImmutableList<ImmutableMap<string, any>>;\n  renderItem: (item: any) => JSX.Element;\n  refreshing: boolean;\n  onEndReachedThreshold?: number;\n  onEndReached?: () => void;\n  onRefresh?: () => void;\n  extraData: any;\n}\n\nconst List: React.FC<Props> = (props) => {\n  const { configTheme } = useConfigTheme();\n  const styles = useStyles(configTheme);\n\n  const { dataSource } = props;\n  const getItem = (data: any, index: number) => data.get(index);\n  const getItemCount = () =>\n  dataSource.size;\n  const keyExtractor = (item: ImmutableMap<string, any>, index: number) => `${item.size}-${index}`;\n  const noFoundData = () => <Text style={styles.text}>No hay informaci√≥n *</Text>;\n\n  return (\n    <View style={styles.container}>\n      <VirtualizedList\n        { ...props }\n        maxToRenderPerBatch={5}\n        initialNumToRender={5}\n        getItem={getItem}\n        getItemCount={getItemCount}\n        data={dataSource}\n        keyExtractor={keyExtractor}\n        ListEmptyComponent={noFoundData}\n      />\n    </View>\n  )\n}\n\nexport default List;\n"]}