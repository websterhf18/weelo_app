bc249894e125b6806b02fa580067b23e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SafeAreaProvider = SafeAreaProvider;
exports.useSafeAreaInsets = useSafeAreaInsets;
exports.useSafeAreaFrame = useSafeAreaFrame;
exports.withSafeAreaInsets = withSafeAreaInsets;
exports.useSafeArea = useSafeArea;
exports.SafeAreaContext = exports.SafeAreaConsumer = exports.SafeAreaFrameContext = exports.SafeAreaInsetsContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _NativeSafeAreaProvider = _interopRequireDefault(require("./NativeSafeAreaProvider"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SafeAreaInsetsContext = React.createContext(null);
exports.SafeAreaInsetsContext = SafeAreaInsetsContext;
SafeAreaInsetsContext.displayName = 'SafeAreaInsetsContext';
var SafeAreaFrameContext = React.createContext(null);
exports.SafeAreaFrameContext = SafeAreaFrameContext;
SafeAreaFrameContext.displayName = 'SafeAreaFrameContext';

function SafeAreaProvider(_ref4) {
  var children = _ref4.children,
      initialMetrics = _ref4.initialMetrics,
      initialSafeAreaInsets = _ref4.initialSafeAreaInsets,
      style = _ref4.style;

  var _ref, _ref2, _initialMetrics$inset, _ref3, _initialMetrics$frame;

  var parentInsets = useParentSafeAreaInsets();
  var parentFrame = useParentSafeAreaFrame();

  var _React$useState = React.useState((_ref = (_ref2 = (_initialMetrics$inset = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.insets) !== null && _initialMetrics$inset !== void 0 ? _initialMetrics$inset : initialSafeAreaInsets) !== null && _ref2 !== void 0 ? _ref2 : parentInsets) !== null && _ref !== void 0 ? _ref : null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      insets = _React$useState2[0],
      setInsets = _React$useState2[1];

  var _React$useState3 = React.useState((_ref3 = (_initialMetrics$frame = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.frame) !== null && _initialMetrics$frame !== void 0 ? _initialMetrics$frame : parentFrame) !== null && _ref3 !== void 0 ? _ref3 : {
    x: 0,
    y: 0,
    width: _reactNative.Dimensions.get('window').width,
    height: _reactNative.Dimensions.get('window').height
  }),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      frame = _React$useState4[0],
      setFrame = _React$useState4[1];

  var onInsetsChange = React.useCallback(function (event) {
    var _event$nativeEvent = event.nativeEvent,
        nextFrame = _event$nativeEvent.frame,
        nextInsets = _event$nativeEvent.insets;

    if (nextFrame && (nextFrame.height !== frame.height || nextFrame.width !== frame.width || nextFrame.x !== frame.x || nextFrame.y !== frame.y)) {
      setFrame(nextFrame);
    }

    if (!insets || nextInsets.bottom !== insets.bottom || nextInsets.left !== insets.left || nextInsets.right !== insets.right || nextInsets.top !== insets.top) {
      setInsets(nextInsets);
    }
  }, [frame, insets]);
  return React.createElement(_NativeSafeAreaProvider.default, {
    style: [styles.fill, style],
    onInsetsChange: onInsetsChange
  }, insets != null ? React.createElement(SafeAreaFrameContext.Provider, {
    value: frame
  }, React.createElement(SafeAreaInsetsContext.Provider, {
    value: insets
  }, children)) : null);
}

var styles = _reactNative.StyleSheet.create({
  fill: {
    flex: 1
  }
});

function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}

function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}

function useSafeAreaInsets() {
  var safeArea = React.useContext(SafeAreaInsetsContext);

  if (safeArea == null) {
    throw new Error('No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }

  return safeArea;
}

function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);

  if (frame == null) {
    throw new Error('No safe area frame value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }

  return frame;
}

function withSafeAreaInsets(WrappedComponent) {
  return React.forwardRef(function (props, ref) {
    return React.createElement(SafeAreaConsumer, null, function (insets) {
      return React.createElement(WrappedComponent, _extends({}, props, {
        insets: insets,
        ref: ref
      }));
    });
  });
}

function useSafeArea() {
  return useSafeAreaInsets();
}

var SafeAreaConsumer = SafeAreaInsetsContext.Consumer;
exports.SafeAreaConsumer = SafeAreaConsumer;
var SafeAreaContext = SafeAreaInsetsContext;
exports.SafeAreaContext = SafeAreaContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNhZmVBcmVhQ29udGV4dC50c3giXSwibmFtZXMiOlsiU2FmZUFyZWFJbnNldHNDb250ZXh0IiwiUmVhY3QiLCJTYWZlQXJlYUZyYW1lQ29udGV4dCIsInN0eWxlIiwicGFyZW50SW5zZXRzIiwidXNlUGFyZW50U2FmZUFyZWFJbnNldHMiLCJwYXJlbnRGcmFtZSIsInVzZVBhcmVudFNhZmVBcmVhRnJhbWUiLCJpbml0aWFsTWV0cmljcyIsIngiLCJ5Iiwid2lkdGgiLCJEaW1lbnNpb25zIiwiaGVpZ2h0Iiwib25JbnNldHNDaGFuZ2UiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwiZnJhbWUiLCJpbnNldHMiLCJuZXh0SW5zZXRzIiwibmV4dEZyYW1lIiwic2V0RnJhbWUiLCJzZXRJbnNldHMiLCJzdHlsZXMiLCJmaWxsIiwiZmxleCIsInNhZmVBcmVhIiwicmVmIiwidXNlU2FmZUFyZWFJbnNldHMiLCJTYWZlQXJlYUNvbnN1bWVyIiwiU2FmZUFyZWFDb250ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFDQSxJQUFBLHVCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDRCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdPLElBQU1BLHFCQUFxQixHQUFHQyxLQUFLLENBQUxBLGFBQUFBLENBQTlCLElBQThCQSxDQUE5Qjs7QUFHUEQscUJBQXFCLENBQXJCQSxXQUFBQSxHQUFBQSx1QkFBQUE7QUFFTyxJQUFNRSxvQkFBb0IsR0FBR0QsS0FBSyxDQUFMQSxhQUFBQSxDQUE3QixJQUE2QkEsQ0FBN0I7O0FBQ1BDLG9CQUFvQixDQUFwQkEsV0FBQUEsR0FBQUEs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Q0FBTjtBQUdEOztBQUNELFNBQUEsUUFBQTtBQUNEOztBQUVNLFNBQUEsZ0JBQUEsR0FBa0M7QUFDdkMsTUFBTVQsS0FBSyxHQUFHaEIsS0FBSyxDQUFMQSxVQUFBQSxDQUFkLG9CQUFjQSxDQUFkOztBQUNBLE1BQUlnQixLQUFLLElBQVQsSUFBQSxFQUFtQjtBQUNqQixVQUFNLElBQUEsS0FBQSxDQUFOLDhHQUFNLENBQU47QUFHRDs7QUFDRCxTQUFBLEtBQUE7QUFDRDs7QUFFTSxTQUFBLGtCQUFBLENBQUEsZ0JBQUEsRUFFTDtBQUNBLFNBQU8sS0FBSyxDQUFMLFVBQUEsQ0FBaUIsVUFBQSxLQUFBLEVBQUEsR0FBQTtBQUFBLFdBQ3RCLEtBQUEsQ0FBQSxhQUFBLENBQUEsZ0JBQUEsRUFBQSxJQUFBLEVBQ0lDLFVBQUFBLE1BQUQ7QUFBQSxhQUFZLEtBQUEsQ0FBQSxhQUFBLENBQUEsZ0JBQUEsRUFBQSxRQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQTtBQUE2QixRQUFBLE1BQU0sRUFBbkMsTUFBQTtBQUE2QyxRQUFBLEdBQUcsRUFBRVM7QUFBbEQsT0FBQSxDQUFBLENBQVo7QUFBQSxLQURILENBRHNCO0FBQUEsR0FBakIsQ0FBUDtBQUtEOztBQUtNLFNBQUEsV0FBQSxHQUFtQztBQUN4QyxTQUFPQyxpQkFBUCxFQUFBO0FBQ0Q7O0FBS00sSUFBTUMsZ0JBQWdCLEdBQUc3QixxQkFBcUIsQ0FBOUMsUUFBQTs7QUFLQSxJQUFNOEIsZUFBZSxHQUFyQixxQkFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpbWVuc2lvbnMsIFN0eWxlUHJvcCwgU3R5bGVTaGVldCwgVmlld1N0eWxlIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBOYXRpdmVTYWZlQXJlYVByb3ZpZGVyIGZyb20gJy4vTmF0aXZlU2FmZUFyZWFQcm92aWRlcic7XG5pbXBvcnQgeyBFZGdlSW5zZXRzLCBJbnNldENoYW5nZWRFdmVudCwgTWV0cmljcywgUmVjdCB9IGZyb20gJy4vU2FmZUFyZWEudHlwZXMnO1xuXG5leHBvcnQgY29uc3QgU2FmZUFyZWFJbnNldHNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxFZGdlSW5zZXRzIHwgbnVsbD4oXG4gIG51bGwsXG4pO1xuU2FmZUFyZWFJbnNldHNDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1NhZmVBcmVhSW5zZXRzQ29udGV4dCc7XG5cbmV4cG9ydCBjb25zdCBTYWZlQXJlYUZyYW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8UmVjdCB8IG51bGw+KG51bGwpO1xuU2FmZUFyZWFGcmFtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnU2FmZUFyZWFGcmFtZUNvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNhZmVBcmVhVmlld1Byb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGluaXRpYWxNZXRyaWNzPzogTWV0cmljcyB8IG51bGw7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaW5pdGlhbFNhZmVBcmVhSW5zZXRzPzogRWRnZUluc2V0cyB8IG51bGw7XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTYWZlQXJlYVByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGluaXRpYWxNZXRyaWNzLFxuICBpbml0aWFsU2FmZUFyZWFJbnNldHMsXG4gIHN0eWxlLFxufTogU2FmZUFyZWFWaWV3UHJvcHMpIHtcbiAgY29uc3QgcGFyZW50SW5zZXRzID0gdXNlUGFyZW50U2FmZUFyZWFJbnNldHMoKTtcbiAgY29uc3QgcGFyZW50RnJhbWUgPSB1c2VQYXJlbnRTYWZlQXJlYUZyYW1lKCk7XG4gIGNvbnN0IFtpbnNldHMsIHNldEluc2V0c10gPSBSZWFjdC51c2VTdGF0ZTxFZGdlSW5zZXRzIHwgbnVsbD4oXG4gICAgaW5pdGlhbE1ldHJpY3M/Lmluc2V0cyA/PyBpbml0aWFsU2FmZUFyZWFJbnNldHMgPz8gcGFyZW50SW5zZXRzID8/IG51bGwsXG4gICk7XG4gIGNvbnN0IFtmcmFtZSwgc2V0RnJhbWVdID0gUmVhY3QudXNlU3RhdGU8UmVjdD4oXG4gICAgaW5pdGlhbE1ldHJpY3M/LmZyYW1lID8/XG4gICAgICBwYXJlbnRGcmFtZSA/PyB7XG4gICAgICAgIC8vIEJhY2t3YXJkcyBjb21wYXQgc28gd2UgcmVuZGVyIGFueXdheSBpZiB3ZSBkb24ndCBoYXZlIGZyYW1lLlxuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQsXG4gICAgICB9LFxuICApO1xuICBjb25zdCBvbkluc2V0c0NoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudDogSW5zZXRDaGFuZ2VkRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmF0aXZlRXZlbnQ6IHsgZnJhbWU6IG5leHRGcmFtZSwgaW5zZXRzOiBuZXh0SW5zZXRzIH0sXG4gICAgICB9ID0gZXZlbnQ7XG5cbiAgICAgIGlmIChcbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdCB3aXRoIG9sZCBuYXRpdmUgY29kZSB0aGF0IHdvbid0IHNlbmQgZnJhbWUuXG4gICAgICAgIG5leHRGcmFtZSAmJlxuICAgICAgICAobmV4dEZyYW1lLmhlaWdodCAhPT0gZnJhbWUuaGVpZ2h0IHx8XG4gICAgICAgICAgbmV4dEZyYW1lLndpZHRoICE9PSBmcmFtZS53aWR0aCB8fFxuICAgICAgICAgIG5leHRGcmFtZS54ICE9PSBmcmFtZS54IHx8XG4gICAgICAgICAgbmV4dEZyYW1lLnkgIT09IGZyYW1lLnkpXG4gICAgICApIHtcbiAgICAgICAgc2V0RnJhbWUobmV4dEZyYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAhaW5zZXRzIHx8XG4gICAgICAgIG5leHRJbnNldHMuYm90dG9tICE9PSBpbnNldHMuYm90dG9tIHx8XG4gICAgICAgIG5leHRJbnNldHMubGVmdCAhPT0gaW5zZXRzLmxlZnQgfHxcbiAgICAgICAgbmV4dEluc2V0cy5yaWdodCAhPT0gaW5zZXRzLnJpZ2h0IHx8XG4gICAgICAgIG5leHRJbnNldHMudG9wICE9PSBpbnNldHMudG9wXG4gICAgICApIHtcbiAgICAgICAgc2V0SW5zZXRzKG5leHRJbnNldHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2ZyYW1lLCBpbnNldHNdLFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPE5hdGl2ZVNhZmVBcmVhUHJvdmlkZXJcbiAgICAgIHN0eWxlPXtbc3R5bGVzLmZpbGwsIHN0eWxlXX1cbiAgICAgIG9uSW5zZXRzQ2hhbmdlPXtvbkluc2V0c0NoYW5nZX1cbiAgICA+XG4gICAgICB7aW5zZXRzICE9IG51bGwgPyAoXG4gICAgICAgIDxTYWZlQXJlYUZyYW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZnJhbWV9PlxuICAgICAgICAgIDxTYWZlQXJlYUluc2V0c0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2luc2V0c30+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgPC9TYWZlQXJlYUluc2V0c0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgIDwvU2FmZUFyZWFGcmFtZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICApIDogbnVsbH1cbiAgICA8L05hdGl2ZVNhZmVBcmVhUHJvdmlkZXI+XG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgZmlsbDogeyBmbGV4OiAxIH0sXG59KTtcblxuZnVuY3Rpb24gdXNlUGFyZW50U2FmZUFyZWFJbnNldHMoKTogRWRnZUluc2V0cyB8IG51bGwge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChTYWZlQXJlYUluc2V0c0NvbnRleHQpO1xufVxuXG5mdW5jdGlvbiB1c2VQYXJlbnRTYWZlQXJlYUZyYW1lKCk6IFJlY3QgfCBudWxsIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoU2FmZUFyZWFGcmFtZUNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2FmZUFyZWFJbnNldHMoKTogRWRnZUluc2V0cyB7XG4gIGNvbnN0IHNhZmVBcmVhID0gUmVhY3QudXNlQ29udGV4dChTYWZlQXJlYUluc2V0c0NvbnRleHQpO1xuICBpZiAoc2FmZUFyZWEgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdObyBzYWZlIGFyZWEgaW5zZXRzIHZhbHVlIGF2YWlsYWJsZS4gTWFrZSBzdXJlIHlvdSBhcmUgcmVuZGVyaW5nIGA8U2FmZUFyZWFQcm92aWRlcj5gIGF0IHRoZSB0b3Agb2YgeW91ciBhcHAuJyxcbiAgICApO1xuICB9XG4gIHJldHVybiBzYWZlQXJlYTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNhZmVBcmVhRnJhbWUoKTogUmVjdCB7XG4gIGNvbnN0IGZyYW1lID0gUmVhY3QudXNlQ29udGV4dChTYWZlQXJlYUZyYW1lQ29udGV4dCk7XG4gIGlmIChmcmFtZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ05vIHNhZmUgYXJlYSBmcmFtZSB2YWx1ZSBhdmFpbGFibGUuIE1ha2Ugc3VyZSB5b3UgYXJlIHJlbmRlcmluZyBgPFNhZmVBcmVhUHJvdmlkZXI+YCBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwLicsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZnJhbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2FmZUFyZWFJbnNldHM8VD4oXG4gIFdyYXBwZWRDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8VD4sXG4pIHtcbiAgcmV0dXJuIFJlYWN0LmZvcndhcmRSZWYoKHByb3BzOiBULCByZWY6IFJlYWN0LlJlZjxUPikgPT4gKFxuICAgIDxTYWZlQXJlYUNvbnN1bWVyPlxuICAgICAgeyhpbnNldHMpID0+IDxXcmFwcGVkQ29tcG9uZW50IHsuLi5wcm9wc30gaW5zZXRzPXtpbnNldHN9IHJlZj17cmVmfSAvPn1cbiAgICA8L1NhZmVBcmVhQ29uc3VtZXI+XG4gICkpO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTYWZlQXJlYSgpOiBFZGdlSW5zZXRzIHtcbiAgcmV0dXJuIHVzZVNhZmVBcmVhSW5zZXRzKCk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IFNhZmVBcmVhQ29uc3VtZXIgPSBTYWZlQXJlYUluc2V0c0NvbnRleHQuQ29uc3VtZXI7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IFNhZmVBcmVhQ29udGV4dCA9IFNhZmVBcmVhSW5zZXRzQ29udGV4dDtcbiJdfQ==