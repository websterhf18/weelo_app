{"version":3,"sources":["byTestId.js"],"names":["Object","defineProperty","exports","value","queryByTestId","queryAllByTestId","getByTestId","getAllByTestId","findByTestId","findAllByTestId","_makeQueries","require","getNodeByTestId","node","testID","props","test","instance","queryAllByTestIdFn","testId","results","findAll","filter","element","type","getMultipleError","String","getMissingError","makeQueries","getBy","getAllBy","queryBy","findBy","findAllBy"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,cAAR,GAAyBL,OAAO,CAACM,YAAR,GAAuBN,OAAO,CAACO,eAAR,GAA0B,KAAK,CAAxJ;;AAEA,IAAIC,YAAY,GAAGC,OAAO,iBAA1B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,MAAP,EAAkB;AACxC,SAAO,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,KAAKD,IAAI,CAACE,KAAL,CAAWD,MAAnD,GAA4DA,MAAM,CAACE,IAAP,CAAYH,IAAI,CAACE,KAAL,CAAWD,MAAvB,CAAnE;AACD,CAFD;;AAIA,IAAMT,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAY,QAAQ;AAAA,SAAI,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AACvE,QAAMC,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiB,UAAAR,IAAI;AAAA,aAAID,eAAe,CAACC,IAAD,EAAOM,MAAP,CAAnB;AAAA,KAArB,EAAwDG,MAAxD,CAA+D,UAAAC,OAAO;AAAA,aAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B;AAAA,KAAtE,CAAhB;AACA,WAAOJ,OAAP;AACD,GAHgC;AAAA,CAAjC;;AAKAlB,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAMoB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAN,MAAM;AAAA,mDAA4CO,MAAM,CAACP,MAAD,CAAlD;AAAA,CAA/B;;AAEA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAAAR,MAAM;AAAA,qDAA8CO,MAAM,CAACP,MAAD,CAApD;AAAA,CAA9B;;AAEA,WAMI,CAAC,GAAGT,YAAY,CAACkB,WAAjB,EAA8BvB,gBAA9B,EAAgDsB,eAAhD,EAAiEF,gBAAjE,CANJ;AAAA,IACSnB,WADT,QACEuB,KADF;AAAA,IAEYtB,cAFZ,QAEEuB,QAFF;AAAA,IAGW1B,aAHX,QAGE2B,OAHF;AAAA,IAIUvB,YAJV,QAIEwB,MAJF;AAAA,IAKavB,eALb,QAKEwB,SALF;;AAOA/B,OAAO,CAACO,eAAR,GAA0BA,eAA1B;AACAP,OAAO,CAACM,YAAR,GAAuBA,YAAvB;AACAN,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACK,cAAR,GAAyBA,cAAzB;AACAL,OAAO,CAACI,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;\n\nvar _makeQueries = require(\"./makeQueries\");\n\nconst getNodeByTestId = (node, testID) => {\n  return typeof testID === 'string' ? testID === node.props.testID : testID.test(node.props.testID);\n};\n\nconst queryAllByTestId = instance => function queryAllByTestIdFn(testId) {\n  const results = instance.findAll(node => getNodeByTestId(node, testId)).filter(element => typeof element.type === 'string');\n  return results;\n};\n\nexports.queryAllByTestId = queryAllByTestId;\n\nconst getMultipleError = testId => `Found multiple elements with testID: ${String(testId)}`;\n\nconst getMissingError = testId => `Unable to find an element with testID: ${String(testId)}`;\n\nconst {\n  getBy: getByTestId,\n  getAllBy: getAllByTestId,\n  queryBy: queryByTestId,\n  findBy: findByTestId,\n  findAllBy: findAllByTestId\n} = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError);\nexports.findAllByTestId = findAllByTestId;\nexports.findByTestId = findByTestId;\nexports.queryByTestId = queryByTestId;\nexports.getAllByTestId = getAllByTestId;\nexports.getByTestId = getByTestId;"]}