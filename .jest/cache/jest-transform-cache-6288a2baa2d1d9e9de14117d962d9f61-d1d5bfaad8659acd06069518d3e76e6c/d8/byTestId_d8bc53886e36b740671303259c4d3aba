ee7d512dcf4c9b50bf0bb66056386317
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;

var _makeQueries = require("./makeQueries");

var getNodeByTestId = function getNodeByTestId(node, testID) {
  return typeof testID === 'string' ? testID === node.props.testID : testID.test(node.props.testID);
};

var queryAllByTestId = function queryAllByTestId(instance) {
  return function queryAllByTestIdFn(testId) {
    var results = instance.findAll(function (node) {
      return getNodeByTestId(node, testId);
    }).filter(function (element) {
      return typeof element.type === 'string';
    });
    return results;
  };
};

exports.queryAllByTestId = queryAllByTestId;

var getMultipleError = function getMultipleError(testId) {
  return "Found multiple elements with testID: " + String(testId);
};

var getMissingError = function getMissingError(testId) {
  return "Unable to find an element with testID: " + String(testId);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError),
    getByTestId = _ref.getBy,
    getAllByTestId = _ref.getAllBy,
    queryByTestId = _ref.queryBy,
    findByTestId = _ref.findBy,
    findAllByTestId = _ref.findAllBy;

exports.findAllByTestId = findAllByTestId;
exports.findByTestId = findByTestId;
exports.queryByTestId = queryByTestId;
exports.getAllByTestId = getAllByTestId;
exports.getByTestId = getByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5VGVzdElkLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeVRlc3RJZCIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJnZXRCeVRlc3RJZCIsImdldEFsbEJ5VGVzdElkIiwiZmluZEJ5VGVzdElkIiwiZmluZEFsbEJ5VGVzdElkIiwiX21ha2VRdWVyaWVzIiwicmVxdWlyZSIsImdldE5vZGVCeVRlc3RJZCIsIm5vZGUiLCJ0ZXN0SUQiLCJwcm9wcyIsInRlc3QiLCJpbnN0YW5jZSIsInF1ZXJ5QWxsQnlUZXN0SWRGbiIsInRlc3RJZCIsInJlc3VsdHMiLCJmaW5kQWxsIiwiZmlsdGVyIiwiZWxlbWVudCIsInR5cGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsImZpbmRCeSIsImZpbmRBbGxCeSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGFBQVIsR0FBd0JGLE9BQU8sQ0FBQ0csZ0JBQVIsR0FBMkJILE9BQU8sQ0FBQ0ksV0FBUixHQUFzQkosT0FBTyxDQUFDSyxjQUFSLEdBQXlCTCxPQUFPLENBQUNNLFlBQVIsR0FBdUJOLE9BQU8sQ0FBQ08sZUFBUixHQUEwQixLQUFLLENBQXhKOztBQUVBLElBQUlDLFlBQVksR0FBR0MsT0FBTyxpQkFBMUI7O0FBRUEsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxJQUFELEVBQU9DLE1BQVAsRUFBa0I7QUFDeEMsU0FBTyxPQUFPQSxNQUFQLEtBQWtCLFFBQWxCLEdBQTZCQSxNQUFNLEtBQUtELElBQUksQ0FBQ0UsS0FBTCxDQUFXRCxNQUFuRCxHQUE0REEsTUFBTSxDQUFDRSxJQUFQLENBQVlILElBQUksQ0FBQ0UsS0FBTCxDQUFXRCxNQUF2QixDQUFuRTtBQUNELENBRkQ7O0FBSUEsSUFBTVQsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFBWSxRQUFRO0FBQUEsU0FBSSxTQUFTQyxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBb0M7QUFDdkUsUUFBTUMsT0FBTyxHQUFHSCxRQUFRLENBQUNJLE9BQVQsQ0FBaUIsVUFBQVIsSUFBSTtBQUFBLGFBQUlELGVBQWUsQ0FBQ0MsSUFBRCxFQUFPTSxNQUFQLENBQW5CO0FBQUEsS0FBckIsRUFBd0RHLE1BQXhELENBQStELFVBQUFDLE9BQU87QUFBQSxhQUFJLE9BQU9BLE9BQU8sQ0FBQ0MsSUFBZixLQUF3QixRQUE1QjtBQUFBLEtBQXRFLENBQWhCO0FBQ0EsV0FBT0osT0FBUDtBQUNELEdBSGdDO0FBQUEsQ0FBakM7O0FBS0FsQixPQUFPLENBQUNHLGdCQUFSLEdBQTJCQSxnQkFBM0I7O0FBRUEsSUFBTW9CLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQU4sTUFBTTtBQUFBLG1EQUE0Q08sTUFBTSxDQUFDUCxNQUFELENBQWxEO0FBQUEsQ0FBL0I7O0FBRUEsSUFBTVEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFBUixNQUFNO0FBQUEscURBQThDTyxNQUFNLENBQUNQLE1BQUQsQ0FBcEQ7QUFBQSxDQUE5Qjs7QUFFQSxXQU1JLENBQUMsR0FBR1QsWUFBWSxDQUFDa0IsV0FBakIsRUFBOEJ2QixnQkFBOUIsRUFBZ0RzQixlQUFoRCxFQUFpRUYsZ0JBQWpFLENBTko7QUFBQSxJQUNTbkIsV0FEVCxRQUNFdUIsS0FERjtBQUFBLElBRVl0QixjQUZaLFFBRUV1QixRQUZGO0FBQUEsSUFHVzFCLGFBSFgsUUFHRTJCLE9BSEY7QUFBQSxJQUlVdkIsWUFKVixRQUlFd0IsTUFKRjtBQUFBLElBS2F2QixlQUxiLFFBS0V3QixTQUxGOztBQU9BL0IsT0FBTyxDQUFDTyxlQUFSLEdBQTBCQSxlQUExQjtBQUNBUCxPQUFPLENBQUNNLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FOLE9BQU8sQ0FBQ0UsYUFBUixHQUF3QkEsYUFBeEI7QUFDQUYsT0FBTyxDQUFDSyxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBTCxPQUFPLENBQUNJLFdBQVIsR0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSBleHBvcnRzLmdldEJ5VGVzdElkID0gZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEJ5VGVzdElkID0gZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSB2b2lkIDA7XG5cbnZhciBfbWFrZVF1ZXJpZXMgPSByZXF1aXJlKFwiLi9tYWtlUXVlcmllc1wiKTtcblxuY29uc3QgZ2V0Tm9kZUJ5VGVzdElkID0gKG5vZGUsIHRlc3RJRCkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHRlc3RJRCA9PT0gJ3N0cmluZycgPyB0ZXN0SUQgPT09IG5vZGUucHJvcHMudGVzdElEIDogdGVzdElELnRlc3Qobm9kZS5wcm9wcy50ZXN0SUQpO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeVRlc3RJZCA9IGluc3RhbmNlID0+IGZ1bmN0aW9uIHF1ZXJ5QWxsQnlUZXN0SWRGbih0ZXN0SWQpIHtcbiAgY29uc3QgcmVzdWx0cyA9IGluc3RhbmNlLmZpbmRBbGwobm9kZSA9PiBnZXROb2RlQnlUZXN0SWQobm9kZSwgdGVzdElkKSkuZmlsdGVyKGVsZW1lbnQgPT4gdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpO1xuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbmV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9IHF1ZXJ5QWxsQnlUZXN0SWQ7XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSB0ZXN0SWQgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IHRlc3RJZCA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRlc3RJRDogJHtTdHJpbmcodGVzdElkKX1gO1xuXG5jb25zdCB7XG4gIGdldEJ5OiBnZXRCeVRlc3RJZCxcbiAgZ2V0QWxsQnk6IGdldEFsbEJ5VGVzdElkLFxuICBxdWVyeUJ5OiBxdWVyeUJ5VGVzdElkLFxuICBmaW5kQnk6IGZpbmRCeVRlc3RJZCxcbiAgZmluZEFsbEJ5OiBmaW5kQWxsQnlUZXN0SWRcbn0gPSAoMCwgX21ha2VRdWVyaWVzLm1ha2VRdWVyaWVzKShxdWVyeUFsbEJ5VGVzdElkLCBnZXRNaXNzaW5nRXJyb3IsIGdldE11bHRpcGxlRXJyb3IpO1xuZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSBmaW5kQWxsQnlUZXN0SWQ7XG5leHBvcnRzLmZpbmRCeVRlc3RJZCA9IGZpbmRCeVRlc3RJZDtcbmV4cG9ydHMucXVlcnlCeVRlc3RJZCA9IHF1ZXJ5QnlUZXN0SWQ7XG5leHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZ2V0QWxsQnlUZXN0SWQ7XG5leHBvcnRzLmdldEJ5VGVzdElkID0gZ2V0QnlUZXN0SWQ7Il19