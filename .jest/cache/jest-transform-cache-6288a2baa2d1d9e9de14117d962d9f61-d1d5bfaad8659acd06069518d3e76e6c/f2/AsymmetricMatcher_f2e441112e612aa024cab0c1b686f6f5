748615be85dd74fca8c9013be1d04f96
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.test = exports.serialize = void 0;

var _collections = require("../collections");

var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
var SPACE = ' ';

var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();

  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '[' + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
  }

  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return stringedValue + SPACE + '{' + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
  }

  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }

  return val.toAsymmetricMatcher();
};

exports.serialize = serialize;

var test = function test(val) {
  return val && val.$$typeof === asymmetricMatcher;
};

exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFzeW1tZXRyaWNNYXRjaGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInRlc3QiLCJzZXJpYWxpemUiLCJfY29sbGVjdGlvbnMiLCJyZXF1aXJlIiwiU3ltYm9sIiwiZ2xvYmFsIiwiYXN5bW1ldHJpY01hdGNoZXIiLCJmb3IiLCJTUEFDRSIsInZhbCIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsInN0cmluZ2VkVmFsdWUiLCJ0b1N0cmluZyIsIm1heERlcHRoIiwicHJpbnRMaXN0SXRlbXMiLCJzYW1wbGUiLCJwcmludE9iamVjdFByb3BlcnRpZXMiLCJ0b0FzeW1tZXRyaWNNYXRjaGVyIiwiJCR0eXBlb2YiLCJwbHVnaW4iLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JGLE9BQU8sQ0FBQ0csSUFBUixHQUFlSCxPQUFPLENBQUNJLFNBQVIsR0FBb0IsS0FBSyxDQUExRDs7QUFFQSxJQUFJQyxZQUFZLEdBQUdDLE9BQU8sa0JBQTFCOztBQUVBLElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDLDBCQUFELENBQU4sSUFBc0NBLE1BQU0sQ0FBQ0QsTUFBMUQ7QUFDQSxJQUFNRSxpQkFBaUIsR0FDckIsT0FBT0YsTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsTUFBTSxDQUFDRyxHQUF2QyxHQUNJSCxNQUFNLENBQUNHLEdBQVAsQ0FBVyx3QkFBWCxDQURKLEdBRUksUUFITjtBQUlBLElBQU1DLEtBQUssR0FBRyxHQUFkOztBQUVBLElBQU1QLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNRLEdBQUQsRUFBTUMsTUFBTixFQUFjQyxXQUFkLEVBQTJCQyxLQUEzQixFQUFrQ0MsSUFBbEMsRUFBd0NDLE9BQXhDLEVBQW9EO0FBQ3BFLE1BQU1DLGFBQWEsR0FBR04sR0FBRyxDQUFDTyxRQUFKLEVBQXRCOztBQUVBLE1BQ0VELGFBQWEsS0FBSyxpQkFBbEIsSUFDQUEsYUFBYSxLQUFLLG9CQUZwQixFQUdFO0FBQ0EsUUFBSSxFQUFFSCxLQUFGLEdBQVVGLE1BQU0sQ0FBQ08sUUFBckIsRUFBK0I7QUFDN0IsYUFBTyxNQUFNRixhQUFOLEdBQXNCLEdBQTdCO0FBQ0Q7O0FBRUQsV0FDRUEsYUFBYSxHQUNiUCxLQURBLEdBRUEsR0FGQSxHQUdBLENBQUMsR0FBR04sWUFBWSxDQUFDZ0IsY0FBakIsRUFDRVQsR0FBRyxDQUFDVSxNQUROLEVBRUVULE1BRkYsRUFHRUMsV0FIRixFQUlFQyxLQUpGLEVBS0VDLElBTEYsRUFNRUMsT0FORixDQUhBLEdBV0EsR0FaRjtBQWNEOztBQUVELE1BQ0VDLGFBQWEsS0FBSyxrQkFBbEIsSUFDQUEsYUFBYSxLQUFLLHFCQUZwQixFQUdFO0FBQ0EsUUFBSSxFQUFFSCxLQUFGLEdBQVVGLE1BQU0sQ0FBQ08sUUFBckIsRUFBK0I7QUFDN0IsYUFBTyxNQUFNRixhQUFOLEdBQXNCLEdBQTdCO0FBQ0Q7O0FBRUQsV0FDRUEsYUFBYSxHQUNiUCxLQURBLEdBRUEsR0FGQSxHQUdBLENBQUMsR0FBR04sWUFBWSxDQUFDa0IscUJBQWpCLEVBQ0VYLEdBQUcsQ0FBQ1UsTUFETixFQUVFVCxNQUZGLEVBR0VDLFdBSEYsRUFJRUMsS0FKRixFQUtFQyxJQUxGLEVBTUVDLE9BTkYsQ0FIQSxHQVdBLEdBWkY7QUFjRDs7QUFFRCxNQUNFQyxhQUFhLEtBQUssZ0JBQWxCLElBQ0FBLGFBQWEsS0FBSyxtQkFGcEIsRUFHRTtBQUNBLFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBTSxPQUFPLENBQUNMLEdBQUcsQ0FBQ1UsTUFBTCxFQUFhVCxNQUFiLEVBQXFCQyxXQUFyQixFQUFrQ0MsS0FBbEMsRUFBeUNDLElBQXpDLENBSFQ7QUFLRDs7QUFFRCxNQUNFRSxhQUFhLEtBQUssa0JBQWxCLElBQ0FBLGFBQWEsS0FBSyxxQkFGcEIsRUFHRTtBQUNBLFdBQ0VBLGFBQWEsR0FDYlAsS0FEQSxHQUVBTSxPQUFPLENBQUNMLEdBQUcsQ0FBQ1UsTUFBTCxFQUFhVCxNQUFiLEVBQXFCQyxXQUFyQixFQUFrQ0MsS0FBbEMsRUFBeUNDLElBQXpDLENBSFQ7QUFLRDs7QUFFRCxTQUFPSixHQUFHLENBQUNZLG1CQUFKLEVBQVA7QUFDRCxDQTFFRDs7QUE0RUF4QixPQUFPLENBQUNJLFNBQVIsR0FBb0JBLFNBQXBCOztBQUVBLElBQU1ELElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUFTLEdBQUc7QUFBQSxTQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ2EsUUFBSixLQUFpQmhCLGlCQUE1QjtBQUFBLENBQWhCOztBQUVBVCxPQUFPLENBQUNHLElBQVIsR0FBZUEsSUFBZjtBQUNBLElBQU11QixNQUFNLEdBQUc7QUFDYnRCLEVBQUFBLFNBQVMsRUFBVEEsU0FEYTtBQUViRCxFQUFBQSxJQUFJLEVBQUpBO0FBRmEsQ0FBZjtBQUlBLElBQUl3QixRQUFRLEdBQUdELE1BQWY7QUFDQTFCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQnlCLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gdm9pZCAwO1xuXG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbFsnamVzdC1zeW1ib2wtZG8tbm90LXRvdWNoJ10gfHwgZ2xvYmFsLlN5bWJvbDtcbmNvbnN0IGFzeW1tZXRyaWNNYXRjaGVyID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdqZXN0LmFzeW1tZXRyaWNNYXRjaGVyJylcbiAgICA6IDB4MTM1N2E1O1xuY29uc3QgU1BBQ0UgPSAnICc7XG5cbmNvbnN0IHNlcmlhbGl6ZSA9ICh2YWwsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PiB7XG4gIGNvbnN0IHN0cmluZ2VkVmFsdWUgPSB2YWwudG9TdHJpbmcoKTtcblxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ0FycmF5Q29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnQXJyYXlOb3RDb250YWluaW5nJ1xuICApIHtcbiAgICBpZiAoKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aCkge1xuICAgICAgcmV0dXJuICdbJyArIHN0cmluZ2VkVmFsdWUgKyAnXSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgJ1snICtcbiAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRMaXN0SXRlbXMpKFxuICAgICAgICB2YWwuc2FtcGxlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgcmVmcyxcbiAgICAgICAgcHJpbnRlclxuICAgICAgKSArXG4gICAgICAnXSdcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdPYmplY3RDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdPYmplY3ROb3RDb250YWluaW5nJ1xuICApIHtcbiAgICBpZiAoKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aCkge1xuICAgICAgcmV0dXJuICdbJyArIHN0cmluZ2VkVmFsdWUgKyAnXSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgJ3snICtcbiAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRPYmplY3RQcm9wZXJ0aWVzKShcbiAgICAgICAgdmFsLnNhbXBsZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgZGVwdGgsXG4gICAgICAgIHJlZnMsXG4gICAgICAgIHByaW50ZXJcbiAgICAgICkgK1xuICAgICAgJ30nXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTWF0Y2hpbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ05vdE1hdGNoaW5nJ1xuICApIHtcbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICBwcmludGVyKHZhbC5zYW1wbGUsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzKVxuICAgICk7XG4gIH1cblxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ0NvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ05vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB2YWwudG9Bc3ltbWV0cmljTWF0Y2hlcigpO1xufTtcblxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5cbmNvbnN0IHRlc3QgPSB2YWwgPT4gdmFsICYmIHZhbC4kJHR5cGVvZiA9PT0gYXN5bW1ldHJpY01hdGNoZXI7XG5cbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl19