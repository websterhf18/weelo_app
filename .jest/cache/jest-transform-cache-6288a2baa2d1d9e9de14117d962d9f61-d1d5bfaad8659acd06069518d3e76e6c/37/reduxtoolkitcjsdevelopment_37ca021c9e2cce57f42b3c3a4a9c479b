9edde184350d309e2ddae6a1f427bc34
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArray = this && this.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }

  return to;
};

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) for (var _i = 0, _b = __getOwnPropSymbols(b); _i < _b.length; _i++) {
    var prop = _b[_i];
    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }
  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

var __reExport = function __reExport(target, module2, desc) {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    var _loop_1 = function _loop_1(key) {
      if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
        get: function get() {
          return module2[key];
        },
        enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable
      });
    };

    for (var _i = 0, _b = __getOwnPropNames(module2); _i < _b.length; _i++) {
      var key = _b[_i];

      _loop_1(key);
    }
  }

  return target;
};

var __toModule = function __toModule(module2) {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {
    get: function get() {
      return module2.default;
    },
    enumerable: true
  } : {
    value: module2,
    enumerable: true
  })), module2);
};

var __async = function __async(__this, __arguments, generator) {
  return new Promise(function (resolve, reject) {
    var fulfilled = function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };

    var rejected = function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };

    var step = function step(x) {
      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    };

    step((generator = generator.apply(__this, __arguments)).next());
  });
};

__markAsModule(exports);

__export(exports, {
  MiddlewareArray: function MiddlewareArray() {
    return _MiddlewareArray;
  },
  configureStore: function configureStore() {
    return _configureStore;
  },
  createAction: function createAction() {
    return _createAction;
  },
  createAsyncThunk: function createAsyncThunk() {
    return _createAsyncThunk;
  },
  createDraftSafeSelector: function createDraftSafeSelector() {
    return _createDraftSafeSelector;
  },
  createEntityAdapter: function createEntityAdapter() {
    return _createEntityAdapter;
  },
  createImmutableStateInvariantMiddleware: function createImmutableStateInvariantMiddleware() {
    return _createImmutableStateInvariantMiddleware;
  },
  createNextState: function createNextState() {
    return import_immer5.default;
  },
  createReducer: function createReducer() {
    return _createReducer;
  },
  createSelector: function createSelector() {
    return import_reselect2.createSelector;
  },
  createSerializableStateInvariantMiddleware: function createSerializableStateInvariantMiddleware() {
    return _createSerializableStateInvariantMiddleware;
  },
  createSlice: function createSlice() {
    return _createSlice;
  },
  current: function current() {
    return import_immer5.current;
  },
  findNonSerializableValue: function findNonSerializableValue() {
    return _findNonSerializableValue;
  },
  freeze: function freeze() {
    return import_immer5.freeze;
  },
  getDefaultMiddleware: function getDefaultMiddleware() {
    return _getDefaultMiddleware;
  },
  getType: function getType() {
    return _getType;
  },
  isAllOf: function isAllOf() {
    return _isAllOf;
  },
  isAnyOf: function isAnyOf() {
    return _isAnyOf;
  },
  isAsyncThunkAction: function isAsyncThunkAction() {
    return _isAsyncThunkAction;
  },
  isDraft: function isDraft() {
    return import_immer5.isDraft;
  },
  isFulfilled: function isFulfilled() {
    return _isFulfilled;
  },
  isImmutableDefault: function isImmutableDefault() {
    return _isImmutableDefault;
  },
  isPending: function isPending() {
    return _isPending;
  },
  isPlain: function isPlain() {
    return _isPlain;
  },
  isPlainObject: function isPlainObject() {
    return _isPlainObject;
  },
  isRejected: function isRejected() {
    return _isRejected;
  },
  isRejectedWithValue: function isRejectedWithValue() {
    return _isRejectedWithValue;
  },
  miniSerializeError: function miniSerializeError() {
    return _miniSerializeError;
  },
  nanoid: function nanoid() {
    return _nanoid;
  },
  original: function original() {
    return import_immer5.original;
  },
  unwrapResult: function unwrapResult() {
    return _unwrapResult;
  }
});

var import_immer4 = __toModule(require("immer"));

__reExport(exports, __toModule(require("redux")));

var import_immer5 = __toModule(require("immer"));

var import_reselect2 = __toModule(require("reselect"));

var import_immer = __toModule(require("immer"));

var import_reselect = __toModule(require("reselect"));

var _createDraftSafeSelector = function _createDraftSafeSelector() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var selector = (0, import_reselect.createSelector).apply(void 0, args);

  var wrappedSelector = function wrappedSelector(value) {
    var rest = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }

    return selector.apply(void 0, __spreadArray([(0, import_immer.isDraft)(value) ? (0, import_immer.current)(value) : value], rest));
  };

  return wrappedSelector;
};

var import_redux2 = __toModule(require("redux"));

var import_redux = __toModule(require("redux"));

var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {
  if (arguments.length === 0) return void 0;
  if (typeof arguments[0] === "object") return import_redux.compose;
  return import_redux.compose.apply(null, arguments);
};
var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {
  return function (noop) {
    return noop;
  };
};

function _isPlainObject(value) {
  if (typeof value !== "object" || value === null) return false;
  var proto = value;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(value) === proto;
}

var import_redux_thunk = __toModule(require("redux-thunk"));

function getTimeMeasureUtils(maxDelay, fnName) {
  var elapsed = 0;
  return {
    measureTime: function measureTime(fn) {
      var started = Date.now();

      try {
        return fn();
      } finally {
        var finished = Date.now();
        elapsed += finished - started;
      }
    },
    warnIfExceeded: function warnIfExceeded() {
      if (elapsed > maxDelay) {
        console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
      }
    }
  };
}

var _MiddlewareArray = function (_super) {
  __extends(MiddlewareArray, _super);

  function MiddlewareArray() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var _this = _super.apply(this, args) || this;

    Object.setPrototypeOf(_this, MiddlewareArray.prototype);
    return _this;
  }

  Object.defineProperty(MiddlewareArray, Symbol.species, {
    get: function get() {
      return MiddlewareArray;
    },
    enumerable: false,
    configurable: true
  });

  MiddlewareArray.prototype.concat = function () {
    var arr = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }

    return _super.prototype.concat.apply(this, arr);
  };

  MiddlewareArray.prototype.prepend = function () {
    var arr = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }

    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();
    }

    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();
  };

  return MiddlewareArray;
}(Array);

var isProduction = false;
var prefix = "Invariant failed";

function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  }

  throw new Error(prefix + ": " + (message || ""));
}

function stringify(obj, serializer, indent, decycler) {
  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
}

function getSerialize(serializer, decycler) {
  var stack = [],
      keys = [];
  if (!decycler) decycler = function decycler(_, value) {
    if (stack[0] === value) return "[Circular ~]";
    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
  };
  return function (key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value)) value = decycler.call(this, key, value);
    } else stack.push(value);

    return serializer == null ? value : serializer.call(this, key, value);
  };
}

function _isImmutableDefault(value) {
  return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
}

function trackForMutations(isImmutable, ignorePaths, obj) {
  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations: function detectMutations() {
      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    }
  };
}

function trackProperties(isImmutable, ignorePaths, obj, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }

  if (path === void 0) {
    path = "";
  }

  var tracked = {
    value: obj
  };

  if (!isImmutable(obj)) {
    tracked.children = {};

    for (var key in obj) {
      var childPath = path ? path + "." + key : key;

      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }

      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
    }
  }

  return tracked;
}

function _detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }

  if (sameParentRef === void 0) {
    sameParentRef = false;
  }

  if (path === void 0) {
    path = "";
  }

  var prevObj = trackedProperty ? trackedProperty.value : void 0;
  var sameRef = prevObj === obj;

  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return {
      wasMutated: true,
      path: path
    };
  }

  if (isImmutable(prevObj) || isImmutable(obj)) {
    return {
      wasMutated: false
    };
  }

  var keysToDetect = {};

  for (var key in trackedProperty.children) {
    keysToDetect[key] = true;
  }

  for (var key in obj) {
    keysToDetect[key] = true;
  }

  for (var key in keysToDetect) {
    var childPath = path ? path + "." + key : key;

    if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
      continue;
    }

    var result = _detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);

    if (result.wasMutated) {
      return result;
    }
  }

  return {
    wasMutated: false
  };
}

function _createImmutableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  if (false) {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  var _b = options.isImmutable,
      isImmutable = _b === void 0 ? _isImmutableDefault : _b,
      ignoredPaths = options.ignoredPaths,
      _c = options.warnAfter,
      warnAfter = _c === void 0 ? 32 : _c,
      ignore = options.ignore;
  ignoredPaths = ignoredPaths || ignore;
  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
  return function (_b) {
    var getState = _b.getState;
    var state = getState();
    var tracker = track(state);
    var result;
    return function (next) {
      return function (action) {
        var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
        measureUtils.measureTime(function () {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        var dispatchedAction = next(action);
        measureUtils.measureTime(function () {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  };
}

function _isPlain(val) {
  var type = typeof val;
  return type === "undefined" || val === null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || _isPlainObject(val);
}

function _findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
  if (path === void 0) {
    path = "";
  }

  if (isSerializable === void 0) {
    isSerializable = _isPlain;
  }

  if (ignoredPaths === void 0) {
    ignoredPaths = [];
  }

  var foundNestedSerializable;

  if (!isSerializable(value)) {
    return {
      keyPath: path || "<root>",
      value: value
    };
  }

  if (typeof value !== "object" || value === null) {
    return false;
  }

  var entries = getEntries != null ? getEntries(value) : Object.entries(value);
  var hasIgnoredPaths = ignoredPaths.length > 0;

  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _b = entries_1[_i],
        key = _b[0],
        nestedValue = _b[1];
    var nestedPath = path ? path + "." + key : key;

    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
      continue;
    }

    if (!isSerializable(nestedValue)) {
      return {
        keyPath: nestedPath,
        value: nestedValue
      };
    }

    if (typeof nestedValue === "object") {
      foundNestedSerializable = _findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);

      if (foundNestedSerializable) {
        return foundNestedSerializable;
      }
    }
  }

  return false;
}

function _createSerializableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  if (false) {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  var _b = options.isSerializable,
      isSerializable = _b === void 0 ? _isPlain : _b,
      getEntries = options.getEntries,
      _c = options.ignoredActions,
      ignoredActions = _c === void 0 ? [] : _c,
      _d = options.ignoredActionPaths,
      ignoredActionPaths = _d === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _d,
      _e = options.ignoredPaths,
      ignoredPaths = _e === void 0 ? [] : _e,
      _f = options.warnAfter,
      warnAfter = _f === void 0 ? 32 : _f,
      _g = options.ignoreState,
      ignoreState = _g === void 0 ? false : _g;
  return function (storeAPI) {
    return function (next) {
      return function (action) {
        if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {
          return next(action);
        }

        var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
        measureUtils.measureTime(function () {
          var foundActionNonSerializableValue = _findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);

          if (foundActionNonSerializableValue) {
            var keyPath = foundActionNonSerializableValue.keyPath,
                value = foundActionNonSerializableValue.value;
            console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
          }
        });
        var result = next(action);

        if (!ignoreState) {
          measureUtils.measureTime(function () {
            var state = storeAPI.getState();

            var foundStateNonSerializableValue = _findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);

            if (foundStateNonSerializableValue) {
              var keyPath = foundStateNonSerializableValue.keyPath,
                  value = foundStateNonSerializableValue.value;
              console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
            }
          });
          measureUtils.warnIfExceeded();
        }

        return result;
      };
    };
  };
}

function isBoolean(x) {
  return typeof x === "boolean";
}

function curryGetDefaultMiddleware() {
  return function curriedGetDefaultMiddleware(options) {
    return _getDefaultMiddleware(options);
  };
}

function _getDefaultMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  var _b = options.thunk,
      thunk = _b === void 0 ? true : _b,
      _c = options.immutableCheck,
      immutableCheck = _c === void 0 ? true : _c,
      _d = options.serializableCheck,
      serializableCheck = _d === void 0 ? true : _d;
  var middlewareArray = new _MiddlewareArray();

  if (thunk) {
    if (isBoolean(thunk)) {
      middlewareArray.push(import_redux_thunk.default);
    } else {
      middlewareArray.push(import_redux_thunk.default.withExtraArgument(thunk.extraArgument));
    }
  }

  if (true) {
    if (immutableCheck) {
      var immutableOptions = {};

      if (!isBoolean(immutableCheck)) {
        immutableOptions = immutableCheck;
      }

      middlewareArray.unshift(_createImmutableStateInvariantMiddleware(immutableOptions));
    }

    if (serializableCheck) {
      var serializableOptions = {};

      if (!isBoolean(serializableCheck)) {
        serializableOptions = serializableCheck;
      }

      middlewareArray.push(_createSerializableStateInvariantMiddleware(serializableOptions));
    }
  }

  return middlewareArray;
}

var IS_PRODUCTION = false;

function _configureStore(options) {
  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();

  var _b = options || {},
      _c = _b.reducer,
      reducer = _c === void 0 ? void 0 : _c,
      _d = _b.middleware,
      middleware = _d === void 0 ? curriedGetDefaultMiddleware() : _d,
      _e = _b.devTools,
      devTools = _e === void 0 ? true : _e,
      _f = _b.preloadedState,
      preloadedState = _f === void 0 ? void 0 : _f,
      _g = _b.enhancers,
      enhancers = _g === void 0 ? void 0 : _g;

  var rootReducer;

  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (_isPlainObject(reducer)) {
    rootReducer = (0, import_redux2.combineReducers)(reducer);
  } else {
    throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
  }

  var finalMiddleware = middleware;

  if (typeof finalMiddleware === "function") {
    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);

    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
      throw new Error("when using a middleware builder function, an array of middleware must be returned");
    }
  }

  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {
    return typeof item !== "function";
  })) {
    throw new Error("each middleware provided to configureStore must be a function");
  }

  var middlewareEnhancer = (0, import_redux2.applyMiddleware).apply(void 0, finalMiddleware);
  var finalCompose = import_redux2.compose;

  if (devTools) {
    finalCompose = composeWithDevTools(__spreadValues({
      trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
  }

  var storeEnhancers = [middlewareEnhancer];

  if (Array.isArray(enhancers)) {
    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
  } else if (typeof enhancers === "function") {
    storeEnhancers = enhancers(storeEnhancers);
  }

  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
  return (0, import_redux2.createStore)(rootReducer, preloadedState, composedEnhancer);
}

function _createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);

      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }

      return __spreadValues(__spreadValues({
        type: type,
        payload: prepared.payload
      }, "meta" in prepared && {
        meta: prepared.meta
      }), "error" in prepared && {
        error: prepared.error
      });
    }

    return {
      type: type,
      payload: args[0]
    };
  }

  actionCreator.toString = function () {
    return "" + type;
  };

  actionCreator.type = type;

  actionCreator.match = function (action) {
    return action.type === type;
  };

  return actionCreator;
}

function isFSA(action) {
  return _isPlainObject(action) && typeof action.type === "string" && Object.keys(action).every(isValidKey);
}

function isValidKey(key) {
  return ["type", "payload", "error", "meta"].indexOf(key) > -1;
}

function _getType(actionCreator) {
  return "" + actionCreator;
}

var import_immer2 = __toModule(require("immer"));

function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder = {
    addCase: function addCase(typeOrActionCreator, reducer) {
      if (true) {
        if (actionMatchers.length > 0) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
        }

        if (defaultCaseReducer) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }

      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;

      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }

      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher: function addMatcher(matcher, reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }

      actionMatchers.push({
        matcher: matcher,
        reducer: reducer
      });
      return builder;
    },
    addDefaultCase: function addDefaultCase(reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addDefaultCase` can only be called once");
        }
      }

      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}

function _createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }

  var _b = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],
      actionsMap = _b[0],
      finalActionMatchers = _b[1],
      finalDefaultCaseReducer = _b[2];

  var frozenInitialState = (0, import_immer2.default)(initialState, function () {});
  return function (state, action) {
    if (state === void 0) {
      state = frozenInitialState;
    }

    var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_b) {
      var matcher = _b.matcher;
      return matcher(action);
    }).map(function (_b) {
      var reducer = _b.reducer;
      return reducer;
    }));

    if (caseReducers.filter(function (cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }

    return caseReducers.reduce(function (previousState, caseReducer) {
      if (caseReducer) {
        if ((0, import_immer2.isDraft)(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);

          if (typeof result === "undefined") {
            return previousState;
          }

          return result;
        } else if (!(0, import_immer2.isDraftable)(previousState)) {
          var result = caseReducer(previousState, action);

          if (typeof result === "undefined") {
            if (previousState === null) {
              return previousState;
            }

            throw Error("A case reducer on a non-draftable value must not return undefined");
          }

          return result;
        } else {
          return (0, import_immer2.default)(previousState, function (draft) {
            return caseReducer(draft, action);
          });
        }
      }

      return previousState;
    }, state);
  };
}

function getType2(slice, actionKey) {
  return slice + "/" + actionKey;
}

function _createSlice(options) {
  var name = options.name,
      initialState = options.initialState;

  if (!name) {
    throw new Error("`name` is a required option for createSlice");
  }

  var reducers = options.reducers || {};

  var _b = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],
      _c = _b[0],
      extraReducers = _c === void 0 ? {} : _c,
      _d = _b[1],
      actionMatchers = _d === void 0 ? [] : _d,
      _e = _b[2],
      defaultCaseReducer = _e === void 0 ? void 0 : _e;

  var reducerNames = Object.keys(reducers);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function (reducerName) {
    var maybeReducerWithPrepare = reducers[reducerName];
    var type = getType2(name, reducerName);
    var caseReducer;
    var prepareCallback;

    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }

    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? _createAction(type, prepareCallback) : _createAction(type);
  });

  var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);

  var reducer = _createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);

  return {
    name: name,
    reducer: reducer,
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName
  };
}

function getInitialEntityState() {
  return {
    ids: [],
    entities: {}
  };
}

function createInitialStateFactory() {
  function getInitialState(additionalState) {
    if (additionalState === void 0) {
      additionalState = {};
    }

    return (0, _extends2.default)(getInitialEntityState(), additionalState);
  }

  return {
    getInitialState: getInitialState
  };
}

function createSelectorsFactory() {
  function getSelectors(selectState) {
    var selectIds = function selectIds(state) {
      return state.ids;
    };

    var selectEntities = function selectEntities(state) {
      return state.entities;
    };

    var selectAll = _createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {
      return ids.map(function (id) {
        return entities[id];
      });
    });

    var selectId = function selectId(_, id) {
      return id;
    };

    var selectById = function selectById(entities, id) {
      return entities[id];
    };

    var selectTotal = _createDraftSafeSelector(selectIds, function (ids) {
      return ids.length;
    });

    if (!selectState) {
      return {
        selectIds: selectIds,
        selectEntities: selectEntities,
        selectAll: selectAll,
        selectTotal: selectTotal,
        selectById: _createDraftSafeSelector(selectEntities, selectId, selectById)
      };
    }

    var selectGlobalizedEntities = _createDraftSafeSelector(selectState, selectEntities);

    return {
      selectIds: _createDraftSafeSelector(selectState, selectIds),
      selectEntities: selectGlobalizedEntities,
      selectAll: _createDraftSafeSelector(selectState, selectAll),
      selectTotal: _createDraftSafeSelector(selectState, selectTotal),
      selectById: _createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)
    };
  }

  return {
    getSelectors: getSelectors
  };
}

var import_immer3 = __toModule(require("immer"));

function createSingleArgumentStateOperator(mutator) {
  var operator = createStateOperator(function (_, state) {
    return mutator(state);
  });
  return function operation(state) {
    return operator(state, void 0);
  };
}

function createStateOperator(mutator) {
  return function operation(state, arg) {
    function isPayloadActionArgument(arg2) {
      return isFSA(arg2);
    }

    var runMutator = function runMutator(draft) {
      if (isPayloadActionArgument(arg)) {
        mutator(arg.payload, draft);
      } else {
        mutator(arg, draft);
      }
    };

    if ((0, import_immer3.isDraft)(state)) {
      runMutator(state);
      return state;
    } else {
      return (0, import_immer3.default)(state, runMutator);
    }
  };
}

function selectIdValue(entity, selectId) {
  var key = selectId(entity);

  if (key === void 0) {
    console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", entity, "The `selectId` implementation:", selectId.toString());
  }

  return key;
}

function ensureEntitiesArray(entities) {
  if (!Array.isArray(entities)) {
    entities = Object.values(entities);
  }

  return entities;
}

function splitAddedUpdatedEntities(newEntities, selectId, state) {
  newEntities = ensureEntitiesArray(newEntities);
  var added = [];
  var updated = [];

  for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {
    var entity = newEntities_1[_i];
    var id = selectIdValue(entity, selectId);

    if (id in state.entities) {
      updated.push({
        id: id,
        changes: entity
      });
    } else {
      added.push(entity);
    }
  }

  return [added, updated];
}

function createUnsortedStateAdapter(selectId) {
  function addOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);

    if (key in state.entities) {
      return;
    }

    state.ids.push(key);
    state.entities[key] = entity;
  }

  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {
      var entity = newEntities_2[_i];
      addOneMutably(entity, state);
    }
  }

  function setOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);

    if (!(key in state.entities)) {
      state.ids.push(key);
    }

    state.entities[key] = entity;
  }

  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {
      var entity = newEntities_3[_i];
      setOneMutably(entity, state);
    }
  }

  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.ids = [];
    state.entities = {};
    addManyMutably(newEntities, state);
  }

  function removeOneMutably(key, state) {
    return removeManyMutably([key], state);
  }

  function removeManyMutably(keys, state) {
    var didMutate = false;
    keys.forEach(function (key) {
      if (key in state.entities) {
        delete state.entities[key];
        didMutate = true;
      }
    });

    if (didMutate) {
      state.ids = state.ids.filter(function (id) {
        return id in state.entities;
      });
    }
  }

  function removeAllMutably(state) {
    (0, _extends2.default)(state, {
      ids: [],
      entities: {}
    });
  }

  function takeNewKey(keys, update, state) {
    var original2 = state.entities[update.id];
    var updated = (0, _extends2.default)({}, original2, update.changes);
    var newKey = selectIdValue(updated, selectId);
    var hasNewKey = newKey !== update.id;

    if (hasNewKey) {
      keys[update.id] = newKey;
      delete state.entities[update.id];
    }

    state.entities[newKey] = updated;
    return hasNewKey;
  }

  function updateOneMutably(update, state) {
    return updateManyMutably([update], state);
  }

  function updateManyMutably(updates, state) {
    var newKeys = {};
    var updatesPerEntity = {};
    updates.forEach(function (update) {
      if (update.id in state.entities) {
        updatesPerEntity[update.id] = {
          id: update.id,
          changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)
        };
      }
    });
    updates = Object.values(updatesPerEntity);
    var didMutateEntities = updates.length > 0;

    if (didMutateEntities) {
      var didMutateIds = updates.filter(function (update) {
        return takeNewKey(newKeys, update, state);
      }).length > 0;

      if (didMutateIds) {
        state.ids = state.ids.map(function (id) {
          return newKeys[id] || id;
        });
      }
    }
  }

  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }

  function upsertManyMutably(newEntities, state) {
    var _b = splitAddedUpdatedEntities(newEntities, selectId, state),
        added = _b[0],
        updated = _b[1];

    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }

  return {
    removeAll: createSingleArgumentStateOperator(removeAllMutably),
    addOne: createStateOperator(addOneMutably),
    addMany: createStateOperator(addManyMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    updateOne: createStateOperator(updateOneMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    upsertMany: createStateOperator(upsertManyMutably),
    removeOne: createStateOperator(removeOneMutably),
    removeMany: createStateOperator(removeManyMutably)
  };
}

function createSortedStateAdapter(selectId, sort) {
  var _b = createUnsortedStateAdapter(selectId),
      removeOne = _b.removeOne,
      removeMany = _b.removeMany,
      removeAll = _b.removeAll;

  function addOneMutably(entity, state) {
    return addManyMutably([entity], state);
  }

  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    var models = newEntities.filter(function (model) {
      return !(selectIdValue(model, selectId) in state.entities);
    });

    if (models.length !== 0) {
      merge(models, state);
    }
  }

  function setOneMutably(entity, state) {
    return setManyMutably([entity], state);
  }

  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    if (newEntities.length !== 0) {
      merge(newEntities, state);
    }
  }

  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.entities = {};
    state.ids = [];
    addManyMutably(newEntities, state);
  }

  function updateOneMutably(update, state) {
    return updateManyMutably([update], state);
  }

  function takeUpdatedModel(models, update, state) {
    if (!(update.id in state.entities)) {
      return false;
    }

    var original2 = state.entities[update.id];
    var updated = (0, _extends2.default)({}, original2, update.changes);
    var newKey = selectIdValue(updated, selectId);
    delete state.entities[update.id];
    models.push(updated);
    return newKey !== update.id;
  }

  function updateManyMutably(updates, state) {
    var models = [];
    updates.forEach(function (update) {
      return takeUpdatedModel(models, update, state);
    });

    if (models.length !== 0) {
      merge(models, state);
    }
  }

  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }

  function upsertManyMutably(newEntities, state) {
    var _b = splitAddedUpdatedEntities(newEntities, selectId, state),
        added = _b[0],
        updated = _b[1];

    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }

  function areArraysEqual(a, b) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0; i < a.length && i < b.length; i++) {
      if (a[i] === b[i]) {
        continue;
      }

      return false;
    }

    return true;
  }

  function merge(models, state) {
    models.forEach(function (model) {
      state.entities[selectId(model)] = model;
    });
    var allEntities = Object.values(state.entities);
    allEntities.sort(sort);
    var newSortedIds = allEntities.map(selectId);
    var ids = state.ids;

    if (!areArraysEqual(ids, newSortedIds)) {
      state.ids = newSortedIds;
    }
  }

  return {
    removeOne: removeOne,
    removeMany: removeMany,
    removeAll: removeAll,
    addOne: createStateOperator(addOneMutably),
    updateOne: createStateOperator(updateOneMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    addMany: createStateOperator(addManyMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertMany: createStateOperator(upsertManyMutably)
  };
}

function _createEntityAdapter(options) {
  if (options === void 0) {
    options = {};
  }

  var _b = __spreadValues({
    sortComparer: false,
    selectId: function selectId(instance) {
      return instance.id;
    }
  }, options),
      selectId = _b.selectId,
      sortComparer = _b.sortComparer;

  var stateFactory = createInitialStateFactory();
  var selectorsFactory = createSelectorsFactory();
  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);
  return __spreadValues(__spreadValues(__spreadValues({
    selectId: selectId,
    sortComparer: sortComparer
  }, stateFactory), selectorsFactory), stateAdapter);
}

var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";

var _nanoid = function _nanoid(size) {
  if (size === void 0) {
    size = 21;
  }

  var id = "";
  var i = size;

  while (i--) {
    id += urlAlphabet[Math.random() * 64 | 0];
  }

  return id;
};

var commonProperties = ["name", "message", "stack", "code"];

var RejectWithValue = function () {
  function RejectWithValue(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }

  return RejectWithValue;
}();

var FulfillWithMeta = function () {
  function FulfillWithMeta(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }

  return FulfillWithMeta;
}();

var _miniSerializeError = function _miniSerializeError(value) {
  if (typeof value === "object" && value !== null) {
    var simpleError = {};

    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
      var property = commonProperties_1[_i];

      if (typeof value[property] === "string") {
        simpleError[property] = value[property];
      }
    }

    return simpleError;
  }

  return {
    message: String(value)
  };
};

function _createAsyncThunk(typePrefix, payloadCreator, options) {
  var fulfilled = _createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) {
    return {
      payload: payload,
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        requestStatus: "fulfilled"
      })
    };
  });

  var pending = _createAction(typePrefix + "/pending", function (requestId, arg, meta) {
    return {
      payload: void 0,
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        requestStatus: "pending"
      })
    };
  });

  var rejected = _createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) {
    return {
      payload: payload,
      error: (options && options.serializeError || _miniSerializeError)(error || "Rejected"),
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        rejectedWithValue: !!payload,
        requestStatus: "rejected",
        aborted: (error == null ? void 0 : error.name) === "AbortError",
        condition: (error == null ? void 0 : error.name) === "ConditionError"
      })
    };
  });

  var displayedWarning = false;
  var AC = typeof AbortController !== "undefined" ? AbortController : function () {
    function class_1() {
      this.signal = {
        aborted: false,
        addEventListener: function addEventListener() {},
        dispatchEvent: function dispatchEvent() {
          return false;
        },
        onabort: function onabort() {},
        removeEventListener: function removeEventListener() {}
      };
    }

    class_1.prototype.abort = function () {
      if (true) {
        if (!displayedWarning) {
          displayedWarning = true;
          console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
        }
      }
    };

    return class_1;
  }();

  function actionCreator(arg) {
    return function (dispatch, getState, extra) {
      var _a;

      var requestId = ((_a = options == null ? void 0 : options.idGenerator) != null ? _a : _nanoid)();
      var abortController = new AC();
      var abortReason;
      var abortedPromise = new Promise(function (_, reject) {
        return abortController.signal.addEventListener("abort", function () {
          return reject({
            name: "AbortError",
            message: abortReason || "Aborted"
          });
        });
      });
      var started = false;

      function abort(reason) {
        if (started) {
          abortReason = reason;
          abortController.abort();
        }
      }

      var promise = function () {
        return __async(this, null, function () {
          var _a2, finalAction, err_1, skipDispatch;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _b.trys.push([0, 2,, 3]);

                if (options && options.condition && options.condition(arg, {
                  getState: getState,
                  extra: extra
                }) === false) {
                  throw {
                    name: "ConditionError",
                    message: "Aborted due to condition callback returning false."
                  };
                }

                started = true;
                dispatch(pending(requestId, arg, (_a2 = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _a2.call(options, {
                  requestId: requestId,
                  arg: arg
                }, {
                  getState: getState,
                  extra: extra
                })));
                return [4, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                  dispatch: dispatch,
                  getState: getState,
                  extra: extra,
                  requestId: requestId,
                  signal: abortController.signal,
                  rejectWithValue: function rejectWithValue(value, meta) {
                    return new RejectWithValue(value, meta);
                  },
                  fulfillWithValue: function fulfillWithValue(value, meta) {
                    return new FulfillWithMeta(value, meta);
                  }
                })).then(function (result) {
                  if (result instanceof RejectWithValue) {
                    throw result;
                  }

                  if (result instanceof FulfillWithMeta) {
                    return fulfilled(result.payload, requestId, arg, result.meta);
                  }

                  return fulfilled(result, requestId, arg);
                })])];

              case 1:
                finalAction = _b.sent();
                return [3, 3];

              case 2:
                err_1 = _b.sent();
                finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                return [3, 3];

              case 3:
                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;

                if (!skipDispatch) {
                  dispatch(finalAction);
                }

                return [2, finalAction];
            }
          });
        });
      }();

      return (0, _extends2.default)(promise, {
        abort: abort,
        requestId: requestId,
        arg: arg,
        unwrap: function unwrap() {
          return promise.then(_unwrapResult);
        }
      });
    };
  }

  return (0, _extends2.default)(actionCreator, {
    pending: pending,
    rejected: rejected,
    fulfilled: fulfilled,
    typePrefix: typePrefix
  });
}

function _unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }

  if (action.error) {
    throw action.error;
  }

  return action.payload;
}

var hasMatchFunction = function hasMatchFunction(v) {
  return v && typeof v.match === "function";
};

var matches = function matches(matcher, action) {
  if (hasMatchFunction(matcher)) {
    return matcher.match(action);
  } else {
    return matcher(action);
  }
};

function _isAnyOf() {
  var matchers = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    matchers[_i] = arguments[_i];
  }

  return function (action) {
    return matchers.some(function (matcher) {
      return matches(matcher, action);
    });
  };
}

function _isAllOf() {
  var matchers = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    matchers[_i] = arguments[_i];
  }

  return function (action) {
    return matchers.every(function (matcher) {
      return matches(matcher, action);
    });
  };
}

function hasExpectedRequestMetadata(action, validStatus) {
  if (!action || !action.meta) return false;
  var hasValidRequestId = typeof action.meta.requestId === "string";
  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;
  return hasValidRequestId && hasValidRequestStatus;
}

function isAsyncThunkArray(a) {
  return typeof a[0] === "function" && "pending" in a[0] && "fulfilled" in a[0] && "rejected" in a[0];
}

function _isPending() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["pending"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isPending()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.pending;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isRejected() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["rejected"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isRejected()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.rejected;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isRejectedWithValue() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  var hasFlag = function hasFlag(action) {
    return action && action.meta && action.meta.rejectedWithValue;
  };

  if (asyncThunks.length === 0) {
    return function (action) {
      var combinedMatcher = _isAllOf(_isRejected.apply(void 0, asyncThunks), hasFlag);

      return combinedMatcher(action);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isRejectedWithValue()(asyncThunks[0]);
  }

  return function (action) {
    var combinedMatcher = _isAllOf(_isRejected.apply(void 0, asyncThunks), hasFlag);

    return combinedMatcher(action);
  };
}

function _isFulfilled() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["fulfilled"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isFulfilled()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.fulfilled;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isAsyncThunkAction() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["pending", "fulfilled", "rejected"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isAsyncThunkAction()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = [];

    for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {
      var asyncThunk = asyncThunks_1[_i];
      matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);
    }

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

(0, import_immer4.enableES5)();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LXRvb2xraXQuY2pzLmRldmVsb3BtZW50LmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJfIiwibGFiZWwiLCJzZW50IiwidCIsInRyeXMiLCJvcHMiLCJmIiwieSIsImciLCJuZXh0IiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJzdGVwIiwib3AiLCJkb25lIiwidmFsdWUiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZSIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJpIiwiaWwiLCJqIiwiX19jcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmUHJvcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcERlc2NzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0T3duUHJvcFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsIl9fcHJvcElzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19zcHJlYWRWYWx1ZXMiLCJhIiwicHJvcCIsIl9pIiwiX2IiLCJfX3NwcmVhZFByb3BzIiwiX19tYXJrQXNNb2R1bGUiLCJ0YXJnZXQiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJfX3JlRXhwb3J0IiwibW9kdWxlMiIsImRlc2MiLCJfbG9vcF8xIiwiX190b01vZHVsZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX19hc3luYyIsIl9fdGhpcyIsIl9fYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInRocm93IiwieCIsInRoZW4iLCJhcHBseSIsImV4cG9ydHMiLCJNaWRkbGV3YXJlQXJyYXkiLCJjb25maWd1cmVTdG9yZSIsImNyZWF0ZUFjdGlvbiIsImNyZWF0ZUFzeW5jVGh1bmsiLCJjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciIsImNyZWF0ZUVudGl0eUFkYXB0ZXIiLCJjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJjcmVhdGVOZXh0U3RhdGUiLCJpbXBvcnRfaW1tZXI1IiwiY3JlYXRlUmVkdWNlciIsImNyZWF0ZVNlbGVjdG9yIiwiaW1wb3J0X3Jlc2VsZWN0MiIsImNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSIsImNyZWF0ZVNsaWNlIiwiY3VycmVudCIsImZpbmROb25TZXJpYWxpemFibGVWYWx1ZSIsImZyZWV6ZSIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiZ2V0VHlwZSIsImlzQWxsT2YiLCJpc0FueU9mIiwiaXNBc3luY1RodW5rQWN0aW9uIiwiaXNEcmFmdCIsImlzRnVsZmlsbGVkIiwiaXNJbW11dGFibGVEZWZhdWx0IiwiaXNQZW5kaW5nIiwiaXNQbGFpbiIsImlzUGxhaW5PYmplY3QiLCJpc1JlamVjdGVkIiwiaXNSZWplY3RlZFdpdGhWYWx1ZSIsIm1pbmlTZXJpYWxpemVFcnJvciIsIm5hbm9pZCIsIm9yaWdpbmFsIiwidW53cmFwUmVzdWx0IiwiaW1wb3J0X2ltbWVyNCIsInJlcXVpcmUiLCJpbXBvcnRfaW1tZXIiLCJpbXBvcnRfcmVzZWxlY3QiLCJhcmdzIiwiYXJndW1lbnRzIiwic2VsZWN0b3IiLCJ3cmFwcGVkU2VsZWN0b3IiLCJyZXN0IiwiaW1wb3J0X3JlZHV4MiIsImltcG9ydF9yZWR1eCIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJ3aW5kb3ciLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJjb21wb3NlIiwiZGV2VG9vbHNFbmhhbmNlciIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJub29wIiwicHJvdG8iLCJpbXBvcnRfcmVkdXhfdGh1bmsiLCJnZXRUaW1lTWVhc3VyZVV0aWxzIiwibWF4RGVsYXkiLCJmbk5hbWUiLCJlbGFwc2VkIiwibWVhc3VyZVRpbWUiLCJmbiIsInN0YXJ0ZWQiLCJEYXRlIiwibm93IiwiZmluaXNoZWQiLCJ3YXJuSWZFeGNlZWRlZCIsImNvbnNvbGUiLCJ3YXJuIiwiX3N1cGVyIiwiX3RoaXMiLCJzcGVjaWVzIiwiY29uY2F0IiwiYXJyIiwicHJlcGVuZCIsImlzQXJyYXkiLCJiaW5kIiwiaXNQcm9kdWN0aW9uIiwicHJlZml4IiwiaW52YXJpYW50IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwic3RyaW5naWZ5Iiwic2VyaWFsaXplciIsImluZGVudCIsImRlY3ljbGVyIiwiSlNPTiIsImdldFNlcmlhbGl6ZSIsInN0YWNrIiwia2V5cyIsInNsaWNlIiwiaW5kZXhPZiIsImpvaW4iLCJ0aGlzUG9zIiwic3BsaWNlIiwiSW5maW5pdHkiLCJpc0Zyb3plbiIsInRyYWNrRm9yTXV0YXRpb25zIiwiaXNJbW11dGFibGUiLCJpZ25vcmVQYXRocyIsInRyYWNrZWRQcm9wZXJ0aWVzIiwidHJhY2tQcm9wZXJ0aWVzIiwiZGV0ZWN0TXV0YXRpb25zIiwicGF0aCIsInRyYWNrZWQiLCJjaGlsZHJlbiIsImNoaWxkUGF0aCIsInRyYWNrZWRQcm9wZXJ0eSIsInNhbWVQYXJlbnRSZWYiLCJwcmV2T2JqIiwic2FtZVJlZiIsIk51bWJlciIsImlzTmFOIiwid2FzTXV0YXRlZCIsImtleXNUb0RldGVjdCIsInJlc3VsdCIsIm9wdGlvbnMiLCJhY3Rpb24iLCJpZ25vcmVkUGF0aHMiLCJfYyIsIndhcm5BZnRlciIsImlnbm9yZSIsInRyYWNrIiwiZ2V0U3RhdGUiLCJzdGF0ZSIsInRyYWNrZXIiLCJtZWFzdXJlVXRpbHMiLCJkaXNwYXRjaGVkQWN0aW9uIiwidmFsIiwidHlwZSIsImlzU2VyaWFsaXphYmxlIiwiZ2V0RW50cmllcyIsImZvdW5kTmVzdGVkU2VyaWFsaXphYmxlIiwia2V5UGF0aCIsImVudHJpZXMiLCJoYXNJZ25vcmVkUGF0aHMiLCJlbnRyaWVzXzEiLCJuZXN0ZWRWYWx1ZSIsIm5lc3RlZFBhdGgiLCJpZ25vcmVkQWN0aW9ucyIsIl9kIiwiaWdub3JlZEFjdGlvblBhdGhzIiwiX2UiLCJfZiIsIl9nIiwiaWdub3JlU3RhdGUiLCJzdG9yZUFQSSIsImZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUiLCJlcnJvciIsImZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSIsImlzQm9vbGVhbiIsImN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJ0aHVuayIsImltbXV0YWJsZUNoZWNrIiwic2VyaWFsaXphYmxlQ2hlY2siLCJtaWRkbGV3YXJlQXJyYXkiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImV4dHJhQXJndW1lbnQiLCJpbW11dGFibGVPcHRpb25zIiwidW5zaGlmdCIsInNlcmlhbGl6YWJsZU9wdGlvbnMiLCJJU19QUk9EVUNUSU9OIiwicmVkdWNlciIsIm1pZGRsZXdhcmUiLCJkZXZUb29scyIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXJzIiwicm9vdFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJmaW5hbE1pZGRsZXdhcmUiLCJzb21lIiwiaXRlbSIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImFwcGx5TWlkZGxld2FyZSIsImZpbmFsQ29tcG9zZSIsInRyYWNlIiwic3RvcmVFbmhhbmNlcnMiLCJjb21wb3NlZEVuaGFuY2VyIiwiY3JlYXRlU3RvcmUiLCJwcmVwYXJlQWN0aW9uIiwiYWN0aW9uQ3JlYXRvciIsInByZXBhcmVkIiwicGF5bG9hZCIsIm1ldGEiLCJ0b1N0cmluZyIsIm1hdGNoIiwiaXNGU0EiLCJldmVyeSIsImlzVmFsaWRLZXkiLCJpbXBvcnRfaW1tZXIyIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiaW5pdGlhbFN0YXRlIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJmcm96ZW5Jbml0aWFsU3RhdGUiLCJjYXNlUmVkdWNlcnMiLCJmaWx0ZXIiLCJtYXAiLCJjciIsInJlZHVjZSIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImRyYWZ0IiwiaXNEcmFmdGFibGUiLCJnZXRUeXBlMiIsImFjdGlvbktleSIsInJlZHVjZXJzIiwiZXh0cmFSZWR1Y2VycyIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJhY3Rpb25DcmVhdG9ycyIsImZvckVhY2giLCJyZWR1Y2VyTmFtZSIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwicHJlcGFyZUNhbGxiYWNrIiwicHJlcGFyZSIsImZpbmFsQ2FzZVJlZHVjZXJzIiwiYWN0aW9ucyIsImdldEluaXRpYWxFbnRpdHlTdGF0ZSIsImlkcyIsImVudGl0aWVzIiwiY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSIsImdldEluaXRpYWxTdGF0ZSIsImFkZGl0aW9uYWxTdGF0ZSIsImNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkiLCJnZXRTZWxlY3RvcnMiLCJzZWxlY3RTdGF0ZSIsInNlbGVjdElkcyIsInNlbGVjdEVudGl0aWVzIiwic2VsZWN0QWxsIiwiaWQiLCJzZWxlY3RJZCIsInNlbGVjdEJ5SWQiLCJzZWxlY3RUb3RhbCIsInNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyIsImltcG9ydF9pbW1lcjMiLCJjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IiLCJtdXRhdG9yIiwib3BlcmF0b3IiLCJjcmVhdGVTdGF0ZU9wZXJhdG9yIiwib3BlcmF0aW9uIiwiYXJnIiwiaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQiLCJhcmcyIiwicnVuTXV0YXRvciIsInNlbGVjdElkVmFsdWUiLCJlbnRpdHkiLCJlbnN1cmVFbnRpdGllc0FycmF5IiwidmFsdWVzIiwic3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyIsIm5ld0VudGl0aWVzIiwiYWRkZWQiLCJ1cGRhdGVkIiwibmV3RW50aXRpZXNfMSIsImNoYW5nZXMiLCJjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlciIsImFkZE9uZU11dGFibHkiLCJhZGRNYW55TXV0YWJseSIsIm5ld0VudGl0aWVzXzIiLCJzZXRPbmVNdXRhYmx5Iiwic2V0TWFueU11dGFibHkiLCJuZXdFbnRpdGllc18zIiwic2V0QWxsTXV0YWJseSIsInJlbW92ZU9uZU11dGFibHkiLCJyZW1vdmVNYW55TXV0YWJseSIsImRpZE11dGF0ZSIsInJlbW92ZUFsbE11dGFibHkiLCJ0YWtlTmV3S2V5IiwidXBkYXRlIiwib3JpZ2luYWwyIiwibmV3S2V5IiwiaGFzTmV3S2V5IiwidXBkYXRlT25lTXV0YWJseSIsInVwZGF0ZU1hbnlNdXRhYmx5IiwidXBkYXRlcyIsIm5ld0tleXMiLCJ1cGRhdGVzUGVyRW50aXR5IiwiZGlkTXV0YXRlRW50aXRpZXMiLCJkaWRNdXRhdGVJZHMiLCJ1cHNlcnRPbmVNdXRhYmx5IiwidXBzZXJ0TWFueU11dGFibHkiLCJyZW1vdmVBbGwiLCJhZGRPbmUiLCJhZGRNYW55Iiwic2V0T25lIiwic2V0TWFueSIsInNldEFsbCIsInVwZGF0ZU9uZSIsInVwZGF0ZU1hbnkiLCJ1cHNlcnRPbmUiLCJ1cHNlcnRNYW55IiwicmVtb3ZlT25lIiwicmVtb3ZlTWFueSIsImNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlciIsInNvcnQiLCJtb2RlbHMiLCJtb2RlbCIsIm1lcmdlIiwidGFrZVVwZGF0ZWRNb2RlbCIsImFyZUFycmF5c0VxdWFsIiwiYWxsRW50aXRpZXMiLCJuZXdTb3J0ZWRJZHMiLCJzb3J0Q29tcGFyZXIiLCJpbnN0YW5jZSIsInN0YXRlRmFjdG9yeSIsInNlbGVjdG9yc0ZhY3RvcnkiLCJzdGF0ZUFkYXB0ZXIiLCJ1cmxBbHBoYWJldCIsInNpemUiLCJNYXRoIiwicmFuZG9tIiwiY29tbW9uUHJvcGVydGllcyIsIlJlamVjdFdpdGhWYWx1ZSIsIkZ1bGZpbGxXaXRoTWV0YSIsInNpbXBsZUVycm9yIiwiY29tbW9uUHJvcGVydGllc18xIiwicHJvcGVydHkiLCJ0eXBlUHJlZml4IiwicGF5bG9hZENyZWF0b3IiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0U3RhdHVzIiwicGVuZGluZyIsInNlcmlhbGl6ZUVycm9yIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJhYm9ydGVkIiwiZGlzcGxheWVkV2FybmluZyIsIkFDIiwiQWJvcnRDb250cm9sbGVyIiwiY2xhc3NfMSIsInNpZ25hbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50Iiwib25hYm9ydCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhYm9ydCIsImluZm8iLCJkaXNwYXRjaCIsImV4dHJhIiwiX2EiLCJpZEdlbmVyYXRvciIsImFib3J0Q29udHJvbGxlciIsImFib3J0UmVhc29uIiwiYWJvcnRlZFByb21pc2UiLCJyZWFzb24iLCJwcm9taXNlIiwiX2EyIiwiZmluYWxBY3Rpb24iLCJlcnJfMSIsInNraXBEaXNwYXRjaCIsImdldFBlbmRpbmdNZXRhIiwicmFjZSIsInJlamVjdFdpdGhWYWx1ZSIsImZ1bGZpbGxXaXRoVmFsdWUiLCJkaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiIsInVud3JhcCIsImhhc01hdGNoRnVuY3Rpb24iLCJtYXRjaGVzIiwibWF0Y2hlcnMiLCJoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YSIsInZhbGlkU3RhdHVzIiwiaGFzVmFsaWRSZXF1ZXN0SWQiLCJoYXNWYWxpZFJlcXVlc3RTdGF0dXMiLCJpc0FzeW5jVGh1bmtBcnJheSIsImFzeW5jVGh1bmtzIiwiYXN5bmNUaHVuayIsImNvbWJpbmVkTWF0Y2hlciIsImhhc0ZsYWciLCJhc3luY1RodW5rc18xIiwiZW5hYmxlRVM1Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsU0FBUyxHQUFJLFFBQVEsS0FBS0EsU0FBZCxJQUE2QixZQUFZO0FBQ3JELE1BQUlDLGNBQWEsR0FBRyx1QkFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ2hDRixJQUFBQSxjQUFhLEdBQUdHLE1BQU0sQ0FBQ0MsY0FBUCxJQUNYO0FBQUVDLE1BQUFBLFNBQVMsRUFBRTtBQUFiLGlCQUE2QkMsS0FBN0IsSUFBc0MsVUFBVUwsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQUVELE1BQUFBLENBQUMsQ0FBQ0ksU0FBRixHQUFjSCxDQUFkO0FBQWtCLEtBRC9ELElBRVosVUFBVUQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQUUsV0FBSyxJQUFJSyxDQUFULElBQWNMLENBQWQ7QUFBaUIsWUFBSUMsTUFBTSxDQUFDSyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNSLENBQXJDLEVBQXdDSyxDQUF4QyxDQUFKLEVBQWdETixDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPTCxDQUFDLENBQUNLLENBQUQsQ0FBUjtBQUFqRTtBQUErRSxLQUZyRzs7QUFHQSxXQUFPUCxjQUFhLENBQUNDLENBQUQsRUFBSUMsQ0FBSixDQUFwQjtBQUNILEdBTEQ7O0FBTUEsU0FBTyxVQUFVRCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbkIsUUFBSSxPQUFPQSxDQUFQLEtBQWEsVUFBYixJQUEyQkEsQ0FBQyxLQUFLLElBQXJDLEVBQ0ksTUFBTSxJQUFJUyxTQUFKLENBQWMseUJBQXlCQyxNQUFNLENBQUNWLENBQUQsQ0FBL0IsR0FBcUMsK0JBQW5ELENBQU47O0FBQ0pGLElBQUFBLGNBQWEsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLENBQWI7O0FBQ0EsYUFBU1csRUFBVCxHQUFjO0FBQUUsV0FBS0MsV0FBTCxHQUFtQmIsQ0FBbkI7QUFBdUI7O0FBQ3ZDQSxJQUFBQSxDQUFDLENBQUNPLFNBQUYsR0FBY04sQ0FBQyxLQUFLLElBQU4sR0FBYUMsTUFBTSxDQUFDWSxNQUFQLENBQWNiLENBQWQsQ0FBYixJQUFpQ1csRUFBRSxDQUFDTCxTQUFILEdBQWVOLENBQUMsQ0FBQ00sU0FBakIsRUFBNEIsSUFBSUssRUFBSixFQUE3RCxDQUFkO0FBQ0gsR0FORDtBQU9ILENBZDJDLEVBQTVDOztBQWVBLElBQUlHLFdBQVcsR0FBSSxRQUFRLEtBQUtBLFdBQWQsSUFBOEIsVUFBVUMsT0FBVixFQUFtQkMsSUFBbkIsRUFBeUI7QUFDckUsTUFBSUMsQ0FBQyxHQUFHO0FBQUVDLElBQUFBLEtBQUssRUFBRSxDQUFUO0FBQVlDLElBQUFBLElBQUksRUFBRSxnQkFBVztBQUFFLFVBQUlDLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBTyxDQUFYLEVBQWMsTUFBTUEsQ0FBQyxDQUFDLENBQUQsQ0FBUDtBQUFZLGFBQU9BLENBQUMsQ0FBQyxDQUFELENBQVI7QUFBYyxLQUF2RTtBQUF5RUMsSUFBQUEsSUFBSSxFQUFFLEVBQS9FO0FBQW1GQyxJQUFBQSxHQUFHLEVBQUU7QUFBeEYsR0FBUjtBQUFBLE1BQXNHQyxDQUF0RztBQUFBLE1BQXlHQyxDQUF6RztBQUFBLE1BQTRHSixDQUE1RztBQUFBLE1BQStHSyxDQUEvRztBQUNBLFNBQU9BLENBQUMsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUVDLElBQUksQ0FBQyxDQUFELENBQVo7QUFBaUIsYUFBU0EsSUFBSSxDQUFDLENBQUQsQ0FBOUI7QUFBbUMsY0FBVUEsSUFBSSxDQUFDLENBQUQ7QUFBakQsR0FBSixFQUE0RCxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLEtBQWlDSCxDQUFDLENBQUNHLE1BQU0sQ0FBQ0MsUUFBUixDQUFELEdBQXFCLFlBQVc7QUFBRSxXQUFPLElBQVA7QUFBYyxHQUFqRixDQUE1RCxFQUFnSkosQ0FBdko7O0FBQ0EsV0FBU0UsSUFBVCxDQUFjRyxDQUFkLEVBQWlCO0FBQUUsV0FBTyxVQUFVQyxDQUFWLEVBQWE7QUFBRSxhQUFPQyxJQUFJLENBQUMsQ0FBQ0YsQ0FBRCxFQUFJQyxDQUFKLENBQUQsQ0FBWDtBQUFzQixLQUE1QztBQUErQzs7QUFDbEUsV0FBU0MsSUFBVCxDQUFjQyxFQUFkLEVBQWtCO0FBQ2QsUUFBSVYsQ0FBSixFQUFPLE1BQU0sSUFBSWQsU0FBSixDQUFjLGlDQUFkLENBQU47O0FBQ1AsV0FBT1EsQ0FBUDtBQUFVLFVBQUk7QUFDVixZQUFJTSxDQUFDLEdBQUcsQ0FBSixFQUFPQyxDQUFDLEtBQUtKLENBQUMsR0FBR2EsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRLENBQVIsR0FBWVQsQ0FBQyxDQUFDLFFBQUQsQ0FBYixHQUEwQlMsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRVCxDQUFDLENBQUMsT0FBRCxDQUFELEtBQWUsQ0FBQ0osQ0FBQyxHQUFHSSxDQUFDLENBQUMsUUFBRCxDQUFOLEtBQXFCSixDQUFDLENBQUNaLElBQUYsQ0FBT2dCLENBQVAsQ0FBckIsRUFBZ0MsQ0FBL0MsQ0FBUixHQUE0REEsQ0FBQyxDQUFDRSxJQUFqRyxDQUFELElBQTJHLENBQUMsQ0FBQ04sQ0FBQyxHQUFHQSxDQUFDLENBQUNaLElBQUYsQ0FBT2dCLENBQVAsRUFBVVMsRUFBRSxDQUFDLENBQUQsQ0FBWixDQUFMLEVBQXVCQyxJQUE5SSxFQUFvSixPQUFPZCxDQUFQO0FBQ3BKLFlBQUlJLENBQUMsR0FBRyxDQUFKLEVBQU9KLENBQVgsRUFBY2EsRUFBRSxHQUFHLENBQUNBLEVBQUUsQ0FBQyxDQUFELENBQUYsR0FBUSxDQUFULEVBQVliLENBQUMsQ0FBQ2UsS0FBZCxDQUFMOztBQUNkLGdCQUFRRixFQUFFLENBQUMsQ0FBRCxDQUFWO0FBQ0ksZUFBSyxDQUFMO0FBQVEsZUFBSyxDQUFMO0FBQVFiLFlBQUFBLENBQUMsR0FBR2EsRUFBSjtBQUFROztBQUN4QixlQUFLLENBQUw7QUFBUWhCLFlBQUFBLENBQUMsQ0FBQ0MsS0FBRjtBQUFXLG1CQUFPO0FBQUVpQixjQUFBQSxLQUFLLEVBQUVGLEVBQUUsQ0FBQyxDQUFELENBQVg7QUFBZ0JDLGNBQUFBLElBQUksRUFBRTtBQUF0QixhQUFQOztBQUNuQixlQUFLLENBQUw7QUFBUWpCLFlBQUFBLENBQUMsQ0FBQ0MsS0FBRjtBQUFXTSxZQUFBQSxDQUFDLEdBQUdTLEVBQUUsQ0FBQyxDQUFELENBQU47QUFBV0EsWUFBQUEsRUFBRSxHQUFHLENBQUMsQ0FBRCxDQUFMO0FBQVU7O0FBQ3hDLGVBQUssQ0FBTDtBQUFRQSxZQUFBQSxFQUFFLEdBQUdoQixDQUFDLENBQUNLLEdBQUYsQ0FBTWMsR0FBTixFQUFMOztBQUFrQm5CLFlBQUFBLENBQUMsQ0FBQ0ksSUFBRixDQUFPZSxHQUFQOztBQUFjOztBQUN4QztBQUNJLGdCQUFJLEVBQUVoQixDQUFDLEdBQUdILENBQUMsQ0FBQ0ksSUFBTixFQUFZRCxDQUFDLEdBQUdBLENBQUMsQ0FBQ2lCLE1BQUYsR0FBVyxDQUFYLElBQWdCakIsQ0FBQyxDQUFDQSxDQUFDLENBQUNpQixNQUFGLEdBQVcsQ0FBWixDQUFuQyxNQUF1REosRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLENBQVYsSUFBZUEsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLENBQWhGLENBQUosRUFBd0Y7QUFBRWhCLGNBQUFBLENBQUMsR0FBRyxDQUFKO0FBQU87QUFBVzs7QUFDNUcsZ0JBQUlnQixFQUFFLENBQUMsQ0FBRCxDQUFGLEtBQVUsQ0FBVixLQUFnQixDQUFDYixDQUFELElBQU9hLEVBQUUsQ0FBQyxDQUFELENBQUYsR0FBUWIsQ0FBQyxDQUFDLENBQUQsQ0FBVCxJQUFnQmEsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRYixDQUFDLENBQUMsQ0FBRCxDQUFoRCxDQUFKLEVBQTJEO0FBQUVILGNBQUFBLENBQUMsQ0FBQ0MsS0FBRixHQUFVZSxFQUFFLENBQUMsQ0FBRCxDQUFaO0FBQWlCO0FBQVE7O0FBQ3RGLGdCQUFJQSxFQUFFLENBQUMsQ0FBRCxDQUFGLEtBQVUsQ0FBVixJQUFlaEIsQ0FBQyxDQUFDQyxLQUFGLEdBQVVFLENBQUMsQ0FBQyxDQUFELENBQTlCLEVBQW1DO0FBQUVILGNBQUFBLENBQUMsQ0FBQ0MsS0FBRixHQUFVRSxDQUFDLENBQUMsQ0FBRCxDQUFYO0FBQWdCQSxjQUFBQSxDQUFDLEdBQUdhLEVBQUo7QUFBUTtBQUFROztBQUNyRSxnQkFBSWIsQ0FBQyxJQUFJSCxDQUFDLENBQUNDLEtBQUYsR0FBVUUsQ0FBQyxDQUFDLENBQUQsQ0FBcEIsRUFBeUI7QUFBRUgsY0FBQUEsQ0FBQyxDQUFDQyxLQUFGLEdBQVVFLENBQUMsQ0FBQyxDQUFELENBQVg7O0FBQWdCSCxjQUFBQSxDQUFDLENBQUNLLEdBQUYsQ0FBTWdCLElBQU4sQ0FBV0wsRUFBWDs7QUFBZ0I7QUFBUTs7QUFDbkUsZ0JBQUliLENBQUMsQ0FBQyxDQUFELENBQUwsRUFBVUgsQ0FBQyxDQUFDSyxHQUFGLENBQU1jLEdBQU47O0FBQ1ZuQixZQUFBQSxDQUFDLENBQUNJLElBQUYsQ0FBT2UsR0FBUDs7QUFBYztBQVh0Qjs7QUFhQUgsUUFBQUEsRUFBRSxHQUFHakIsSUFBSSxDQUFDUixJQUFMLENBQVVPLE9BQVYsRUFBbUJFLENBQW5CLENBQUw7QUFDSCxPQWpCUyxDQWlCUixPQUFPc0IsQ0FBUCxFQUFVO0FBQUVOLFFBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUQsRUFBSU0sQ0FBSixDQUFMO0FBQWFmLFFBQUFBLENBQUMsR0FBRyxDQUFKO0FBQVEsT0FqQnpCLFNBaUJrQztBQUFFRCxRQUFBQSxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFSO0FBQVk7QUFqQjFEOztBQWtCQSxRQUFJYSxFQUFFLENBQUMsQ0FBRCxDQUFGLEdBQVEsQ0FBWixFQUFlLE1BQU1BLEVBQUUsQ0FBQyxDQUFELENBQVI7QUFBYSxXQUFPO0FBQUVFLE1BQUFBLEtBQUssRUFBRUYsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRQSxFQUFFLENBQUMsQ0FBRCxDQUFWLEdBQWdCLEtBQUssQ0FBOUI7QUFBaUNDLE1BQUFBLElBQUksRUFBRTtBQUF2QyxLQUFQO0FBQy9CO0FBQ0osQ0ExQkQ7O0FBMkJBLElBQUlNLGFBQWEsR0FBSSxRQUFRLEtBQUtBLGFBQWQsSUFBZ0MsVUFBVUMsRUFBVixFQUFjQyxJQUFkLEVBQW9CO0FBQ3BFLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixJQUFJLENBQUNMLE1BQXJCLEVBQTZCUSxDQUFDLEdBQUdKLEVBQUUsQ0FBQ0osTUFBekMsRUFBaURNLENBQUMsR0FBR0MsRUFBckQsRUFBeURELENBQUMsSUFBSUUsQ0FBQyxFQUEvRDtBQUNJSixJQUFBQSxFQUFFLENBQUNJLENBQUQsQ0FBRixHQUFRSCxJQUFJLENBQUNDLENBQUQsQ0FBWjtBQURKOztBQUVBLFNBQU9GLEVBQVA7QUFDSCxDQUpEOztBQUtBLElBQUlLLFFBQVEsR0FBRzdDLE1BQU0sQ0FBQ1ksTUFBdEI7QUFDQSxJQUFJa0MsU0FBUyxHQUFHOUMsTUFBTSxDQUFDK0MsY0FBdkI7QUFDQSxJQUFJQyxVQUFVLEdBQUdoRCxNQUFNLENBQUNpRCxnQkFBeEI7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBR2xELE1BQU0sQ0FBQ21ELHdCQUE5QjtBQUNBLElBQUlDLGlCQUFpQixHQUFHcEQsTUFBTSxDQUFDcUQseUJBQS9CO0FBQ0EsSUFBSUMsaUJBQWlCLEdBQUd0RCxNQUFNLENBQUN1RCxtQkFBL0I7QUFDQSxJQUFJQyxtQkFBbUIsR0FBR3hELE1BQU0sQ0FBQ3lELHFCQUFqQztBQUNBLElBQUlDLFlBQVksR0FBRzFELE1BQU0sQ0FBQzJELGNBQTFCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHNUQsTUFBTSxDQUFDSyxTQUFQLENBQWlCQyxjQUFwQztBQUNBLElBQUl1RCxZQUFZLEdBQUc3RCxNQUFNLENBQUNLLFNBQVAsQ0FBaUJ5RCxvQkFBcEM7O0FBQ0EsSUFBSUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0IvQixLQUFwQixFQUEyQjtBQUFFLFNBQU8rQixHQUFHLElBQUlELEdBQVAsR0FBYWxCLFNBQVMsQ0FBQ2tCLEdBQUQsRUFBTUMsR0FBTixFQUFXO0FBQUVDLElBQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxJQUFBQSxZQUFZLEVBQUUsSUFBbEM7QUFBd0NDLElBQUFBLFFBQVEsRUFBRSxJQUFsRDtBQUF3RGxDLElBQUFBLEtBQUssRUFBRUE7QUFBL0QsR0FBWCxDQUF0QixHQUEyRzhCLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVcvQixLQUE3SDtBQUFxSSxDQUF4TDs7QUFDQSxJQUFJbUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVQyxDQUFWLEVBQWF2RSxDQUFiLEVBQWdCO0FBQ2pDLE9BQUssSUFBSXdFLElBQVQsSUFBaUJ4RSxDQUFDLEtBQUtBLENBQUMsR0FBRyxFQUFULENBQWxCO0FBQ0ksUUFBSTZELFlBQVksQ0FBQ3JELElBQWIsQ0FBa0JSLENBQWxCLEVBQXFCd0UsSUFBckIsQ0FBSixFQUNJUixlQUFlLENBQUNPLENBQUQsRUFBSUMsSUFBSixFQUFVeEUsQ0FBQyxDQUFDd0UsSUFBRCxDQUFYLENBQWY7QUFGUjs7QUFHQSxNQUFJZixtQkFBSixFQUNJLEtBQUssSUFBSWdCLEVBQUUsR0FBRyxDQUFULEVBQVlDLEVBQUUsR0FBR2pCLG1CQUFtQixDQUFDekQsQ0FBRCxDQUF6QyxFQUE4Q3lFLEVBQUUsR0FBR0MsRUFBRSxDQUFDckMsTUFBdEQsRUFBOERvQyxFQUFFLEVBQWhFLEVBQW9FO0FBQ2hFLFFBQUlELElBQUksR0FBR0UsRUFBRSxDQUFDRCxFQUFELENBQWI7QUFDQSxRQUFJWCxZQUFZLENBQUN0RCxJQUFiLENBQWtCUixDQUFsQixFQUFxQndFLElBQXJCLENBQUosRUFDSVIsZUFBZSxDQUFDTyxDQUFELEVBQUlDLElBQUosRUFBVXhFLENBQUMsQ0FBQ3dFLElBQUQsQ0FBWCxDQUFmO0FBQ1A7QUFDTCxTQUFPRCxDQUFQO0FBQ0gsQ0FYRDs7QUFZQSxJQUFJSSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVVKLENBQVYsRUFBYXZFLENBQWIsRUFBZ0I7QUFBRSxTQUFPaUQsVUFBVSxDQUFDc0IsQ0FBRCxFQUFJbEIsaUJBQWlCLENBQUNyRCxDQUFELENBQXJCLENBQWpCO0FBQTZDLENBQW5GOztBQUNBLElBQUk0RSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVVDLE1BQVYsRUFBa0I7QUFBRSxTQUFPOUIsU0FBUyxDQUFDOEIsTUFBRCxFQUFTLFlBQVQsRUFBdUI7QUFBRTFDLElBQUFBLEtBQUssRUFBRTtBQUFULEdBQXZCLENBQWhCO0FBQTBELENBQW5HOztBQUNBLElBQUkyQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVRCxNQUFWLEVBQWtCRSxHQUFsQixFQUF1QjtBQUNsQyxPQUFLLElBQUlDLElBQVQsSUFBaUJELEdBQWpCO0FBQ0loQyxJQUFBQSxTQUFTLENBQUM4QixNQUFELEVBQVNHLElBQVQsRUFBZTtBQUFFQyxNQUFBQSxHQUFHLEVBQUVGLEdBQUcsQ0FBQ0MsSUFBRCxDQUFWO0FBQWtCYixNQUFBQSxVQUFVLEVBQUU7QUFBOUIsS0FBZixDQUFUO0FBREo7QUFFSCxDQUhEOztBQUlBLElBQUllLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVVMLE1BQVYsRUFBa0JNLE9BQWxCLEVBQTJCQyxJQUEzQixFQUFpQztBQUM5QyxNQUFJRCxPQUFPLElBQUksT0FBT0EsT0FBUCxLQUFtQixRQUE5QixJQUEwQyxPQUFPQSxPQUFQLEtBQW1CLFVBQWpFLEVBQTZFO0FBQ3pFLFFBQUlFLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVuQixHQUFWLEVBQWU7QUFDekIsVUFBSSxDQUFDTCxZQUFZLENBQUNyRCxJQUFiLENBQWtCcUUsTUFBbEIsRUFBMEJYLEdBQTFCLENBQUQsSUFBbUNBLEdBQUcsS0FBSyxTQUEvQyxFQUNJbkIsU0FBUyxDQUFDOEIsTUFBRCxFQUFTWCxHQUFULEVBQWM7QUFBRWUsUUFBQUEsR0FBRyxFQUFFLGVBQVk7QUFBRSxpQkFBT0UsT0FBTyxDQUFDakIsR0FBRCxDQUFkO0FBQXNCLFNBQTNDO0FBQTZDQyxRQUFBQSxVQUFVLEVBQUUsRUFBRWlCLElBQUksR0FBR2pDLGdCQUFnQixDQUFDZ0MsT0FBRCxFQUFVakIsR0FBVixDQUF6QixLQUE0Q2tCLElBQUksQ0FBQ2pCO0FBQTFHLE9BQWQsQ0FBVDtBQUNQLEtBSEQ7O0FBSUEsU0FBSyxJQUFJTSxFQUFFLEdBQUcsQ0FBVCxFQUFZQyxFQUFFLEdBQUduQixpQkFBaUIsQ0FBQzRCLE9BQUQsQ0FBdkMsRUFBa0RWLEVBQUUsR0FBR0MsRUFBRSxDQUFDckMsTUFBMUQsRUFBa0VvQyxFQUFFLEVBQXBFLEVBQXdFO0FBQ3BFLFVBQUlQLEdBQUcsR0FBR1EsRUFBRSxDQUFDRCxFQUFELENBQVo7O0FBQ0FZLE1BQUFBLE9BQU8sQ0FBQ25CLEdBQUQsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBT1csTUFBUDtBQUNILENBWkQ7O0FBYUEsSUFBSVMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVUgsT0FBVixFQUFtQjtBQUNoQyxTQUFPRCxVQUFVLENBQUNOLGNBQWMsQ0FBQzdCLFNBQVMsQ0FBQ29DLE9BQU8sSUFBSSxJQUFYLEdBQWtCckMsUUFBUSxDQUFDYSxZQUFZLENBQUN3QixPQUFELENBQWIsQ0FBMUIsR0FBb0QsRUFBckQsRUFBeUQsU0FBekQsRUFBb0VBLE9BQU8sSUFBSUEsT0FBTyxDQUFDSSxVQUFuQixJQUFpQyxhQUFhSixPQUE5QyxHQUF3RDtBQUFFRixJQUFBQSxHQUFHLEVBQUUsZUFBWTtBQUFFLGFBQU9FLE9BQU8sQ0FBQ0ssT0FBZjtBQUF5QixLQUE5QztBQUFnRHJCLElBQUFBLFVBQVUsRUFBRTtBQUE1RCxHQUF4RCxHQUE2SDtBQUFFaEMsSUFBQUEsS0FBSyxFQUFFZ0QsT0FBVDtBQUFrQmhCLElBQUFBLFVBQVUsRUFBRTtBQUE5QixHQUFqTSxDQUFWLENBQWYsRUFBa1FnQixPQUFsUSxDQUFqQjtBQUNILENBRkQ7O0FBR0EsSUFBSU0sT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVUMsTUFBVixFQUFrQkMsV0FBbEIsRUFBK0JDLFNBQS9CLEVBQTBDO0FBQ3BELFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQzFDLFFBQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVU3RCxLQUFWLEVBQWlCO0FBQzdCLFVBQUk7QUFDQUgsUUFBQUEsSUFBSSxDQUFDNEQsU0FBUyxDQUFDbEUsSUFBVixDQUFlUyxLQUFmLENBQUQsQ0FBSjtBQUNILE9BRkQsQ0FHQSxPQUFPSSxDQUFQLEVBQVU7QUFDTndELFFBQUFBLE1BQU0sQ0FBQ3hELENBQUQsQ0FBTjtBQUNIO0FBQ0osS0FQRDs7QUFRQSxRQUFJMEQsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBVTlELEtBQVYsRUFBaUI7QUFDNUIsVUFBSTtBQUNBSCxRQUFBQSxJQUFJLENBQUM0RCxTQUFTLENBQUNNLEtBQVYsQ0FBZ0IvRCxLQUFoQixDQUFELENBQUo7QUFDSCxPQUZELENBR0EsT0FBT0ksQ0FBUCxFQUFVO0FBQ053RCxRQUFBQSxNQUFNLENBQUN4RCxDQUFELENBQU47QUFDSDtBQUNKLEtBUEQ7O0FBUUEsUUFBSVAsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVW1FLENBQVYsRUFBYTtBQUFFLGFBQU9BLENBQUMsQ0FBQ2pFLElBQUYsR0FBUzRELE9BQU8sQ0FBQ0ssQ0FBQyxDQUFDaEUsS0FBSCxDQUFoQixHQUE0QjBELE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkssQ0FBQyxDQUFDaEUsS0FBbEIsRUFBeUJpRSxJQUF6QixDQUE4QkosU0FBOUIsRUFBeUNDLFFBQXpDLENBQW5DO0FBQXdGLEtBQWxIOztBQUNBakUsSUFBQUEsSUFBSSxDQUFDLENBQUM0RCxTQUFTLEdBQUdBLFNBQVMsQ0FBQ1MsS0FBVixDQUFnQlgsTUFBaEIsRUFBd0JDLFdBQXhCLENBQWIsRUFBbURqRSxJQUFuRCxFQUFELENBQUo7QUFDSCxHQW5CTSxDQUFQO0FBb0JILENBckJEOztBQXVCQWtELGNBQWMsQ0FBQzBCLE9BQUQsQ0FBZDs7QUFDQXhCLFFBQVEsQ0FBQ3dCLE9BQUQsRUFBVTtBQUNkQyxFQUFBQSxlQUFlLEVBQUUsMkJBQVk7QUFBRSxXQUFPQSxnQkFBUDtBQUF5QixHQUQxQztBQUVkQyxFQUFBQSxjQUFjLEVBQUUsMEJBQVk7QUFBRSxXQUFPQSxlQUFQO0FBQXdCLEdBRnhDO0FBR2RDLEVBQUFBLFlBQVksRUFBRSx3QkFBWTtBQUFFLFdBQU9BLGFBQVA7QUFBc0IsR0FIcEM7QUFJZEMsRUFBQUEsZ0JBQWdCLEVBQUUsNEJBQVk7QUFBRSxXQUFPQSxpQkFBUDtBQUEwQixHQUo1QztBQUtkQyxFQUFBQSx1QkFBdUIsRUFBRSxtQ0FBWTtBQUFFLFdBQU9BLHdCQUFQO0FBQWlDLEdBTDFEO0FBTWRDLEVBQUFBLG1CQUFtQixFQUFFLCtCQUFZO0FBQUUsV0FBT0Esb0JBQVA7QUFBNkIsR0FObEQ7QUFPZEMsRUFBQUEsdUNBQXVDLEVBQUUsbURBQVk7QUFBRSxXQUFPQSx3Q0FBUDtBQUFpRCxHQVAxRjtBQVFkQyxFQUFBQSxlQUFlLEVBQUUsMkJBQVk7QUFBRSxXQUFPQyxhQUFhLENBQUN2QixPQUFyQjtBQUErQixHQVJoRDtBQVNkd0IsRUFBQUEsYUFBYSxFQUFFLHlCQUFZO0FBQUUsV0FBT0EsY0FBUDtBQUF1QixHQVR0QztBQVVkQyxFQUFBQSxjQUFjLEVBQUUsMEJBQVk7QUFBRSxXQUFPQyxnQkFBZ0IsQ0FBQ0QsY0FBeEI7QUFBeUMsR0FWekQ7QUFXZEUsRUFBQUEsMENBQTBDLEVBQUUsc0RBQVk7QUFBRSxXQUFPQSwyQ0FBUDtBQUFvRCxHQVhoRztBQVlkQyxFQUFBQSxXQUFXLEVBQUUsdUJBQVk7QUFBRSxXQUFPQSxZQUFQO0FBQXFCLEdBWmxDO0FBYWRDLEVBQUFBLE9BQU8sRUFBRSxtQkFBWTtBQUFFLFdBQU9OLGFBQWEsQ0FBQ00sT0FBckI7QUFBK0IsR0FieEM7QUFjZEMsRUFBQUEsd0JBQXdCLEVBQUUsb0NBQVk7QUFBRSxXQUFPQSx5QkFBUDtBQUFrQyxHQWQ1RDtBQWVkQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVk7QUFBRSxXQUFPUixhQUFhLENBQUNRLE1BQXJCO0FBQThCLEdBZnRDO0FBZ0JkQyxFQUFBQSxvQkFBb0IsRUFBRSxnQ0FBWTtBQUFFLFdBQU9BLHFCQUFQO0FBQThCLEdBaEJwRDtBQWlCZEMsRUFBQUEsT0FBTyxFQUFFLG1CQUFZO0FBQUUsV0FBT0EsUUFBUDtBQUFpQixHQWpCMUI7QUFrQmRDLEVBQUFBLE9BQU8sRUFBRSxtQkFBWTtBQUFFLFdBQU9BLFFBQVA7QUFBaUIsR0FsQjFCO0FBbUJkQyxFQUFBQSxPQUFPLEVBQUUsbUJBQVk7QUFBRSxXQUFPQSxRQUFQO0FBQWlCLEdBbkIxQjtBQW9CZEMsRUFBQUEsa0JBQWtCLEVBQUUsOEJBQVk7QUFBRSxXQUFPQSxtQkFBUDtBQUE0QixHQXBCaEQ7QUFxQmRDLEVBQUFBLE9BQU8sRUFBRSxtQkFBWTtBQUFFLFdBQU9kLGFBQWEsQ0FBQ2MsT0FBckI7QUFBK0IsR0FyQnhDO0FBc0JkQyxFQUFBQSxXQUFXLEVBQUUsdUJBQVk7QUFBRSxXQUFPQSxZQUFQO0FBQXFCLEdBdEJsQztBQXVCZEMsRUFBQUEsa0JBQWtCLEVBQUUsOEJBQVk7QUFBRSxXQUFPQSxtQkFBUDtBQUE0QixHQXZCaEQ7QUF3QmRDLEVBQUFBLFNBQVMsRUFBRSxxQkFBWTtBQUFFLFdBQU9BLFVBQVA7QUFBbUIsR0F4QjlCO0FBeUJkQyxFQUFBQSxPQUFPLEVBQUUsbUJBQVk7QUFBRSxXQUFPQSxRQUFQO0FBQWlCLEdBekIxQjtBQTBCZEMsRUFBQUEsYUFBYSxFQUFFLHlCQUFZO0FBQUUsV0FBT0EsY0FBUDtBQUF1QixHQTFCdEM7QUEyQmRDLEVBQUFBLFVBQVUsRUFBRSxzQkFBWTtBQUFFLFdBQU9BLFdBQVA7QUFBb0IsR0EzQmhDO0FBNEJkQyxFQUFBQSxtQkFBbUIsRUFBRSwrQkFBWTtBQUFFLFdBQU9BLG9CQUFQO0FBQTZCLEdBNUJsRDtBQTZCZEMsRUFBQUEsa0JBQWtCLEVBQUUsOEJBQVk7QUFBRSxXQUFPQSxtQkFBUDtBQUE0QixHQTdCaEQ7QUE4QmRDLEVBQUFBLE1BQU0sRUFBRSxrQkFBWTtBQUFFLFdBQU9BLE9BQVA7QUFBZ0IsR0E5QnhCO0FBK0JkQyxFQUFBQSxRQUFRLEVBQUUsb0JBQVk7QUFBRSxXQUFPeEIsYUFBYSxDQUFDd0IsUUFBckI7QUFBZ0MsR0EvQjFDO0FBZ0NkQyxFQUFBQSxZQUFZLEVBQUUsd0JBQVk7QUFBRSxXQUFPQSxhQUFQO0FBQXNCO0FBaENwQyxDQUFWLENBQVI7O0FBa0NBLElBQUlDLGFBQWEsR0FBR25ELFVBQVUsQ0FBQ29ELE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBOUI7O0FBQ0F4RCxVQUFVLENBQUNvQixPQUFELEVBQVVoQixVQUFVLENBQUNvRCxPQUFPLENBQUMsT0FBRCxDQUFSLENBQXBCLENBQVY7O0FBQ0EsSUFBSTNCLGFBQWEsR0FBR3pCLFVBQVUsQ0FBQ29ELE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBOUI7O0FBQ0EsSUFBSXhCLGdCQUFnQixHQUFHNUIsVUFBVSxDQUFDb0QsT0FBTyxDQUFDLFVBQUQsQ0FBUixDQUFqQzs7QUFFQSxJQUFJQyxZQUFZLEdBQUdyRCxVQUFVLENBQUNvRCxPQUFPLENBQUMsT0FBRCxDQUFSLENBQTdCOztBQUNBLElBQUlFLGVBQWUsR0FBR3RELFVBQVUsQ0FBQ29ELE9BQU8sQ0FBQyxVQUFELENBQVIsQ0FBaEM7O0FBQ0EsSUFBSS9CLHdCQUF1QixHQUFHLFNBQTFCQSx3QkFBMEIsR0FBWTtBQUN0QyxNQUFJa0MsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsT0FBSyxJQUFJcEUsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQ29FLElBQUFBLElBQUksQ0FBQ3BFLEVBQUQsQ0FBSixHQUFXcUUsU0FBUyxDQUFDckUsRUFBRCxDQUFwQjtBQUNIOztBQUNELE1BQUlzRSxRQUFRLEdBQUcsQ0FBQyxHQUFHSCxlQUFlLENBQUMzQixjQUFwQixFQUFvQ1osS0FBcEMsQ0FBMEMsS0FBSyxDQUEvQyxFQUFrRHdDLElBQWxELENBQWY7O0FBQ0EsTUFBSUcsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFVN0csS0FBVixFQUFpQjtBQUNuQyxRQUFJOEcsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJeEUsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQ3dFLE1BQUFBLElBQUksQ0FBQ3hFLEVBQUUsR0FBRyxDQUFOLENBQUosR0FBZXFFLFNBQVMsQ0FBQ3JFLEVBQUQsQ0FBeEI7QUFDSDs7QUFDRCxXQUFPc0UsUUFBUSxDQUFDMUMsS0FBVCxDQUFlLEtBQUssQ0FBcEIsRUFBdUI3RCxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUdtRyxZQUFZLENBQUNkLE9BQWpCLEVBQTBCMUYsS0FBMUIsSUFBbUMsQ0FBQyxHQUFHd0csWUFBWSxDQUFDdEIsT0FBakIsRUFBMEJsRixLQUExQixDQUFuQyxHQUFzRUEsS0FBdkUsQ0FBRCxFQUFnRjhHLElBQWhGLENBQXBDLENBQVA7QUFDSCxHQU5EOztBQU9BLFNBQU9ELGVBQVA7QUFDSCxDQWREOztBQWdCQSxJQUFJRSxhQUFhLEdBQUc1RCxVQUFVLENBQUNvRCxPQUFPLENBQUMsT0FBRCxDQUFSLENBQTlCOztBQUVBLElBQUlTLFlBQVksR0FBRzdELFVBQVUsQ0FBQ29ELE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBN0I7O0FBQ0EsSUFBSVUsbUJBQW1CLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDQyxvQ0FBeEMsR0FBK0VELE1BQU0sQ0FBQ0Msb0NBQXRGLEdBQTZILFlBQVk7QUFDL0osTUFBSVIsU0FBUyxDQUFDekcsTUFBVixLQUFxQixDQUF6QixFQUNJLE9BQU8sS0FBSyxDQUFaO0FBQ0osTUFBSSxPQUFPeUcsU0FBUyxDQUFDLENBQUQsQ0FBaEIsS0FBd0IsUUFBNUIsRUFDSSxPQUFPSyxZQUFZLENBQUNJLE9BQXBCO0FBQ0osU0FBT0osWUFBWSxDQUFDSSxPQUFiLENBQXFCbEQsS0FBckIsQ0FBMkIsSUFBM0IsRUFBaUN5QyxTQUFqQyxDQUFQO0FBQ0gsQ0FORDtBQU9BLElBQUlVLGdCQUFnQixHQUFHLE9BQU9ILE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ0ksNEJBQXhDLEdBQXVFSixNQUFNLENBQUNJLDRCQUE5RSxHQUE2RyxZQUFZO0FBQzVJLFNBQU8sVUFBVUMsSUFBVixFQUFnQjtBQUNuQixXQUFPQSxJQUFQO0FBQ0gsR0FGRDtBQUdILENBSkQ7O0FBTUEsU0FBU3hCLGNBQVQsQ0FBdUIvRixLQUF2QixFQUE4QjtBQUMxQixNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssS0FBSyxJQUEzQyxFQUNJLE9BQU8sS0FBUDtBQUNKLE1BQUl3SCxLQUFLLEdBQUd4SCxLQUFaOztBQUNBLFNBQU9sQyxNQUFNLENBQUMyRCxjQUFQLENBQXNCK0YsS0FBdEIsTUFBaUMsSUFBeEMsRUFBOEM7QUFDMUNBLElBQUFBLEtBQUssR0FBRzFKLE1BQU0sQ0FBQzJELGNBQVAsQ0FBc0IrRixLQUF0QixDQUFSO0FBQ0g7O0FBQ0QsU0FBTzFKLE1BQU0sQ0FBQzJELGNBQVAsQ0FBc0J6QixLQUF0QixNQUFpQ3dILEtBQXhDO0FBQ0g7O0FBRUQsSUFBSUMsa0JBQWtCLEdBQUd0RSxVQUFVLENBQUNvRCxPQUFPLENBQUMsYUFBRCxDQUFSLENBQW5DOztBQUVBLFNBQVNtQixtQkFBVCxDQUE2QkMsUUFBN0IsRUFBdUNDLE1BQXZDLEVBQStDO0FBQzNDLE1BQUlDLE9BQU8sR0FBRyxDQUFkO0FBQ0EsU0FBTztBQUNIQyxJQUFBQSxXQUFXLEVBQUUscUJBQVVDLEVBQVYsRUFBYztBQUN2QixVQUFJQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxFQUFkOztBQUNBLFVBQUk7QUFDQSxlQUFPSCxFQUFFLEVBQVQ7QUFDSCxPQUZELFNBR1E7QUFDSixZQUFJSSxRQUFRLEdBQUdGLElBQUksQ0FBQ0MsR0FBTCxFQUFmO0FBQ0FMLFFBQUFBLE9BQU8sSUFBSU0sUUFBUSxHQUFHSCxPQUF0QjtBQUNIO0FBQ0osS0FWRTtBQVdISSxJQUFBQSxjQUFjLEVBQUUsMEJBQVk7QUFDeEIsVUFBSVAsT0FBTyxHQUFHRixRQUFkLEVBQXdCO0FBQ3BCVSxRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYVYsTUFBTSxHQUFHLFFBQVQsR0FBb0JDLE9BQXBCLEdBQThCLGtEQUE5QixHQUFtRkYsUUFBbkYsR0FBOEYsOFNBQTNHO0FBQ0g7QUFDSjtBQWZFLEdBQVA7QUFpQkg7O0FBQ0QsSUFBSXZELGdCQUFlLEdBQWtCLFVBQVVtRSxNQUFWLEVBQWtCO0FBQ25EN0ssRUFBQUEsU0FBUyxDQUFDMEcsZUFBRCxFQUFrQm1FLE1BQWxCLENBQVQ7O0FBQ0EsV0FBU25FLGVBQVQsR0FBMkI7QUFDdkIsUUFBSXNDLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSXBFLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdxRSxTQUFTLENBQUN6RyxNQUFoQyxFQUF3Q29DLEVBQUUsRUFBMUMsRUFBOEM7QUFDMUNvRSxNQUFBQSxJQUFJLENBQUNwRSxFQUFELENBQUosR0FBV3FFLFNBQVMsQ0FBQ3JFLEVBQUQsQ0FBcEI7QUFDSDs7QUFDRCxRQUFJa0csS0FBSyxHQUFHRCxNQUFNLENBQUNyRSxLQUFQLENBQWEsSUFBYixFQUFtQndDLElBQW5CLEtBQTRCLElBQXhDOztBQUNBNUksSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCeUssS0FBdEIsRUFBNkJwRSxlQUFlLENBQUNqRyxTQUE3QztBQUNBLFdBQU9xSyxLQUFQO0FBQ0g7O0FBQ0QxSyxFQUFBQSxNQUFNLENBQUMrQyxjQUFQLENBQXNCdUQsZUFBdEIsRUFBdUMzRSxNQUFNLENBQUNnSixPQUE5QyxFQUF1RDtBQUNuRDNGLElBQUFBLEdBQUcsRUFBRSxlQUFZO0FBQ2IsYUFBT3NCLGVBQVA7QUFDSCxLQUhrRDtBQUluRHBDLElBQUFBLFVBQVUsRUFBRSxLQUp1QztBQUtuREMsSUFBQUEsWUFBWSxFQUFFO0FBTHFDLEdBQXZEOztBQU9BbUMsRUFBQUEsZUFBZSxDQUFDakcsU0FBaEIsQ0FBMEJ1SyxNQUExQixHQUFtQyxZQUFZO0FBQzNDLFFBQUlDLEdBQUcsR0FBRyxFQUFWOztBQUNBLFNBQUssSUFBSXJHLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdxRSxTQUFTLENBQUN6RyxNQUFoQyxFQUF3Q29DLEVBQUUsRUFBMUMsRUFBOEM7QUFDMUNxRyxNQUFBQSxHQUFHLENBQUNyRyxFQUFELENBQUgsR0FBVXFFLFNBQVMsQ0FBQ3JFLEVBQUQsQ0FBbkI7QUFDSDs7QUFDRCxXQUFPaUcsTUFBTSxDQUFDcEssU0FBUCxDQUFpQnVLLE1BQWpCLENBQXdCeEUsS0FBeEIsQ0FBOEIsSUFBOUIsRUFBb0N5RSxHQUFwQyxDQUFQO0FBQ0gsR0FORDs7QUFPQXZFLEVBQUFBLGVBQWUsQ0FBQ2pHLFNBQWhCLENBQTBCeUssT0FBMUIsR0FBb0MsWUFBWTtBQUM1QyxRQUFJRCxHQUFHLEdBQUcsRUFBVjs7QUFDQSxTQUFLLElBQUlyRyxFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHcUUsU0FBUyxDQUFDekcsTUFBaEMsRUFBd0NvQyxFQUFFLEVBQTFDLEVBQThDO0FBQzFDcUcsTUFBQUEsR0FBRyxDQUFDckcsRUFBRCxDQUFILEdBQVVxRSxTQUFTLENBQUNyRSxFQUFELENBQW5CO0FBQ0g7O0FBQ0QsUUFBSXFHLEdBQUcsQ0FBQ3pJLE1BQUosS0FBZSxDQUFmLElBQW9CakMsS0FBSyxDQUFDNEssT0FBTixDQUFjRixHQUFHLENBQUMsQ0FBRCxDQUFqQixDQUF4QixFQUErQztBQUMzQyxhQUFPLEtBQUt2RSxlQUFlLENBQUMwRSxJQUFoQixDQUFxQjVFLEtBQXJCLENBQTJCRSxlQUEzQixFQUE0Qy9ELGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBTixDQUFELEVBQVdzSSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9ELE1BQVAsQ0FBYyxJQUFkLENBQVgsQ0FBekQsQ0FBTCxHQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFLdEUsZUFBZSxDQUFDMEUsSUFBaEIsQ0FBcUI1RSxLQUFyQixDQUEyQkUsZUFBM0IsRUFBNEMvRCxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQU4sQ0FBRCxFQUFXc0ksR0FBRyxDQUFDRCxNQUFKLENBQVcsSUFBWCxDQUFYLENBQXpELENBQUwsR0FBUDtBQUNILEdBVEQ7O0FBVUEsU0FBT3RFLGVBQVA7QUFDSCxDQXBDb0MsQ0FvQ25DbkcsS0FwQ21DLENBQXJDOztBQXNDQSxJQUFJOEssWUFBWSxHQUFHLEtBQW5CO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLGtCQUFiOztBQUNBLFNBQVNDLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCQyxPQUE5QixFQUF1QztBQUNuQyxNQUFJRCxTQUFKLEVBQWU7QUFDWDtBQUNIOztBQUNELE1BQUlILFlBQUosRUFBa0I7QUFDZCxVQUFNLElBQUlLLEtBQUosQ0FBVUosTUFBVixDQUFOO0FBQ0g7O0FBQ0QsUUFBTSxJQUFJSSxLQUFKLENBQVVKLE1BQU0sR0FBRyxJQUFULElBQWlCRyxPQUFPLElBQUksRUFBNUIsQ0FBVixDQUFOO0FBQ0g7O0FBQ0QsU0FBU0UsU0FBVCxDQUFtQnZILEdBQW5CLEVBQXdCd0gsVUFBeEIsRUFBb0NDLE1BQXBDLEVBQTRDQyxRQUE1QyxFQUFzRDtBQUNsRCxTQUFPQyxJQUFJLENBQUNKLFNBQUwsQ0FBZXZILEdBQWYsRUFBb0I0SCxZQUFZLENBQUNKLFVBQUQsRUFBYUUsUUFBYixDQUFoQyxFQUF3REQsTUFBeEQsQ0FBUDtBQUNIOztBQUNELFNBQVNHLFlBQVQsQ0FBc0JKLFVBQXRCLEVBQWtDRSxRQUFsQyxFQUE0QztBQUN4QyxNQUFJRyxLQUFLLEdBQUcsRUFBWjtBQUFBLE1BQWdCQyxJQUFJLEdBQUcsRUFBdkI7QUFDQSxNQUFJLENBQUNKLFFBQUwsRUFDSUEsUUFBUSxHQUFHLGtCQUFVMUssQ0FBVixFQUFha0IsS0FBYixFQUFvQjtBQUMzQixRQUFJMkosS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhM0osS0FBakIsRUFDSSxPQUFPLGNBQVA7QUFDSixXQUFPLGlCQUFpQjRKLElBQUksQ0FBQ0MsS0FBTCxDQUFXLENBQVgsRUFBY0YsS0FBSyxDQUFDRyxPQUFOLENBQWM5SixLQUFkLENBQWQsRUFBb0MrSixJQUFwQyxDQUF5QyxHQUF6QyxDQUFqQixHQUFpRSxHQUF4RTtBQUNILEdBSkQ7QUFLSixTQUFPLFVBQVVoSSxHQUFWLEVBQWUvQixLQUFmLEVBQXNCO0FBQ3pCLFFBQUkySixLQUFLLENBQUN6SixNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDbEIsVUFBSThKLE9BQU8sR0FBR0wsS0FBSyxDQUFDRyxPQUFOLENBQWMsSUFBZCxDQUFkO0FBQ0EsT0FBQ0UsT0FBRCxHQUFXTCxLQUFLLENBQUNNLE1BQU4sQ0FBYUQsT0FBTyxHQUFHLENBQXZCLENBQVgsR0FBdUNMLEtBQUssQ0FBQ3hKLElBQU4sQ0FBVyxJQUFYLENBQXZDO0FBQ0EsT0FBQzZKLE9BQUQsR0FBV0osSUFBSSxDQUFDSyxNQUFMLENBQVlELE9BQVosRUFBcUJFLFFBQXJCLEVBQStCbkksR0FBL0IsQ0FBWCxHQUFpRDZILElBQUksQ0FBQ3pKLElBQUwsQ0FBVTRCLEdBQVYsQ0FBakQ7QUFDQSxVQUFJLENBQUM0SCxLQUFLLENBQUNHLE9BQU4sQ0FBYzlKLEtBQWQsQ0FBTCxFQUNJQSxLQUFLLEdBQUd3SixRQUFRLENBQUNuTCxJQUFULENBQWMsSUFBZCxFQUFvQjBELEdBQXBCLEVBQXlCL0IsS0FBekIsQ0FBUjtBQUNQLEtBTkQsTUFRSTJKLEtBQUssQ0FBQ3hKLElBQU4sQ0FBV0gsS0FBWDs7QUFDSixXQUFPc0osVUFBVSxJQUFJLElBQWQsR0FBcUJ0SixLQUFyQixHQUE2QnNKLFVBQVUsQ0FBQ2pMLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IwRCxHQUF0QixFQUEyQi9CLEtBQTNCLENBQXBDO0FBQ0gsR0FYRDtBQVlIOztBQUNELFNBQVM0RixtQkFBVCxDQUE0QjVGLEtBQTVCLEVBQW1DO0FBQy9CLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxLQUFLLElBQXZDLElBQStDLE9BQU9BLEtBQVAsS0FBaUIsV0FBaEUsSUFBK0VsQyxNQUFNLENBQUNxTSxRQUFQLENBQWdCbkssS0FBaEIsQ0FBdEY7QUFDSDs7QUFDRCxTQUFTb0ssaUJBQVQsQ0FBMkJDLFdBQTNCLEVBQXdDQyxXQUF4QyxFQUFxRHhJLEdBQXJELEVBQTBEO0FBQ3RELE1BQUl5SSxpQkFBaUIsR0FBR0MsZUFBZSxDQUFDSCxXQUFELEVBQWNDLFdBQWQsRUFBMkJ4SSxHQUEzQixDQUF2QztBQUNBLFNBQU87QUFDSDJJLElBQUFBLGVBQWUsRUFBRSwyQkFBWTtBQUN6QixhQUFPQSxnQkFBZSxDQUFDSixXQUFELEVBQWNDLFdBQWQsRUFBMkJDLGlCQUEzQixFQUE4Q3pJLEdBQTlDLENBQXRCO0FBQ0g7QUFIRSxHQUFQO0FBS0g7O0FBQ0QsU0FBUzBJLGVBQVQsQ0FBeUJILFdBQXpCLEVBQXNDQyxXQUF0QyxFQUFtRHhJLEdBQW5ELEVBQXdENEksSUFBeEQsRUFBOEQ7QUFDMUQsTUFBSUosV0FBVyxLQUFLLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsSUFBQUEsV0FBVyxHQUFHLEVBQWQ7QUFBbUI7O0FBQ2pELE1BQUlJLElBQUksS0FBSyxLQUFLLENBQWxCLEVBQXFCO0FBQUVBLElBQUFBLElBQUksR0FBRyxFQUFQO0FBQVk7O0FBQ25DLE1BQUlDLE9BQU8sR0FBRztBQUFFM0ssSUFBQUEsS0FBSyxFQUFFOEI7QUFBVCxHQUFkOztBQUNBLE1BQUksQ0FBQ3VJLFdBQVcsQ0FBQ3ZJLEdBQUQsQ0FBaEIsRUFBdUI7QUFDbkI2SSxJQUFBQSxPQUFPLENBQUNDLFFBQVIsR0FBbUIsRUFBbkI7O0FBQ0EsU0FBSyxJQUFJN0ksR0FBVCxJQUFnQkQsR0FBaEIsRUFBcUI7QUFDakIsVUFBSStJLFNBQVMsR0FBR0gsSUFBSSxHQUFHQSxJQUFJLEdBQUcsR0FBUCxHQUFhM0ksR0FBaEIsR0FBc0JBLEdBQTFDOztBQUNBLFVBQUl1SSxXQUFXLENBQUNwSyxNQUFaLElBQXNCb0ssV0FBVyxDQUFDUixPQUFaLENBQW9CZSxTQUFwQixNQUFtQyxDQUFDLENBQTlELEVBQWlFO0FBQzdEO0FBQ0g7O0FBQ0RGLE1BQUFBLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQjdJLEdBQWpCLElBQXdCeUksZUFBZSxDQUFDSCxXQUFELEVBQWNDLFdBQWQsRUFBMkJ4SSxHQUFHLENBQUNDLEdBQUQsQ0FBOUIsRUFBcUM4SSxTQUFyQyxDQUF2QztBQUNIO0FBQ0o7O0FBQ0QsU0FBT0YsT0FBUDtBQUNIOztBQUNELFNBQVNGLGdCQUFULENBQXlCSixXQUF6QixFQUFzQ0MsV0FBdEMsRUFBbURRLGVBQW5ELEVBQW9FaEosR0FBcEUsRUFBeUVpSixhQUF6RSxFQUF3RkwsSUFBeEYsRUFBOEY7QUFDMUYsTUFBSUosV0FBVyxLQUFLLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsSUFBQUEsV0FBVyxHQUFHLEVBQWQ7QUFBbUI7O0FBQ2pELE1BQUlTLGFBQWEsS0FBSyxLQUFLLENBQTNCLEVBQThCO0FBQUVBLElBQUFBLGFBQWEsR0FBRyxLQUFoQjtBQUF3Qjs7QUFDeEQsTUFBSUwsSUFBSSxLQUFLLEtBQUssQ0FBbEIsRUFBcUI7QUFBRUEsSUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFBWTs7QUFDbkMsTUFBSU0sT0FBTyxHQUFHRixlQUFlLEdBQUdBLGVBQWUsQ0FBQzlLLEtBQW5CLEdBQTJCLEtBQUssQ0FBN0Q7QUFDQSxNQUFJaUwsT0FBTyxHQUFHRCxPQUFPLEtBQUtsSixHQUExQjs7QUFDQSxNQUFJaUosYUFBYSxJQUFJLENBQUNFLE9BQWxCLElBQTZCLENBQUNDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhckosR0FBYixDQUFsQyxFQUFxRDtBQUNqRCxXQUFPO0FBQUVzSixNQUFBQSxVQUFVLEVBQUUsSUFBZDtBQUFvQlYsTUFBQUEsSUFBSSxFQUFFQTtBQUExQixLQUFQO0FBQ0g7O0FBQ0QsTUFBSUwsV0FBVyxDQUFDVyxPQUFELENBQVgsSUFBd0JYLFdBQVcsQ0FBQ3ZJLEdBQUQsQ0FBdkMsRUFBOEM7QUFDMUMsV0FBTztBQUFFc0osTUFBQUEsVUFBVSxFQUFFO0FBQWQsS0FBUDtBQUNIOztBQUNELE1BQUlDLFlBQVksR0FBRyxFQUFuQjs7QUFDQSxPQUFLLElBQUl0SixHQUFULElBQWdCK0ksZUFBZSxDQUFDRixRQUFoQyxFQUEwQztBQUN0Q1MsSUFBQUEsWUFBWSxDQUFDdEosR0FBRCxDQUFaLEdBQW9CLElBQXBCO0FBQ0g7O0FBQ0QsT0FBSyxJQUFJQSxHQUFULElBQWdCRCxHQUFoQixFQUFxQjtBQUNqQnVKLElBQUFBLFlBQVksQ0FBQ3RKLEdBQUQsQ0FBWixHQUFvQixJQUFwQjtBQUNIOztBQUNELE9BQUssSUFBSUEsR0FBVCxJQUFnQnNKLFlBQWhCLEVBQThCO0FBQzFCLFFBQUlSLFNBQVMsR0FBR0gsSUFBSSxHQUFHQSxJQUFJLEdBQUcsR0FBUCxHQUFhM0ksR0FBaEIsR0FBc0JBLEdBQTFDOztBQUNBLFFBQUl1SSxXQUFXLENBQUNwSyxNQUFaLElBQXNCb0ssV0FBVyxDQUFDUixPQUFaLENBQW9CZSxTQUFwQixNQUFtQyxDQUFDLENBQTlELEVBQWlFO0FBQzdEO0FBQ0g7O0FBQ0QsUUFBSVMsTUFBTSxHQUFHYixnQkFBZSxDQUFDSixXQUFELEVBQWNDLFdBQWQsRUFBMkJRLGVBQWUsQ0FBQ0YsUUFBaEIsQ0FBeUI3SSxHQUF6QixDQUEzQixFQUEwREQsR0FBRyxDQUFDQyxHQUFELENBQTdELEVBQW9Fa0osT0FBcEUsRUFBNkVKLFNBQTdFLENBQTVCOztBQUNBLFFBQUlTLE1BQU0sQ0FBQ0YsVUFBWCxFQUF1QjtBQUNuQixhQUFPRSxNQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPO0FBQUVGLElBQUFBLFVBQVUsRUFBRTtBQUFkLEdBQVA7QUFDSDs7QUFDRCxTQUFTMUcsd0NBQVQsQ0FBaUQ2RyxPQUFqRCxFQUEwRDtBQUN0RCxNQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFyQixFQUF3QjtBQUFFQSxJQUFBQSxPQUFPLEdBQUcsRUFBVjtBQUFlOztBQUN6QyxNQUFJLEtBQUosRUFBVztBQUNQLFdBQU8sWUFBWTtBQUFFLGFBQU8sVUFBVWhNLElBQVYsRUFBZ0I7QUFBRSxlQUFPLFVBQVVpTSxNQUFWLEVBQWtCO0FBQUUsaUJBQU9qTSxJQUFJLENBQUNpTSxNQUFELENBQVg7QUFBc0IsU0FBakQ7QUFBb0QsT0FBN0U7QUFBZ0YsS0FBckc7QUFDSDs7QUFDRCxNQUFJakosRUFBRSxHQUFHZ0osT0FBTyxDQUFDbEIsV0FBakI7QUFBQSxNQUE4QkEsV0FBVyxHQUFHOUgsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQnFELG1CQUFoQixHQUFxQ3JELEVBQWpGO0FBQUEsTUFBcUZrSixZQUFZLEdBQUdGLE9BQU8sQ0FBQ0UsWUFBNUc7QUFBQSxNQUEwSEMsRUFBRSxHQUFHSCxPQUFPLENBQUNJLFNBQXZJO0FBQUEsTUFBa0pBLFNBQVMsR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixFQUFoQixHQUFxQkEsRUFBbkw7QUFBQSxNQUF1TEUsTUFBTSxHQUFHTCxPQUFPLENBQUNLLE1BQXhNO0FBQ0FILEVBQUFBLFlBQVksR0FBR0EsWUFBWSxJQUFJRyxNQUEvQjtBQUNBLE1BQUlDLEtBQUssR0FBR3pCLGlCQUFpQixDQUFDdEIsSUFBbEIsQ0FBdUIsSUFBdkIsRUFBNkJ1QixXQUE3QixFQUEwQ29CLFlBQTFDLENBQVo7QUFDQSxTQUFPLFVBQVVsSixFQUFWLEVBQWM7QUFDakIsUUFBSXVKLFFBQVEsR0FBR3ZKLEVBQUUsQ0FBQ3VKLFFBQWxCO0FBQ0EsUUFBSUMsS0FBSyxHQUFHRCxRQUFRLEVBQXBCO0FBQ0EsUUFBSUUsT0FBTyxHQUFHSCxLQUFLLENBQUNFLEtBQUQsQ0FBbkI7QUFDQSxRQUFJVCxNQUFKO0FBQ0EsV0FBTyxVQUFVL0wsSUFBVixFQUFnQjtBQUFFLGFBQU8sVUFBVWlNLE1BQVYsRUFBa0I7QUFDOUMsWUFBSVMsWUFBWSxHQUFHdkUsbUJBQW1CLENBQUNpRSxTQUFELEVBQVksbUNBQVosQ0FBdEM7QUFDQU0sUUFBQUEsWUFBWSxDQUFDbkUsV0FBYixDQUF5QixZQUFZO0FBQ2pDaUUsVUFBQUEsS0FBSyxHQUFHRCxRQUFRLEVBQWhCO0FBQ0FSLFVBQUFBLE1BQU0sR0FBR1UsT0FBTyxDQUFDdkIsZUFBUixFQUFUO0FBQ0F1QixVQUFBQSxPQUFPLEdBQUdILEtBQUssQ0FBQ0UsS0FBRCxDQUFmO0FBQ0E5QyxVQUFBQSxTQUFTLENBQUMsQ0FBQ3FDLE1BQU0sQ0FBQ0YsVUFBVCxFQUFxQixxRUFBcUVFLE1BQU0sQ0FBQ1osSUFBUCxJQUFlLEVBQXBGLElBQTBGLDJHQUEvRyxDQUFUO0FBQ0gsU0FMRDtBQU1BLFlBQUl3QixnQkFBZ0IsR0FBRzNNLElBQUksQ0FBQ2lNLE1BQUQsQ0FBM0I7QUFDQVMsUUFBQUEsWUFBWSxDQUFDbkUsV0FBYixDQUF5QixZQUFZO0FBQ2pDaUUsVUFBQUEsS0FBSyxHQUFHRCxRQUFRLEVBQWhCO0FBQ0FSLFVBQUFBLE1BQU0sR0FBR1UsT0FBTyxDQUFDdkIsZUFBUixFQUFUO0FBQ0F1QixVQUFBQSxPQUFPLEdBQUdILEtBQUssQ0FBQ0UsS0FBRCxDQUFmO0FBQ0FULFVBQUFBLE1BQU0sQ0FBQ0YsVUFBUCxJQUFxQm5DLFNBQVMsQ0FBQyxDQUFDcUMsTUFBTSxDQUFDRixVQUFULEVBQXFCLG9FQUFvRUUsTUFBTSxDQUFDWixJQUFQLElBQWUsRUFBbkYsSUFBeUYsc0RBQXpGLEdBQWtKckIsU0FBUyxDQUFDbUMsTUFBRCxDQUEzSixHQUFzSyxzRUFBM0wsQ0FBOUI7QUFDSCxTQUxEO0FBTUFTLFFBQUFBLFlBQVksQ0FBQzdELGNBQWI7QUFDQSxlQUFPOEQsZ0JBQVA7QUFDSCxPQWpCd0I7QUFpQnJCLEtBakJKO0FBa0JILEdBdkJEO0FBd0JIOztBQUVELFNBQVNwRyxRQUFULENBQWlCcUcsR0FBakIsRUFBc0I7QUFDbEIsTUFBSUMsSUFBSSxHQUFHLE9BQU9ELEdBQWxCO0FBQ0EsU0FBT0MsSUFBSSxLQUFLLFdBQVQsSUFBd0JELEdBQUcsS0FBSyxJQUFoQyxJQUF3Q0MsSUFBSSxLQUFLLFFBQWpELElBQTZEQSxJQUFJLEtBQUssU0FBdEUsSUFBbUZBLElBQUksS0FBSyxRQUE1RixJQUF3R25PLEtBQUssQ0FBQzRLLE9BQU4sQ0FBY3NELEdBQWQsQ0FBeEcsSUFBOEhwRyxjQUFhLENBQUNvRyxHQUFELENBQWxKO0FBQ0g7O0FBQ0QsU0FBU2hILHlCQUFULENBQWtDbkYsS0FBbEMsRUFBeUMwSyxJQUF6QyxFQUErQzJCLGNBQS9DLEVBQStEQyxVQUEvRCxFQUEyRWIsWUFBM0UsRUFBeUY7QUFDckYsTUFBSWYsSUFBSSxLQUFLLEtBQUssQ0FBbEIsRUFBcUI7QUFBRUEsSUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFBWTs7QUFDbkMsTUFBSTJCLGNBQWMsS0FBSyxLQUFLLENBQTVCLEVBQStCO0FBQUVBLElBQUFBLGNBQWMsR0FBR3ZHLFFBQWpCO0FBQTJCOztBQUM1RCxNQUFJMkYsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFBRUEsSUFBQUEsWUFBWSxHQUFHLEVBQWY7QUFBb0I7O0FBQ25ELE1BQUljLHVCQUFKOztBQUNBLE1BQUksQ0FBQ0YsY0FBYyxDQUFDck0sS0FBRCxDQUFuQixFQUE0QjtBQUN4QixXQUFPO0FBQ0h3TSxNQUFBQSxPQUFPLEVBQUU5QixJQUFJLElBQUksUUFEZDtBQUVIMUssTUFBQUEsS0FBSyxFQUFFQTtBQUZKLEtBQVA7QUFJSDs7QUFDRCxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssS0FBSyxJQUEzQyxFQUFpRDtBQUM3QyxXQUFPLEtBQVA7QUFDSDs7QUFDRCxNQUFJeU0sT0FBTyxHQUFHSCxVQUFVLElBQUksSUFBZCxHQUFxQkEsVUFBVSxDQUFDdE0sS0FBRCxDQUEvQixHQUF5Q2xDLE1BQU0sQ0FBQzJPLE9BQVAsQ0FBZXpNLEtBQWYsQ0FBdkQ7QUFDQSxNQUFJME0sZUFBZSxHQUFHakIsWUFBWSxDQUFDdkwsTUFBYixHQUFzQixDQUE1Qzs7QUFDQSxPQUFLLElBQUlvQyxFQUFFLEdBQUcsQ0FBVCxFQUFZcUssU0FBUyxHQUFHRixPQUE3QixFQUFzQ25LLEVBQUUsR0FBR3FLLFNBQVMsQ0FBQ3pNLE1BQXJELEVBQTZEb0MsRUFBRSxFQUEvRCxFQUFtRTtBQUMvRCxRQUFJQyxFQUFFLEdBQUdvSyxTQUFTLENBQUNySyxFQUFELENBQWxCO0FBQUEsUUFBd0JQLEdBQUcsR0FBR1EsRUFBRSxDQUFDLENBQUQsQ0FBaEM7QUFBQSxRQUFxQ3FLLFdBQVcsR0FBR3JLLEVBQUUsQ0FBQyxDQUFELENBQXJEO0FBQ0EsUUFBSXNLLFVBQVUsR0FBR25DLElBQUksR0FBR0EsSUFBSSxHQUFHLEdBQVAsR0FBYTNJLEdBQWhCLEdBQXNCQSxHQUEzQzs7QUFDQSxRQUFJMkssZUFBZSxJQUFJakIsWUFBWSxDQUFDM0IsT0FBYixDQUFxQitDLFVBQXJCLEtBQW9DLENBQTNELEVBQThEO0FBQzFEO0FBQ0g7O0FBQ0QsUUFBSSxDQUFDUixjQUFjLENBQUNPLFdBQUQsQ0FBbkIsRUFBa0M7QUFDOUIsYUFBTztBQUNISixRQUFBQSxPQUFPLEVBQUVLLFVBRE47QUFFSDdNLFFBQUFBLEtBQUssRUFBRTRNO0FBRkosT0FBUDtBQUlIOztBQUNELFFBQUksT0FBT0EsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNqQ0wsTUFBQUEsdUJBQXVCLEdBQUdwSCx5QkFBd0IsQ0FBQ3lILFdBQUQsRUFBY0MsVUFBZCxFQUEwQlIsY0FBMUIsRUFBMENDLFVBQTFDLEVBQXNEYixZQUF0RCxDQUFsRDs7QUFDQSxVQUFJYyx1QkFBSixFQUE2QjtBQUN6QixlQUFPQSx1QkFBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLEtBQVA7QUFDSDs7QUFDRCxTQUFTdkgsMkNBQVQsQ0FBb0R1RyxPQUFwRCxFQUE2RDtBQUN6RCxNQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFyQixFQUF3QjtBQUFFQSxJQUFBQSxPQUFPLEdBQUcsRUFBVjtBQUFlOztBQUN6QyxNQUFJLEtBQUosRUFBVztBQUNQLFdBQU8sWUFBWTtBQUFFLGFBQU8sVUFBVWhNLElBQVYsRUFBZ0I7QUFBRSxlQUFPLFVBQVVpTSxNQUFWLEVBQWtCO0FBQUUsaUJBQU9qTSxJQUFJLENBQUNpTSxNQUFELENBQVg7QUFBc0IsU0FBakQ7QUFBb0QsT0FBN0U7QUFBZ0YsS0FBckc7QUFDSDs7QUFDRCxNQUFJakosRUFBRSxHQUFHZ0osT0FBTyxDQUFDYyxjQUFqQjtBQUFBLE1BQWlDQSxjQUFjLEdBQUc5SixFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCdUQsUUFBaEIsR0FBMEJ2RCxFQUE1RTtBQUFBLE1BQWdGK0osVUFBVSxHQUFHZixPQUFPLENBQUNlLFVBQXJHO0FBQUEsTUFBaUhaLEVBQUUsR0FBR0gsT0FBTyxDQUFDdUIsY0FBOUg7QUFBQSxNQUE4SUEsY0FBYyxHQUFHcEIsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixFQUFoQixHQUFxQkEsRUFBcEw7QUFBQSxNQUF3THFCLEVBQUUsR0FBR3hCLE9BQU8sQ0FBQ3lCLGtCQUFyTTtBQUFBLE1BQXlOQSxrQkFBa0IsR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixDQUFDLFVBQUQsRUFBYSxvQkFBYixDQUFoQixHQUFxREEsRUFBblM7QUFBQSxNQUF1U0UsRUFBRSxHQUFHMUIsT0FBTyxDQUFDRSxZQUFwVDtBQUFBLE1BQWtVQSxZQUFZLEdBQUd3QixFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCLEVBQWhCLEdBQXFCQSxFQUF0VztBQUFBLE1BQTBXQyxFQUFFLEdBQUczQixPQUFPLENBQUNJLFNBQXZYO0FBQUEsTUFBa1lBLFNBQVMsR0FBR3VCLEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0IsRUFBaEIsR0FBcUJBLEVBQW5hO0FBQUEsTUFBdWFDLEVBQUUsR0FBRzVCLE9BQU8sQ0FBQzZCLFdBQXBiO0FBQUEsTUFBaWNBLFdBQVcsR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixLQUFoQixHQUF3QkEsRUFBdmU7QUFDQSxTQUFPLFVBQVVFLFFBQVYsRUFBb0I7QUFBRSxXQUFPLFVBQVU5TixJQUFWLEVBQWdCO0FBQUUsYUFBTyxVQUFVaU0sTUFBVixFQUFrQjtBQUMzRSxZQUFJc0IsY0FBYyxDQUFDNU0sTUFBZixJQUF5QjRNLGNBQWMsQ0FBQ2hELE9BQWYsQ0FBdUIwQixNQUFNLENBQUNZLElBQTlCLE1BQXdDLENBQUMsQ0FBdEUsRUFBeUU7QUFDckUsaUJBQU83TSxJQUFJLENBQUNpTSxNQUFELENBQVg7QUFDSDs7QUFDRCxZQUFJUyxZQUFZLEdBQUd2RSxtQkFBbUIsQ0FBQ2lFLFNBQUQsRUFBWSxzQ0FBWixDQUF0QztBQUNBTSxRQUFBQSxZQUFZLENBQUNuRSxXQUFiLENBQXlCLFlBQVk7QUFDakMsY0FBSXdGLCtCQUErQixHQUFHbkkseUJBQXdCLENBQUNxRyxNQUFELEVBQVMsRUFBVCxFQUFhYSxjQUFiLEVBQTZCQyxVQUE3QixFQUF5Q1Usa0JBQXpDLENBQTlEOztBQUNBLGNBQUlNLCtCQUFKLEVBQXFDO0FBQ2pDLGdCQUFJZCxPQUFPLEdBQUdjLCtCQUErQixDQUFDZCxPQUE5QztBQUFBLGdCQUF1RHhNLEtBQUssR0FBR3NOLCtCQUErQixDQUFDdE4sS0FBL0Y7QUFDQXFJLFlBQUFBLE9BQU8sQ0FBQ2tGLEtBQVIsQ0FBYyx1RUFBdUVmLE9BQXZFLEdBQWlGLFdBQS9GLEVBQTRHeE0sS0FBNUcsRUFBbUgsMERBQW5ILEVBQStLd0wsTUFBL0ssRUFBdUwsdUlBQXZMLEVBQWdVLDZIQUFoVTtBQUNIO0FBQ0osU0FORDtBQU9BLFlBQUlGLE1BQU0sR0FBRy9MLElBQUksQ0FBQ2lNLE1BQUQsQ0FBakI7O0FBQ0EsWUFBSSxDQUFDNEIsV0FBTCxFQUFrQjtBQUNkbkIsVUFBQUEsWUFBWSxDQUFDbkUsV0FBYixDQUF5QixZQUFZO0FBQ2pDLGdCQUFJaUUsS0FBSyxHQUFHc0IsUUFBUSxDQUFDdkIsUUFBVCxFQUFaOztBQUNBLGdCQUFJMEIsOEJBQThCLEdBQUdySSx5QkFBd0IsQ0FBQzRHLEtBQUQsRUFBUSxFQUFSLEVBQVlNLGNBQVosRUFBNEJDLFVBQTVCLEVBQXdDYixZQUF4QyxDQUE3RDs7QUFDQSxnQkFBSStCLDhCQUFKLEVBQW9DO0FBQ2hDLGtCQUFJaEIsT0FBTyxHQUFHZ0IsOEJBQThCLENBQUNoQixPQUE3QztBQUFBLGtCQUFzRHhNLEtBQUssR0FBR3dOLDhCQUE4QixDQUFDeE4sS0FBN0Y7QUFDQXFJLGNBQUFBLE9BQU8sQ0FBQ2tGLEtBQVIsQ0FBYyx1RUFBdUVmLE9BQXZFLEdBQWlGLFdBQS9GLEVBQTRHeE0sS0FBNUcsRUFBbUgsZ0VBQWdFd0wsTUFBTSxDQUFDWSxJQUF2RSxHQUE4RSxtSUFBak07QUFDSDtBQUNKLFdBUEQ7QUFRQUgsVUFBQUEsWUFBWSxDQUFDN0QsY0FBYjtBQUNIOztBQUNELGVBQU9rRCxNQUFQO0FBQ0gsT0F6QnFEO0FBeUJsRCxLQXpCeUI7QUF5QnRCLEdBekJQO0FBMEJIOztBQUVELFNBQVNtQyxTQUFULENBQW1CekosQ0FBbkIsRUFBc0I7QUFDbEIsU0FBTyxPQUFPQSxDQUFQLEtBQWEsU0FBcEI7QUFDSDs7QUFDRCxTQUFTMEoseUJBQVQsR0FBcUM7QUFDakMsU0FBTyxTQUFTQywyQkFBVCxDQUFxQ3BDLE9BQXJDLEVBQThDO0FBQ2pELFdBQU9sRyxxQkFBb0IsQ0FBQ2tHLE9BQUQsQ0FBM0I7QUFDSCxHQUZEO0FBR0g7O0FBQ0QsU0FBU2xHLHFCQUFULENBQThCa0csT0FBOUIsRUFBdUM7QUFDbkMsTUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFBRUEsSUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFBZTs7QUFDekMsTUFBSWhKLEVBQUUsR0FBR2dKLE9BQU8sQ0FBQ3FDLEtBQWpCO0FBQUEsTUFBd0JBLEtBQUssR0FBR3JMLEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0IsSUFBaEIsR0FBdUJBLEVBQXZEO0FBQUEsTUFBMkRtSixFQUFFLEdBQUdILE9BQU8sQ0FBQ3NDLGNBQXhFO0FBQUEsTUFBd0ZBLGNBQWMsR0FBR25DLEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0IsSUFBaEIsR0FBdUJBLEVBQWhJO0FBQUEsTUFBb0lxQixFQUFFLEdBQUd4QixPQUFPLENBQUN1QyxpQkFBako7QUFBQSxNQUFvS0EsaUJBQWlCLEdBQUdmLEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0IsSUFBaEIsR0FBdUJBLEVBQS9NO0FBQ0EsTUFBSWdCLGVBQWUsR0FBRyxJQUFJM0osZ0JBQUosRUFBdEI7O0FBQ0EsTUFBSXdKLEtBQUosRUFBVztBQUNQLFFBQUlILFNBQVMsQ0FBQ0csS0FBRCxDQUFiLEVBQXNCO0FBQ2xCRyxNQUFBQSxlQUFlLENBQUM1TixJQUFoQixDQUFxQnNILGtCQUFrQixDQUFDcEUsT0FBeEM7QUFDSCxLQUZELE1BR0s7QUFDRDBLLE1BQUFBLGVBQWUsQ0FBQzVOLElBQWhCLENBQXFCc0gsa0JBQWtCLENBQUNwRSxPQUFuQixDQUEyQjJLLGlCQUEzQixDQUE2Q0osS0FBSyxDQUFDSyxhQUFuRCxDQUFyQjtBQUNIO0FBQ0o7O0FBQ0QsTUFBSSxJQUFKLEVBQVU7QUFDTixRQUFJSixjQUFKLEVBQW9CO0FBQ2hCLFVBQUlLLGdCQUFnQixHQUFHLEVBQXZCOztBQUNBLFVBQUksQ0FBQ1QsU0FBUyxDQUFDSSxjQUFELENBQWQsRUFBZ0M7QUFDNUJLLFFBQUFBLGdCQUFnQixHQUFHTCxjQUFuQjtBQUNIOztBQUNERSxNQUFBQSxlQUFlLENBQUNJLE9BQWhCLENBQXdCekosd0NBQXVDLENBQUN3SixnQkFBRCxDQUEvRDtBQUNIOztBQUNELFFBQUlKLGlCQUFKLEVBQXVCO0FBQ25CLFVBQUlNLG1CQUFtQixHQUFHLEVBQTFCOztBQUNBLFVBQUksQ0FBQ1gsU0FBUyxDQUFDSyxpQkFBRCxDQUFkLEVBQW1DO0FBQy9CTSxRQUFBQSxtQkFBbUIsR0FBR04saUJBQXRCO0FBQ0g7O0FBQ0RDLE1BQUFBLGVBQWUsQ0FBQzVOLElBQWhCLENBQXFCNkUsMkNBQTBDLENBQUNvSixtQkFBRCxDQUEvRDtBQUNIO0FBQ0o7O0FBQ0QsU0FBT0wsZUFBUDtBQUNIOztBQUVELElBQUlNLGFBQWEsR0FBRyxLQUFwQjs7QUFDQSxTQUFTaEssZUFBVCxDQUF3QmtILE9BQXhCLEVBQWlDO0FBQzdCLE1BQUlvQywyQkFBMkIsR0FBR0QseUJBQXlCLEVBQTNEOztBQUNBLE1BQUluTCxFQUFFLEdBQUdnSixPQUFPLElBQUksRUFBcEI7QUFBQSxNQUF3QkcsRUFBRSxHQUFHbkosRUFBRSxDQUFDK0wsT0FBaEM7QUFBQSxNQUF5Q0EsT0FBTyxHQUFHNUMsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixLQUFLLENBQXJCLEdBQXlCQSxFQUE1RTtBQUFBLE1BQWdGcUIsRUFBRSxHQUFHeEssRUFBRSxDQUFDZ00sVUFBeEY7QUFBQSxNQUFvR0EsVUFBVSxHQUFHeEIsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQlksMkJBQTJCLEVBQTNDLEdBQWdEWixFQUFqSztBQUFBLE1BQXFLRSxFQUFFLEdBQUcxSyxFQUFFLENBQUNpTSxRQUE3SztBQUFBLE1BQXVMQSxRQUFRLEdBQUd2QixFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCLElBQWhCLEdBQXVCQSxFQUF6TjtBQUFBLE1BQTZOQyxFQUFFLEdBQUczSyxFQUFFLENBQUNrTSxjQUFyTztBQUFBLE1BQXFQQSxjQUFjLEdBQUd2QixFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCLEtBQUssQ0FBckIsR0FBeUJBLEVBQS9SO0FBQUEsTUFBbVNDLEVBQUUsR0FBRzVLLEVBQUUsQ0FBQ21NLFNBQTNTO0FBQUEsTUFBc1RBLFNBQVMsR0FBR3ZCLEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0IsS0FBSyxDQUFyQixHQUF5QkEsRUFBM1Y7O0FBQ0EsTUFBSXdCLFdBQUo7O0FBQ0EsTUFBSSxPQUFPTCxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DO0FBQy9CSyxJQUFBQSxXQUFXLEdBQUdMLE9BQWQ7QUFDSCxHQUZELE1BR0ssSUFBSXZJLGNBQWEsQ0FBQ3VJLE9BQUQsQ0FBakIsRUFBNEI7QUFDN0JLLElBQUFBLFdBQVcsR0FBRyxDQUFDLEdBQUc1SCxhQUFhLENBQUM2SCxlQUFsQixFQUFtQ04sT0FBbkMsQ0FBZDtBQUNILEdBRkksTUFHQTtBQUNELFVBQU0sSUFBSWxGLEtBQUosQ0FBVSwwSEFBVixDQUFOO0FBQ0g7O0FBQ0QsTUFBSXlGLGVBQWUsR0FBR04sVUFBdEI7O0FBQ0EsTUFBSSxPQUFPTSxlQUFQLEtBQTJCLFVBQS9CLEVBQTJDO0FBQ3ZDQSxJQUFBQSxlQUFlLEdBQUdBLGVBQWUsQ0FBQ2xCLDJCQUFELENBQWpDOztBQUNBLFFBQUksQ0FBQ1UsYUFBRCxJQUFrQixDQUFDcFEsS0FBSyxDQUFDNEssT0FBTixDQUFjZ0csZUFBZCxDQUF2QixFQUF1RDtBQUNuRCxZQUFNLElBQUl6RixLQUFKLENBQVUsbUZBQVYsQ0FBTjtBQUNIO0FBQ0o7O0FBQ0QsTUFBSSxDQUFDaUYsYUFBRCxJQUFrQlEsZUFBZSxDQUFDQyxJQUFoQixDQUFxQixVQUFVQyxJQUFWLEVBQWdCO0FBQUUsV0FBTyxPQUFPQSxJQUFQLEtBQWdCLFVBQXZCO0FBQW9DLEdBQTNFLENBQXRCLEVBQW9HO0FBQ2hHLFVBQU0sSUFBSTNGLEtBQUosQ0FBVSwrREFBVixDQUFOO0FBQ0g7O0FBQ0QsTUFBSTRGLGtCQUFrQixHQUFHLENBQUMsR0FBR2pJLGFBQWEsQ0FBQ2tJLGVBQWxCLEVBQW1DL0ssS0FBbkMsQ0FBeUMsS0FBSyxDQUE5QyxFQUFpRDJLLGVBQWpELENBQXpCO0FBQ0EsTUFBSUssWUFBWSxHQUFHbkksYUFBYSxDQUFDSyxPQUFqQzs7QUFDQSxNQUFJb0gsUUFBSixFQUFjO0FBQ1ZVLElBQUFBLFlBQVksR0FBR2pJLG1CQUFtQixDQUFDOUUsY0FBYyxDQUFDO0FBQzlDZ04sTUFBQUEsS0FBSyxFQUFFLENBQUNkO0FBRHNDLEtBQUQsRUFFOUMsT0FBT0csUUFBUCxLQUFvQixRQUFwQixJQUFnQ0EsUUFGYyxDQUFmLENBQWxDO0FBR0g7O0FBQ0QsTUFBSVksY0FBYyxHQUFHLENBQUNKLGtCQUFELENBQXJCOztBQUNBLE1BQUkvUSxLQUFLLENBQUM0SyxPQUFOLENBQWM2RixTQUFkLENBQUosRUFBOEI7QUFDMUJVLElBQUFBLGNBQWMsR0FBRy9PLGFBQWEsQ0FBQyxDQUFDMk8sa0JBQUQsQ0FBRCxFQUF1Qk4sU0FBdkIsQ0FBOUI7QUFDSCxHQUZELE1BR0ssSUFBSSxPQUFPQSxTQUFQLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ3RDVSxJQUFBQSxjQUFjLEdBQUdWLFNBQVMsQ0FBQ1UsY0FBRCxDQUExQjtBQUNIOztBQUNELE1BQUlDLGdCQUFnQixHQUFHSCxZQUFZLENBQUNoTCxLQUFiLENBQW1CLEtBQUssQ0FBeEIsRUFBMkJrTCxjQUEzQixDQUF2QjtBQUNBLFNBQU8sQ0FBQyxHQUFHckksYUFBYSxDQUFDdUksV0FBbEIsRUFBK0JYLFdBQS9CLEVBQTRDRixjQUE1QyxFQUE0RFksZ0JBQTVELENBQVA7QUFDSDs7QUFFRCxTQUFTL0ssYUFBVCxDQUFzQjhILElBQXRCLEVBQTRCbUQsYUFBNUIsRUFBMkM7QUFDdkMsV0FBU0MsYUFBVCxHQUF5QjtBQUNyQixRQUFJOUksSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJcEUsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQ29FLE1BQUFBLElBQUksQ0FBQ3BFLEVBQUQsQ0FBSixHQUFXcUUsU0FBUyxDQUFDckUsRUFBRCxDQUFwQjtBQUNIOztBQUNELFFBQUlpTixhQUFKLEVBQW1CO0FBQ2YsVUFBSUUsUUFBUSxHQUFHRixhQUFhLENBQUNyTCxLQUFkLENBQW9CLEtBQUssQ0FBekIsRUFBNEJ3QyxJQUE1QixDQUFmOztBQUNBLFVBQUksQ0FBQytJLFFBQUwsRUFBZTtBQUNYLGNBQU0sSUFBSXJHLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0g7O0FBQ0QsYUFBT2pILGNBQWMsQ0FBQ0EsY0FBYyxDQUFDO0FBQ2pDaUssUUFBQUEsSUFBSSxFQUFFQSxJQUQyQjtBQUVqQ3NELFFBQUFBLE9BQU8sRUFBRUQsUUFBUSxDQUFDQztBQUZlLE9BQUQsRUFHakMsVUFBVUQsUUFBVixJQUFzQjtBQUFFRSxRQUFBQSxJQUFJLEVBQUVGLFFBQVEsQ0FBQ0U7QUFBakIsT0FIVyxDQUFmLEVBRzhCLFdBQVdGLFFBQVgsSUFBdUI7QUFBRWxDLFFBQUFBLEtBQUssRUFBRWtDLFFBQVEsQ0FBQ2xDO0FBQWxCLE9BSHJELENBQXJCO0FBSUg7O0FBQ0QsV0FBTztBQUFFbkIsTUFBQUEsSUFBSSxFQUFFQSxJQUFSO0FBQWNzRCxNQUFBQSxPQUFPLEVBQUVoSixJQUFJLENBQUMsQ0FBRDtBQUEzQixLQUFQO0FBQ0g7O0FBQ0Q4SSxFQUFBQSxhQUFhLENBQUNJLFFBQWQsR0FBeUIsWUFBWTtBQUFFLFdBQU8sS0FBS3hELElBQVo7QUFBbUIsR0FBMUQ7O0FBQ0FvRCxFQUFBQSxhQUFhLENBQUNwRCxJQUFkLEdBQXFCQSxJQUFyQjs7QUFDQW9ELEVBQUFBLGFBQWEsQ0FBQ0ssS0FBZCxHQUFzQixVQUFVckUsTUFBVixFQUFrQjtBQUFFLFdBQU9BLE1BQU0sQ0FBQ1ksSUFBUCxLQUFnQkEsSUFBdkI7QUFBOEIsR0FBeEU7O0FBQ0EsU0FBT29ELGFBQVA7QUFDSDs7QUFDRCxTQUFTTSxLQUFULENBQWV0RSxNQUFmLEVBQXVCO0FBQ25CLFNBQU96RixjQUFhLENBQUN5RixNQUFELENBQWIsSUFBeUIsT0FBT0EsTUFBTSxDQUFDWSxJQUFkLEtBQXVCLFFBQWhELElBQTREdE8sTUFBTSxDQUFDOEwsSUFBUCxDQUFZNEIsTUFBWixFQUFvQnVFLEtBQXBCLENBQTBCQyxVQUExQixDQUFuRTtBQUNIOztBQUNELFNBQVNBLFVBQVQsQ0FBb0JqTyxHQUFwQixFQUF5QjtBQUNyQixTQUFPLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsT0FBcEIsRUFBNkIsTUFBN0IsRUFBcUMrSCxPQUFyQyxDQUE2Qy9ILEdBQTdDLElBQW9ELENBQUMsQ0FBNUQ7QUFDSDs7QUFDRCxTQUFTdUQsUUFBVCxDQUFpQmtLLGFBQWpCLEVBQWdDO0FBQzVCLFNBQU8sS0FBS0EsYUFBWjtBQUNIOztBQUVELElBQUlTLGFBQWEsR0FBRzlNLFVBQVUsQ0FBQ29ELE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBOUI7O0FBRUEsU0FBUzJKLDZCQUFULENBQXVDQyxlQUF2QyxFQUF3RDtBQUNwRCxNQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFDQSxNQUFJQyxjQUFjLEdBQUcsRUFBckI7QUFDQSxNQUFJQyxrQkFBSjtBQUNBLE1BQUlDLE9BQU8sR0FBRztBQUNWQyxJQUFBQSxPQUFPLEVBQUUsaUJBQVVDLG1CQUFWLEVBQStCbkMsT0FBL0IsRUFBd0M7QUFDN0MsVUFBSSxJQUFKLEVBQVU7QUFDTixZQUFJK0IsY0FBYyxDQUFDblEsTUFBZixHQUF3QixDQUE1QixFQUErQjtBQUMzQixnQkFBTSxJQUFJa0osS0FBSixDQUFVLDZFQUFWLENBQU47QUFDSDs7QUFDRCxZQUFJa0gsa0JBQUosRUFBd0I7QUFDcEIsZ0JBQU0sSUFBSWxILEtBQUosQ0FBVSxpRkFBVixDQUFOO0FBQ0g7QUFDSjs7QUFDRCxVQUFJZ0QsSUFBSSxHQUFHLE9BQU9xRSxtQkFBUCxLQUErQixRQUEvQixHQUEwQ0EsbUJBQTFDLEdBQWdFQSxtQkFBbUIsQ0FBQ3JFLElBQS9GOztBQUNBLFVBQUlBLElBQUksSUFBSWdFLFVBQVosRUFBd0I7QUFDcEIsY0FBTSxJQUFJaEgsS0FBSixDQUFVLHFFQUFWLENBQU47QUFDSDs7QUFDRGdILE1BQUFBLFVBQVUsQ0FBQ2hFLElBQUQsQ0FBVixHQUFtQmtDLE9BQW5CO0FBQ0EsYUFBT2lDLE9BQVA7QUFDSCxLQWhCUztBQWlCVkcsSUFBQUEsVUFBVSxFQUFFLG9CQUFVQyxPQUFWLEVBQW1CckMsT0FBbkIsRUFBNEI7QUFDcEMsVUFBSSxJQUFKLEVBQVU7QUFDTixZQUFJZ0Msa0JBQUosRUFBd0I7QUFDcEIsZ0JBQU0sSUFBSWxILEtBQUosQ0FBVSxvRkFBVixDQUFOO0FBQ0g7QUFDSjs7QUFDRGlILE1BQUFBLGNBQWMsQ0FBQ2xRLElBQWYsQ0FBb0I7QUFBRXdRLFFBQUFBLE9BQU8sRUFBRUEsT0FBWDtBQUFvQnJDLFFBQUFBLE9BQU8sRUFBRUE7QUFBN0IsT0FBcEI7QUFDQSxhQUFPaUMsT0FBUDtBQUNILEtBekJTO0FBMEJWSyxJQUFBQSxjQUFjLEVBQUUsd0JBQVV0QyxPQUFWLEVBQW1CO0FBQy9CLFVBQUksSUFBSixFQUFVO0FBQ04sWUFBSWdDLGtCQUFKLEVBQXdCO0FBQ3BCLGdCQUFNLElBQUlsSCxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUNIO0FBQ0o7O0FBQ0RrSCxNQUFBQSxrQkFBa0IsR0FBR2hDLE9BQXJCO0FBQ0EsYUFBT2lDLE9BQVA7QUFDSDtBQWxDUyxHQUFkO0FBb0NBSixFQUFBQSxlQUFlLENBQUNJLE9BQUQsQ0FBZjtBQUNBLFNBQU8sQ0FBQ0gsVUFBRCxFQUFhQyxjQUFiLEVBQTZCQyxrQkFBN0IsQ0FBUDtBQUNIOztBQUVELFNBQVN6TCxjQUFULENBQXVCZ00sWUFBdkIsRUFBcUNDLG9CQUFyQyxFQUEyRFQsY0FBM0QsRUFBMkVDLGtCQUEzRSxFQUErRjtBQUMzRixNQUFJRCxjQUFjLEtBQUssS0FBSyxDQUE1QixFQUErQjtBQUFFQSxJQUFBQSxjQUFjLEdBQUcsRUFBakI7QUFBc0I7O0FBQ3ZELE1BQUk5TixFQUFFLEdBQUcsT0FBT3VPLG9CQUFQLEtBQWdDLFVBQWhDLEdBQTZDWiw2QkFBNkIsQ0FBQ1ksb0JBQUQsQ0FBMUUsR0FBbUcsQ0FBQ0Esb0JBQUQsRUFBdUJULGNBQXZCLEVBQXVDQyxrQkFBdkMsQ0FBNUc7QUFBQSxNQUF3S0YsVUFBVSxHQUFHN04sRUFBRSxDQUFDLENBQUQsQ0FBdkw7QUFBQSxNQUE0THdPLG1CQUFtQixHQUFHeE8sRUFBRSxDQUFDLENBQUQsQ0FBcE47QUFBQSxNQUF5TnlPLHVCQUF1QixHQUFHek8sRUFBRSxDQUFDLENBQUQsQ0FBclA7O0FBQ0EsTUFBSTBPLGtCQUFrQixHQUFHLENBQUMsR0FBR2hCLGFBQWEsQ0FBQzVNLE9BQWxCLEVBQTJCd04sWUFBM0IsRUFBeUMsWUFBWSxDQUM3RSxDQUR3QixDQUF6QjtBQUVBLFNBQU8sVUFBVTlFLEtBQVYsRUFBaUJQLE1BQWpCLEVBQXlCO0FBQzVCLFFBQUlPLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLE1BQUFBLEtBQUssR0FBR2tGLGtCQUFSO0FBQTZCOztBQUNyRCxRQUFJQyxZQUFZLEdBQUc3USxhQUFhLENBQUMsQ0FDN0IrUCxVQUFVLENBQUM1RSxNQUFNLENBQUNZLElBQVIsQ0FEbUIsQ0FBRCxFQUU3QjJFLG1CQUFtQixDQUFDSSxNQUFwQixDQUEyQixVQUFVNU8sRUFBVixFQUFjO0FBQ3hDLFVBQUlvTyxPQUFPLEdBQUdwTyxFQUFFLENBQUNvTyxPQUFqQjtBQUNBLGFBQU9BLE9BQU8sQ0FBQ25GLE1BQUQsQ0FBZDtBQUNILEtBSEUsRUFHQTRGLEdBSEEsQ0FHSSxVQUFVN08sRUFBVixFQUFjO0FBQ2pCLFVBQUkrTCxPQUFPLEdBQUcvTCxFQUFFLENBQUMrTCxPQUFqQjtBQUNBLGFBQU9BLE9BQVA7QUFDSCxLQU5FLENBRjZCLENBQWhDOztBQVNBLFFBQUk0QyxZQUFZLENBQUNDLE1BQWIsQ0FBb0IsVUFBVUUsRUFBVixFQUFjO0FBQUUsYUFBTyxDQUFDLENBQUNBLEVBQVQ7QUFBYyxLQUFsRCxFQUFvRG5SLE1BQXBELEtBQStELENBQW5FLEVBQXNFO0FBQ2xFZ1IsTUFBQUEsWUFBWSxHQUFHLENBQUNGLHVCQUFELENBQWY7QUFDSDs7QUFDRCxXQUFPRSxZQUFZLENBQUNJLE1BQWIsQ0FBb0IsVUFBVUMsYUFBVixFQUF5QkMsV0FBekIsRUFBc0M7QUFDN0QsVUFBSUEsV0FBSixFQUFpQjtBQUNiLFlBQUksQ0FBQyxHQUFHdkIsYUFBYSxDQUFDdkssT0FBbEIsRUFBMkI2TCxhQUEzQixDQUFKLEVBQStDO0FBQzNDLGNBQUlFLEtBQUssR0FBR0YsYUFBWjtBQUNBLGNBQUlqRyxNQUFNLEdBQUdrRyxXQUFXLENBQUNDLEtBQUQsRUFBUWpHLE1BQVIsQ0FBeEI7O0FBQ0EsY0FBSSxPQUFPRixNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQy9CLG1CQUFPaUcsYUFBUDtBQUNIOztBQUNELGlCQUFPakcsTUFBUDtBQUNILFNBUEQsTUFRSyxJQUFJLENBQUMsQ0FBQyxHQUFHMkUsYUFBYSxDQUFDeUIsV0FBbEIsRUFBK0JILGFBQS9CLENBQUwsRUFBb0Q7QUFDckQsY0FBSWpHLE1BQU0sR0FBR2tHLFdBQVcsQ0FBQ0QsYUFBRCxFQUFnQi9GLE1BQWhCLENBQXhCOztBQUNBLGNBQUksT0FBT0YsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUMvQixnQkFBSWlHLGFBQWEsS0FBSyxJQUF0QixFQUE0QjtBQUN4QixxQkFBT0EsYUFBUDtBQUNIOztBQUNELGtCQUFNbkksS0FBSyxDQUFDLG1FQUFELENBQVg7QUFDSDs7QUFDRCxpQkFBT2tDLE1BQVA7QUFDSCxTQVRJLE1BVUE7QUFDRCxpQkFBTyxDQUFDLEdBQUcyRSxhQUFhLENBQUM1TSxPQUFsQixFQUEyQmtPLGFBQTNCLEVBQTBDLFVBQVVFLEtBQVYsRUFBaUI7QUFDOUQsbUJBQU9ELFdBQVcsQ0FBQ0MsS0FBRCxFQUFRakcsTUFBUixDQUFsQjtBQUNILFdBRk0sQ0FBUDtBQUdIO0FBQ0o7O0FBQ0QsYUFBTytGLGFBQVA7QUFDSCxLQTNCTSxFQTJCSnhGLEtBM0JJLENBQVA7QUE0QkgsR0ExQ0Q7QUEyQ0g7O0FBRUQsU0FBUzRGLFFBQVQsQ0FBa0I5SCxLQUFsQixFQUF5QitILFNBQXpCLEVBQW9DO0FBQ2hDLFNBQU8vSCxLQUFLLEdBQUcsR0FBUixHQUFjK0gsU0FBckI7QUFDSDs7QUFDRCxTQUFTM00sWUFBVCxDQUFxQnNHLE9BQXJCLEVBQThCO0FBQzFCLE1BQUkxSSxJQUFJLEdBQUcwSSxPQUFPLENBQUMxSSxJQUFuQjtBQUFBLE1BQXlCZ08sWUFBWSxHQUFHdEYsT0FBTyxDQUFDc0YsWUFBaEQ7O0FBQ0EsTUFBSSxDQUFDaE8sSUFBTCxFQUFXO0FBQ1AsVUFBTSxJQUFJdUcsS0FBSixDQUFVLDZDQUFWLENBQU47QUFDSDs7QUFDRCxNQUFJeUksUUFBUSxHQUFHdEcsT0FBTyxDQUFDc0csUUFBUixJQUFvQixFQUFuQzs7QUFDQSxNQUFJdFAsRUFBRSxHQUFHLE9BQU9nSixPQUFPLENBQUN1RyxhQUFmLEtBQWlDLFVBQWpDLEdBQThDNUIsNkJBQTZCLENBQUMzRSxPQUFPLENBQUN1RyxhQUFULENBQTNFLEdBQXFHLENBQUN2RyxPQUFPLENBQUN1RyxhQUFULENBQTlHO0FBQUEsTUFBdUlwRyxFQUFFLEdBQUduSixFQUFFLENBQUMsQ0FBRCxDQUE5STtBQUFBLE1BQW1KdVAsYUFBYSxHQUFHcEcsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixFQUFoQixHQUFxQkEsRUFBeEw7QUFBQSxNQUE0THFCLEVBQUUsR0FBR3hLLEVBQUUsQ0FBQyxDQUFELENBQW5NO0FBQUEsTUFBd004TixjQUFjLEdBQUd0RCxFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCLEVBQWhCLEdBQXFCQSxFQUE5TztBQUFBLE1BQWtQRSxFQUFFLEdBQUcxSyxFQUFFLENBQUMsQ0FBRCxDQUF6UDtBQUFBLE1BQThQK04sa0JBQWtCLEdBQUdyRCxFQUFFLEtBQUssS0FBSyxDQUFaLEdBQWdCLEtBQUssQ0FBckIsR0FBeUJBLEVBQTVTOztBQUNBLE1BQUk4RSxZQUFZLEdBQUdqVSxNQUFNLENBQUM4TCxJQUFQLENBQVlpSSxRQUFaLENBQW5CO0FBQ0EsTUFBSUcsdUJBQXVCLEdBQUcsRUFBOUI7QUFDQSxNQUFJQyx1QkFBdUIsR0FBRyxFQUE5QjtBQUNBLE1BQUlDLGNBQWMsR0FBRyxFQUFyQjtBQUNBSCxFQUFBQSxZQUFZLENBQUNJLE9BQWIsQ0FBcUIsVUFBVUMsV0FBVixFQUF1QjtBQUN4QyxRQUFJQyx1QkFBdUIsR0FBR1IsUUFBUSxDQUFDTyxXQUFELENBQXRDO0FBQ0EsUUFBSWhHLElBQUksR0FBR3VGLFFBQVEsQ0FBQzlPLElBQUQsRUFBT3VQLFdBQVAsQ0FBbkI7QUFDQSxRQUFJWixXQUFKO0FBQ0EsUUFBSWMsZUFBSjs7QUFDQSxRQUFJLGFBQWFELHVCQUFqQixFQUEwQztBQUN0Q2IsTUFBQUEsV0FBVyxHQUFHYSx1QkFBdUIsQ0FBQy9ELE9BQXRDO0FBQ0FnRSxNQUFBQSxlQUFlLEdBQUdELHVCQUF1QixDQUFDRSxPQUExQztBQUNILEtBSEQsTUFJSztBQUNEZixNQUFBQSxXQUFXLEdBQUdhLHVCQUFkO0FBQ0g7O0FBQ0RMLElBQUFBLHVCQUF1QixDQUFDSSxXQUFELENBQXZCLEdBQXVDWixXQUF2QztBQUNBUyxJQUFBQSx1QkFBdUIsQ0FBQzdGLElBQUQsQ0FBdkIsR0FBZ0NvRixXQUFoQztBQUNBVSxJQUFBQSxjQUFjLENBQUNFLFdBQUQsQ0FBZCxHQUE4QkUsZUFBZSxHQUFHaE8sYUFBWSxDQUFDOEgsSUFBRCxFQUFPa0csZUFBUCxDQUFmLEdBQXlDaE8sYUFBWSxDQUFDOEgsSUFBRCxDQUFsRztBQUNILEdBZkQ7O0FBZ0JBLE1BQUlvRyxpQkFBaUIsR0FBR3JRLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLEVBQUQsRUFBSzJQLGFBQUwsQ0FBZixFQUFvQ0csdUJBQXBDLENBQXRDOztBQUNBLE1BQUkzRCxPQUFPLEdBQUd6SixjQUFhLENBQUNnTSxZQUFELEVBQWUyQixpQkFBZixFQUFrQ25DLGNBQWxDLEVBQWtEQyxrQkFBbEQsQ0FBM0I7O0FBQ0EsU0FBTztBQUNIek4sSUFBQUEsSUFBSSxFQUFFQSxJQURIO0FBRUh5TCxJQUFBQSxPQUFPLEVBQUVBLE9BRk47QUFHSG1FLElBQUFBLE9BQU8sRUFBRVAsY0FITjtBQUlIaEIsSUFBQUEsWUFBWSxFQUFFYztBQUpYLEdBQVA7QUFNSDs7QUFFRCxTQUFTVSxxQkFBVCxHQUFpQztBQUM3QixTQUFPO0FBQ0hDLElBQUFBLEdBQUcsRUFBRSxFQURGO0FBRUhDLElBQUFBLFFBQVEsRUFBRTtBQUZQLEdBQVA7QUFJSDs7QUFDRCxTQUFTQyx5QkFBVCxHQUFxQztBQUNqQyxXQUFTQyxlQUFULENBQXlCQyxlQUF6QixFQUEwQztBQUN0QyxRQUFJQSxlQUFlLEtBQUssS0FBSyxDQUE3QixFQUFnQztBQUFFQSxNQUFBQSxlQUFlLEdBQUcsRUFBbEI7QUFBdUI7O0FBQ3pELFdBQU8sdUJBQWNMLHFCQUFxQixFQUFuQyxFQUF1Q0ssZUFBdkMsQ0FBUDtBQUNIOztBQUNELFNBQU87QUFBRUQsSUFBQUEsZUFBZSxFQUFFQTtBQUFuQixHQUFQO0FBQ0g7O0FBRUQsU0FBU0Usc0JBQVQsR0FBa0M7QUFDOUIsV0FBU0MsWUFBVCxDQUFzQkMsV0FBdEIsRUFBbUM7QUFDL0IsUUFBSUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVXBILEtBQVYsRUFBaUI7QUFBRSxhQUFPQSxLQUFLLENBQUM0RyxHQUFiO0FBQW1CLEtBQXREOztBQUNBLFFBQUlTLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBVXJILEtBQVYsRUFBaUI7QUFBRSxhQUFPQSxLQUFLLENBQUM2RyxRQUFiO0FBQXdCLEtBQWhFOztBQUNBLFFBQUlTLFNBQVMsR0FBRzdPLHdCQUF1QixDQUFDMk8sU0FBRCxFQUFZQyxjQUFaLEVBQTRCLFVBQVVULEdBQVYsRUFBZUMsUUFBZixFQUF5QjtBQUFFLGFBQU9ELEdBQUcsQ0FBQ3ZCLEdBQUosQ0FBUSxVQUFVa0MsRUFBVixFQUFjO0FBQUUsZUFBT1YsUUFBUSxDQUFDVSxFQUFELENBQWY7QUFBc0IsT0FBOUMsQ0FBUDtBQUF5RCxLQUFoSCxDQUF2Qzs7QUFDQSxRQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVelUsQ0FBVixFQUFhd1UsRUFBYixFQUFpQjtBQUFFLGFBQU9BLEVBQVA7QUFBWSxLQUE5Qzs7QUFDQSxRQUFJRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVWixRQUFWLEVBQW9CVSxFQUFwQixFQUF3QjtBQUFFLGFBQU9WLFFBQVEsQ0FBQ1UsRUFBRCxDQUFmO0FBQXNCLEtBQWpFOztBQUNBLFFBQUlHLFdBQVcsR0FBR2pQLHdCQUF1QixDQUFDMk8sU0FBRCxFQUFZLFVBQVVSLEdBQVYsRUFBZTtBQUFFLGFBQU9BLEdBQUcsQ0FBQ3pTLE1BQVg7QUFBb0IsS0FBakQsQ0FBekM7O0FBQ0EsUUFBSSxDQUFDZ1QsV0FBTCxFQUFrQjtBQUNkLGFBQU87QUFDSEMsUUFBQUEsU0FBUyxFQUFFQSxTQURSO0FBRUhDLFFBQUFBLGNBQWMsRUFBRUEsY0FGYjtBQUdIQyxRQUFBQSxTQUFTLEVBQUVBLFNBSFI7QUFJSEksUUFBQUEsV0FBVyxFQUFFQSxXQUpWO0FBS0hELFFBQUFBLFVBQVUsRUFBRWhQLHdCQUF1QixDQUFDNE8sY0FBRCxFQUFpQkcsUUFBakIsRUFBMkJDLFVBQTNCO0FBTGhDLE9BQVA7QUFPSDs7QUFDRCxRQUFJRSx3QkFBd0IsR0FBR2xQLHdCQUF1QixDQUFDME8sV0FBRCxFQUFjRSxjQUFkLENBQXREOztBQUNBLFdBQU87QUFDSEQsTUFBQUEsU0FBUyxFQUFFM08sd0JBQXVCLENBQUMwTyxXQUFELEVBQWNDLFNBQWQsQ0FEL0I7QUFFSEMsTUFBQUEsY0FBYyxFQUFFTSx3QkFGYjtBQUdITCxNQUFBQSxTQUFTLEVBQUU3Tyx3QkFBdUIsQ0FBQzBPLFdBQUQsRUFBY0csU0FBZCxDQUgvQjtBQUlISSxNQUFBQSxXQUFXLEVBQUVqUCx3QkFBdUIsQ0FBQzBPLFdBQUQsRUFBY08sV0FBZCxDQUpqQztBQUtIRCxNQUFBQSxVQUFVLEVBQUVoUCx3QkFBdUIsQ0FBQ2tQLHdCQUFELEVBQTJCSCxRQUEzQixFQUFxQ0MsVUFBckM7QUFMaEMsS0FBUDtBQU9IOztBQUNELFNBQU87QUFBRVAsSUFBQUEsWUFBWSxFQUFFQTtBQUFoQixHQUFQO0FBQ0g7O0FBRUQsSUFBSVUsYUFBYSxHQUFHeFEsVUFBVSxDQUFDb0QsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUE5Qjs7QUFDQSxTQUFTcU4saUNBQVQsQ0FBMkNDLE9BQTNDLEVBQW9EO0FBQ2hELE1BQUlDLFFBQVEsR0FBR0MsbUJBQW1CLENBQUMsVUFBVWpWLENBQVYsRUFBYWlOLEtBQWIsRUFBb0I7QUFBRSxXQUFPOEgsT0FBTyxDQUFDOUgsS0FBRCxDQUFkO0FBQXdCLEdBQS9DLENBQWxDO0FBQ0EsU0FBTyxTQUFTaUksU0FBVCxDQUFtQmpJLEtBQW5CLEVBQTBCO0FBQzdCLFdBQU8rSCxRQUFRLENBQUMvSCxLQUFELEVBQVEsS0FBSyxDQUFiLENBQWY7QUFDSCxHQUZEO0FBR0g7O0FBQ0QsU0FBU2dJLG1CQUFULENBQTZCRixPQUE3QixFQUFzQztBQUNsQyxTQUFPLFNBQVNHLFNBQVQsQ0FBbUJqSSxLQUFuQixFQUEwQmtJLEdBQTFCLEVBQStCO0FBQ2xDLGFBQVNDLHVCQUFULENBQWlDQyxJQUFqQyxFQUF1QztBQUNuQyxhQUFPckUsS0FBSyxDQUFDcUUsSUFBRCxDQUFaO0FBQ0g7O0FBQ0QsUUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVTNDLEtBQVYsRUFBaUI7QUFDOUIsVUFBSXlDLHVCQUF1QixDQUFDRCxHQUFELENBQTNCLEVBQWtDO0FBQzlCSixRQUFBQSxPQUFPLENBQUNJLEdBQUcsQ0FBQ3ZFLE9BQUwsRUFBYytCLEtBQWQsQ0FBUDtBQUNILE9BRkQsTUFHSztBQUNEb0MsUUFBQUEsT0FBTyxDQUFDSSxHQUFELEVBQU14QyxLQUFOLENBQVA7QUFDSDtBQUNKLEtBUEQ7O0FBUUEsUUFBSSxDQUFDLEdBQUdrQyxhQUFhLENBQUNqTyxPQUFsQixFQUEyQnFHLEtBQTNCLENBQUosRUFBdUM7QUFDbkNxSSxNQUFBQSxVQUFVLENBQUNySSxLQUFELENBQVY7QUFDQSxhQUFPQSxLQUFQO0FBQ0gsS0FIRCxNQUlLO0FBQ0QsYUFBTyxDQUFDLEdBQUc0SCxhQUFhLENBQUN0USxPQUFsQixFQUEyQjBJLEtBQTNCLEVBQWtDcUksVUFBbEMsQ0FBUDtBQUNIO0FBQ0osR0FuQkQ7QUFvQkg7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JmLFFBQS9CLEVBQXlDO0FBQ3JDLE1BQUl4UixHQUFHLEdBQUd3UixRQUFRLENBQUNlLE1BQUQsQ0FBbEI7O0FBQ0EsTUFBSXZTLEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0FBQ2hCc0csSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsd0VBQWIsRUFBdUYsaUVBQXZGLEVBQTBKLDZCQUExSixFQUF5TGdNLE1BQXpMLEVBQWlNLGdDQUFqTSxFQUFtT2YsUUFBUSxDQUFDM0QsUUFBVCxFQUFuTztBQUNIOztBQUNELFNBQU83TixHQUFQO0FBQ0g7O0FBQ0QsU0FBU3dTLG1CQUFULENBQTZCM0IsUUFBN0IsRUFBdUM7QUFDbkMsTUFBSSxDQUFDM1UsS0FBSyxDQUFDNEssT0FBTixDQUFjK0osUUFBZCxDQUFMLEVBQThCO0FBQzFCQSxJQUFBQSxRQUFRLEdBQUc5VSxNQUFNLENBQUMwVyxNQUFQLENBQWM1QixRQUFkLENBQVg7QUFDSDs7QUFDRCxTQUFPQSxRQUFQO0FBQ0g7O0FBQ0QsU0FBUzZCLHlCQUFULENBQW1DQyxXQUFuQyxFQUFnRG5CLFFBQWhELEVBQTBEeEgsS0FBMUQsRUFBaUU7QUFDN0QySSxFQUFBQSxXQUFXLEdBQUdILG1CQUFtQixDQUFDRyxXQUFELENBQWpDO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFDQSxPQUFLLElBQUl0UyxFQUFFLEdBQUcsQ0FBVCxFQUFZdVMsYUFBYSxHQUFHSCxXQUFqQyxFQUE4Q3BTLEVBQUUsR0FBR3VTLGFBQWEsQ0FBQzNVLE1BQWpFLEVBQXlFb0MsRUFBRSxFQUEzRSxFQUErRTtBQUMzRSxRQUFJZ1MsTUFBTSxHQUFHTyxhQUFhLENBQUN2UyxFQUFELENBQTFCO0FBQ0EsUUFBSWdSLEVBQUUsR0FBR2UsYUFBYSxDQUFDQyxNQUFELEVBQVNmLFFBQVQsQ0FBdEI7O0FBQ0EsUUFBSUQsRUFBRSxJQUFJdkgsS0FBSyxDQUFDNkcsUUFBaEIsRUFBMEI7QUFDdEJnQyxNQUFBQSxPQUFPLENBQUN6VSxJQUFSLENBQWE7QUFBRW1ULFFBQUFBLEVBQUUsRUFBRUEsRUFBTjtBQUFVd0IsUUFBQUEsT0FBTyxFQUFFUjtBQUFuQixPQUFiO0FBQ0gsS0FGRCxNQUdLO0FBQ0RLLE1BQUFBLEtBQUssQ0FBQ3hVLElBQU4sQ0FBV21VLE1BQVg7QUFDSDtBQUNKOztBQUNELFNBQU8sQ0FBQ0ssS0FBRCxFQUFRQyxPQUFSLENBQVA7QUFDSDs7QUFFRCxTQUFTRywwQkFBVCxDQUFvQ3hCLFFBQXBDLEVBQThDO0FBQzFDLFdBQVN5QixhQUFULENBQXVCVixNQUF2QixFQUErQnZJLEtBQS9CLEVBQXNDO0FBQ2xDLFFBQUloSyxHQUFHLEdBQUdzUyxhQUFhLENBQUNDLE1BQUQsRUFBU2YsUUFBVCxDQUF2Qjs7QUFDQSxRQUFJeFIsR0FBRyxJQUFJZ0ssS0FBSyxDQUFDNkcsUUFBakIsRUFBMkI7QUFDdkI7QUFDSDs7QUFDRDdHLElBQUFBLEtBQUssQ0FBQzRHLEdBQU4sQ0FBVXhTLElBQVYsQ0FBZTRCLEdBQWY7QUFDQWdLLElBQUFBLEtBQUssQ0FBQzZHLFFBQU4sQ0FBZTdRLEdBQWYsSUFBc0J1UyxNQUF0QjtBQUNIOztBQUNELFdBQVNXLGNBQVQsQ0FBd0JQLFdBQXhCLEVBQXFDM0ksS0FBckMsRUFBNEM7QUFDeEMySSxJQUFBQSxXQUFXLEdBQUdILG1CQUFtQixDQUFDRyxXQUFELENBQWpDOztBQUNBLFNBQUssSUFBSXBTLEVBQUUsR0FBRyxDQUFULEVBQVk0UyxhQUFhLEdBQUdSLFdBQWpDLEVBQThDcFMsRUFBRSxHQUFHNFMsYUFBYSxDQUFDaFYsTUFBakUsRUFBeUVvQyxFQUFFLEVBQTNFLEVBQStFO0FBQzNFLFVBQUlnUyxNQUFNLEdBQUdZLGFBQWEsQ0FBQzVTLEVBQUQsQ0FBMUI7QUFDQTBTLE1BQUFBLGFBQWEsQ0FBQ1YsTUFBRCxFQUFTdkksS0FBVCxDQUFiO0FBQ0g7QUFDSjs7QUFDRCxXQUFTb0osYUFBVCxDQUF1QmIsTUFBdkIsRUFBK0J2SSxLQUEvQixFQUFzQztBQUNsQyxRQUFJaEssR0FBRyxHQUFHc1MsYUFBYSxDQUFDQyxNQUFELEVBQVNmLFFBQVQsQ0FBdkI7O0FBQ0EsUUFBSSxFQUFFeFIsR0FBRyxJQUFJZ0ssS0FBSyxDQUFDNkcsUUFBZixDQUFKLEVBQThCO0FBQzFCN0csTUFBQUEsS0FBSyxDQUFDNEcsR0FBTixDQUFVeFMsSUFBVixDQUFlNEIsR0FBZjtBQUNIOztBQUNEZ0ssSUFBQUEsS0FBSyxDQUFDNkcsUUFBTixDQUFlN1EsR0FBZixJQUFzQnVTLE1BQXRCO0FBQ0g7O0FBQ0QsV0FBU2MsY0FBVCxDQUF3QlYsV0FBeEIsRUFBcUMzSSxLQUFyQyxFQUE0QztBQUN4QzJJLElBQUFBLFdBQVcsR0FBR0gsbUJBQW1CLENBQUNHLFdBQUQsQ0FBakM7O0FBQ0EsU0FBSyxJQUFJcFMsRUFBRSxHQUFHLENBQVQsRUFBWStTLGFBQWEsR0FBR1gsV0FBakMsRUFBOENwUyxFQUFFLEdBQUcrUyxhQUFhLENBQUNuVixNQUFqRSxFQUF5RW9DLEVBQUUsRUFBM0UsRUFBK0U7QUFDM0UsVUFBSWdTLE1BQU0sR0FBR2UsYUFBYSxDQUFDL1MsRUFBRCxDQUExQjtBQUNBNlMsTUFBQUEsYUFBYSxDQUFDYixNQUFELEVBQVN2SSxLQUFULENBQWI7QUFDSDtBQUNKOztBQUNELFdBQVN1SixhQUFULENBQXVCWixXQUF2QixFQUFvQzNJLEtBQXBDLEVBQTJDO0FBQ3ZDMkksSUFBQUEsV0FBVyxHQUFHSCxtQkFBbUIsQ0FBQ0csV0FBRCxDQUFqQztBQUNBM0ksSUFBQUEsS0FBSyxDQUFDNEcsR0FBTixHQUFZLEVBQVo7QUFDQTVHLElBQUFBLEtBQUssQ0FBQzZHLFFBQU4sR0FBaUIsRUFBakI7QUFDQXFDLElBQUFBLGNBQWMsQ0FBQ1AsV0FBRCxFQUFjM0ksS0FBZCxDQUFkO0FBQ0g7O0FBQ0QsV0FBU3dKLGdCQUFULENBQTBCeFQsR0FBMUIsRUFBK0JnSyxLQUEvQixFQUFzQztBQUNsQyxXQUFPeUosaUJBQWlCLENBQUMsQ0FBQ3pULEdBQUQsQ0FBRCxFQUFRZ0ssS0FBUixDQUF4QjtBQUNIOztBQUNELFdBQVN5SixpQkFBVCxDQUEyQjVMLElBQTNCLEVBQWlDbUMsS0FBakMsRUFBd0M7QUFDcEMsUUFBSTBKLFNBQVMsR0FBRyxLQUFoQjtBQUNBN0wsSUFBQUEsSUFBSSxDQUFDdUksT0FBTCxDQUFhLFVBQVVwUSxHQUFWLEVBQWU7QUFDeEIsVUFBSUEsR0FBRyxJQUFJZ0ssS0FBSyxDQUFDNkcsUUFBakIsRUFBMkI7QUFDdkIsZUFBTzdHLEtBQUssQ0FBQzZHLFFBQU4sQ0FBZTdRLEdBQWYsQ0FBUDtBQUNBMFQsUUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDSDtBQUNKLEtBTEQ7O0FBTUEsUUFBSUEsU0FBSixFQUFlO0FBQ1gxSixNQUFBQSxLQUFLLENBQUM0RyxHQUFOLEdBQVk1RyxLQUFLLENBQUM0RyxHQUFOLENBQVV4QixNQUFWLENBQWlCLFVBQVVtQyxFQUFWLEVBQWM7QUFBRSxlQUFPQSxFQUFFLElBQUl2SCxLQUFLLENBQUM2RyxRQUFuQjtBQUE4QixPQUEvRCxDQUFaO0FBQ0g7QUFDSjs7QUFDRCxXQUFTOEMsZ0JBQVQsQ0FBMEIzSixLQUExQixFQUFpQztBQUM3QiwyQkFBY0EsS0FBZCxFQUFxQjtBQUNqQjRHLE1BQUFBLEdBQUcsRUFBRSxFQURZO0FBRWpCQyxNQUFBQSxRQUFRLEVBQUU7QUFGTyxLQUFyQjtBQUlIOztBQUNELFdBQVMrQyxVQUFULENBQW9CL0wsSUFBcEIsRUFBMEJnTSxNQUExQixFQUFrQzdKLEtBQWxDLEVBQXlDO0FBQ3JDLFFBQUk4SixTQUFTLEdBQUc5SixLQUFLLENBQUM2RyxRQUFOLENBQWVnRCxNQUFNLENBQUN0QyxFQUF0QixDQUFoQjtBQUNBLFFBQUlzQixPQUFPLEdBQUcsdUJBQWMsRUFBZCxFQUFrQmlCLFNBQWxCLEVBQTZCRCxNQUFNLENBQUNkLE9BQXBDLENBQWQ7QUFDQSxRQUFJZ0IsTUFBTSxHQUFHekIsYUFBYSxDQUFDTyxPQUFELEVBQVVyQixRQUFWLENBQTFCO0FBQ0EsUUFBSXdDLFNBQVMsR0FBR0QsTUFBTSxLQUFLRixNQUFNLENBQUN0QyxFQUFsQzs7QUFDQSxRQUFJeUMsU0FBSixFQUFlO0FBQ1huTSxNQUFBQSxJQUFJLENBQUNnTSxNQUFNLENBQUN0QyxFQUFSLENBQUosR0FBa0J3QyxNQUFsQjtBQUNBLGFBQU8vSixLQUFLLENBQUM2RyxRQUFOLENBQWVnRCxNQUFNLENBQUN0QyxFQUF0QixDQUFQO0FBQ0g7O0FBQ0R2SCxJQUFBQSxLQUFLLENBQUM2RyxRQUFOLENBQWVrRCxNQUFmLElBQXlCbEIsT0FBekI7QUFDQSxXQUFPbUIsU0FBUDtBQUNIOztBQUNELFdBQVNDLGdCQUFULENBQTBCSixNQUExQixFQUFrQzdKLEtBQWxDLEVBQXlDO0FBQ3JDLFdBQU9rSyxpQkFBaUIsQ0FBQyxDQUFDTCxNQUFELENBQUQsRUFBVzdKLEtBQVgsQ0FBeEI7QUFDSDs7QUFDRCxXQUFTa0ssaUJBQVQsQ0FBMkJDLE9BQTNCLEVBQW9DbkssS0FBcEMsRUFBMkM7QUFDdkMsUUFBSW9LLE9BQU8sR0FBRyxFQUFkO0FBQ0EsUUFBSUMsZ0JBQWdCLEdBQUcsRUFBdkI7QUFDQUYsSUFBQUEsT0FBTyxDQUFDL0QsT0FBUixDQUFnQixVQUFVeUQsTUFBVixFQUFrQjtBQUM5QixVQUFJQSxNQUFNLENBQUN0QyxFQUFQLElBQWF2SCxLQUFLLENBQUM2RyxRQUF2QixFQUFpQztBQUM3QndELFFBQUFBLGdCQUFnQixDQUFDUixNQUFNLENBQUN0QyxFQUFSLENBQWhCLEdBQThCO0FBQzFCQSxVQUFBQSxFQUFFLEVBQUVzQyxNQUFNLENBQUN0QyxFQURlO0FBRTFCd0IsVUFBQUEsT0FBTyxFQUFFM1MsY0FBYyxDQUFDQSxjQUFjLENBQUMsRUFBRCxFQUFLaVUsZ0JBQWdCLENBQUNSLE1BQU0sQ0FBQ3RDLEVBQVIsQ0FBaEIsR0FBOEI4QyxnQkFBZ0IsQ0FBQ1IsTUFBTSxDQUFDdEMsRUFBUixDQUFoQixDQUE0QndCLE9BQTFELEdBQW9FLElBQXpFLENBQWYsRUFBK0ZjLE1BQU0sQ0FBQ2QsT0FBdEc7QUFGRyxTQUE5QjtBQUlIO0FBQ0osS0FQRDtBQVFBb0IsSUFBQUEsT0FBTyxHQUFHcFksTUFBTSxDQUFDMFcsTUFBUCxDQUFjNEIsZ0JBQWQsQ0FBVjtBQUNBLFFBQUlDLGlCQUFpQixHQUFHSCxPQUFPLENBQUNoVyxNQUFSLEdBQWlCLENBQXpDOztBQUNBLFFBQUltVyxpQkFBSixFQUF1QjtBQUNuQixVQUFJQyxZQUFZLEdBQUdKLE9BQU8sQ0FBQy9FLE1BQVIsQ0FBZSxVQUFVeUUsTUFBVixFQUFrQjtBQUFFLGVBQU9ELFVBQVUsQ0FBQ1EsT0FBRCxFQUFVUCxNQUFWLEVBQWtCN0osS0FBbEIsQ0FBakI7QUFBNEMsT0FBL0UsRUFBaUY3TCxNQUFqRixHQUEwRixDQUE3Rzs7QUFDQSxVQUFJb1csWUFBSixFQUFrQjtBQUNkdkssUUFBQUEsS0FBSyxDQUFDNEcsR0FBTixHQUFZNUcsS0FBSyxDQUFDNEcsR0FBTixDQUFVdkIsR0FBVixDQUFjLFVBQVVrQyxFQUFWLEVBQWM7QUFBRSxpQkFBTzZDLE9BQU8sQ0FBQzdDLEVBQUQsQ0FBUCxJQUFlQSxFQUF0QjtBQUEyQixTQUF6RCxDQUFaO0FBQ0g7QUFDSjtBQUNKOztBQUNELFdBQVNpRCxnQkFBVCxDQUEwQmpDLE1BQTFCLEVBQWtDdkksS0FBbEMsRUFBeUM7QUFDckMsV0FBT3lLLGlCQUFpQixDQUFDLENBQUNsQyxNQUFELENBQUQsRUFBV3ZJLEtBQVgsQ0FBeEI7QUFDSDs7QUFDRCxXQUFTeUssaUJBQVQsQ0FBMkI5QixXQUEzQixFQUF3QzNJLEtBQXhDLEVBQStDO0FBQzNDLFFBQUl4SixFQUFFLEdBQUdrUyx5QkFBeUIsQ0FBQ0MsV0FBRCxFQUFjbkIsUUFBZCxFQUF3QnhILEtBQXhCLENBQWxDO0FBQUEsUUFBa0U0SSxLQUFLLEdBQUdwUyxFQUFFLENBQUMsQ0FBRCxDQUE1RTtBQUFBLFFBQWlGcVMsT0FBTyxHQUFHclMsRUFBRSxDQUFDLENBQUQsQ0FBN0Y7O0FBQ0EwVCxJQUFBQSxpQkFBaUIsQ0FBQ3JCLE9BQUQsRUFBVTdJLEtBQVYsQ0FBakI7QUFDQWtKLElBQUFBLGNBQWMsQ0FBQ04sS0FBRCxFQUFRNUksS0FBUixDQUFkO0FBQ0g7O0FBQ0QsU0FBTztBQUNIMEssSUFBQUEsU0FBUyxFQUFFN0MsaUNBQWlDLENBQUM4QixnQkFBRCxDQUR6QztBQUVIZ0IsSUFBQUEsTUFBTSxFQUFFM0MsbUJBQW1CLENBQUNpQixhQUFELENBRnhCO0FBR0gyQixJQUFBQSxPQUFPLEVBQUU1QyxtQkFBbUIsQ0FBQ2tCLGNBQUQsQ0FIekI7QUFJSDJCLElBQUFBLE1BQU0sRUFBRTdDLG1CQUFtQixDQUFDb0IsYUFBRCxDQUp4QjtBQUtIMEIsSUFBQUEsT0FBTyxFQUFFOUMsbUJBQW1CLENBQUNxQixjQUFELENBTHpCO0FBTUgwQixJQUFBQSxNQUFNLEVBQUUvQyxtQkFBbUIsQ0FBQ3VCLGFBQUQsQ0FOeEI7QUFPSHlCLElBQUFBLFNBQVMsRUFBRWhELG1CQUFtQixDQUFDaUMsZ0JBQUQsQ0FQM0I7QUFRSGdCLElBQUFBLFVBQVUsRUFBRWpELG1CQUFtQixDQUFDa0MsaUJBQUQsQ0FSNUI7QUFTSGdCLElBQUFBLFNBQVMsRUFBRWxELG1CQUFtQixDQUFDd0MsZ0JBQUQsQ0FUM0I7QUFVSFcsSUFBQUEsVUFBVSxFQUFFbkQsbUJBQW1CLENBQUN5QyxpQkFBRCxDQVY1QjtBQVdIVyxJQUFBQSxTQUFTLEVBQUVwRCxtQkFBbUIsQ0FBQ3dCLGdCQUFELENBWDNCO0FBWUg2QixJQUFBQSxVQUFVLEVBQUVyRCxtQkFBbUIsQ0FBQ3lCLGlCQUFEO0FBWjVCLEdBQVA7QUFjSDs7QUFFRCxTQUFTNkIsd0JBQVQsQ0FBa0M5RCxRQUFsQyxFQUE0QytELElBQTVDLEVBQWtEO0FBQzlDLE1BQUkvVSxFQUFFLEdBQUd3UywwQkFBMEIsQ0FBQ3hCLFFBQUQsQ0FBbkM7QUFBQSxNQUErQzRELFNBQVMsR0FBRzVVLEVBQUUsQ0FBQzRVLFNBQTlEO0FBQUEsTUFBeUVDLFVBQVUsR0FBRzdVLEVBQUUsQ0FBQzZVLFVBQXpGO0FBQUEsTUFBcUdYLFNBQVMsR0FBR2xVLEVBQUUsQ0FBQ2tVLFNBQXBIOztBQUNBLFdBQVN6QixhQUFULENBQXVCVixNQUF2QixFQUErQnZJLEtBQS9CLEVBQXNDO0FBQ2xDLFdBQU9rSixjQUFjLENBQUMsQ0FBQ1gsTUFBRCxDQUFELEVBQVd2SSxLQUFYLENBQXJCO0FBQ0g7O0FBQ0QsV0FBU2tKLGNBQVQsQ0FBd0JQLFdBQXhCLEVBQXFDM0ksS0FBckMsRUFBNEM7QUFDeEMySSxJQUFBQSxXQUFXLEdBQUdILG1CQUFtQixDQUFDRyxXQUFELENBQWpDO0FBQ0EsUUFBSTZDLE1BQU0sR0FBRzdDLFdBQVcsQ0FBQ3ZELE1BQVosQ0FBbUIsVUFBVXFHLEtBQVYsRUFBaUI7QUFBRSxhQUFPLEVBQUVuRCxhQUFhLENBQUNtRCxLQUFELEVBQVFqRSxRQUFSLENBQWIsSUFBa0N4SCxLQUFLLENBQUM2RyxRQUExQyxDQUFQO0FBQTZELEtBQW5HLENBQWI7O0FBQ0EsUUFBSTJFLE1BQU0sQ0FBQ3JYLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDckJ1WCxNQUFBQSxLQUFLLENBQUNGLE1BQUQsRUFBU3hMLEtBQVQsQ0FBTDtBQUNIO0FBQ0o7O0FBQ0QsV0FBU29KLGFBQVQsQ0FBdUJiLE1BQXZCLEVBQStCdkksS0FBL0IsRUFBc0M7QUFDbEMsV0FBT3FKLGNBQWMsQ0FBQyxDQUFDZCxNQUFELENBQUQsRUFBV3ZJLEtBQVgsQ0FBckI7QUFDSDs7QUFDRCxXQUFTcUosY0FBVCxDQUF3QlYsV0FBeEIsRUFBcUMzSSxLQUFyQyxFQUE0QztBQUN4QzJJLElBQUFBLFdBQVcsR0FBR0gsbUJBQW1CLENBQUNHLFdBQUQsQ0FBakM7O0FBQ0EsUUFBSUEsV0FBVyxDQUFDeFUsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUMxQnVYLE1BQUFBLEtBQUssQ0FBQy9DLFdBQUQsRUFBYzNJLEtBQWQsQ0FBTDtBQUNIO0FBQ0o7O0FBQ0QsV0FBU3VKLGFBQVQsQ0FBdUJaLFdBQXZCLEVBQW9DM0ksS0FBcEMsRUFBMkM7QUFDdkMySSxJQUFBQSxXQUFXLEdBQUdILG1CQUFtQixDQUFDRyxXQUFELENBQWpDO0FBQ0EzSSxJQUFBQSxLQUFLLENBQUM2RyxRQUFOLEdBQWlCLEVBQWpCO0FBQ0E3RyxJQUFBQSxLQUFLLENBQUM0RyxHQUFOLEdBQVksRUFBWjtBQUNBc0MsSUFBQUEsY0FBYyxDQUFDUCxXQUFELEVBQWMzSSxLQUFkLENBQWQ7QUFDSDs7QUFDRCxXQUFTaUssZ0JBQVQsQ0FBMEJKLE1BQTFCLEVBQWtDN0osS0FBbEMsRUFBeUM7QUFDckMsV0FBT2tLLGlCQUFpQixDQUFDLENBQUNMLE1BQUQsQ0FBRCxFQUFXN0osS0FBWCxDQUF4QjtBQUNIOztBQUNELFdBQVMyTCxnQkFBVCxDQUEwQkgsTUFBMUIsRUFBa0MzQixNQUFsQyxFQUEwQzdKLEtBQTFDLEVBQWlEO0FBQzdDLFFBQUksRUFBRTZKLE1BQU0sQ0FBQ3RDLEVBQVAsSUFBYXZILEtBQUssQ0FBQzZHLFFBQXJCLENBQUosRUFBb0M7QUFDaEMsYUFBTyxLQUFQO0FBQ0g7O0FBQ0QsUUFBSWlELFNBQVMsR0FBRzlKLEtBQUssQ0FBQzZHLFFBQU4sQ0FBZWdELE1BQU0sQ0FBQ3RDLEVBQXRCLENBQWhCO0FBQ0EsUUFBSXNCLE9BQU8sR0FBRyx1QkFBYyxFQUFkLEVBQWtCaUIsU0FBbEIsRUFBNkJELE1BQU0sQ0FBQ2QsT0FBcEMsQ0FBZDtBQUNBLFFBQUlnQixNQUFNLEdBQUd6QixhQUFhLENBQUNPLE9BQUQsRUFBVXJCLFFBQVYsQ0FBMUI7QUFDQSxXQUFPeEgsS0FBSyxDQUFDNkcsUUFBTixDQUFlZ0QsTUFBTSxDQUFDdEMsRUFBdEIsQ0FBUDtBQUNBaUUsSUFBQUEsTUFBTSxDQUFDcFgsSUFBUCxDQUFZeVUsT0FBWjtBQUNBLFdBQU9rQixNQUFNLEtBQUtGLE1BQU0sQ0FBQ3RDLEVBQXpCO0FBQ0g7O0FBQ0QsV0FBUzJDLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQ25LLEtBQXBDLEVBQTJDO0FBQ3ZDLFFBQUl3TCxNQUFNLEdBQUcsRUFBYjtBQUNBckIsSUFBQUEsT0FBTyxDQUFDL0QsT0FBUixDQUFnQixVQUFVeUQsTUFBVixFQUFrQjtBQUFFLGFBQU84QixnQkFBZ0IsQ0FBQ0gsTUFBRCxFQUFTM0IsTUFBVCxFQUFpQjdKLEtBQWpCLENBQXZCO0FBQWlELEtBQXJGOztBQUNBLFFBQUl3TCxNQUFNLENBQUNyWCxNQUFQLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCdVgsTUFBQUEsS0FBSyxDQUFDRixNQUFELEVBQVN4TCxLQUFULENBQUw7QUFDSDtBQUNKOztBQUNELFdBQVN3SyxnQkFBVCxDQUEwQmpDLE1BQTFCLEVBQWtDdkksS0FBbEMsRUFBeUM7QUFDckMsV0FBT3lLLGlCQUFpQixDQUFDLENBQUNsQyxNQUFELENBQUQsRUFBV3ZJLEtBQVgsQ0FBeEI7QUFDSDs7QUFDRCxXQUFTeUssaUJBQVQsQ0FBMkI5QixXQUEzQixFQUF3QzNJLEtBQXhDLEVBQStDO0FBQzNDLFFBQUl4SixFQUFFLEdBQUdrUyx5QkFBeUIsQ0FBQ0MsV0FBRCxFQUFjbkIsUUFBZCxFQUF3QnhILEtBQXhCLENBQWxDO0FBQUEsUUFBa0U0SSxLQUFLLEdBQUdwUyxFQUFFLENBQUMsQ0FBRCxDQUE1RTtBQUFBLFFBQWlGcVMsT0FBTyxHQUFHclMsRUFBRSxDQUFDLENBQUQsQ0FBN0Y7O0FBQ0EwVCxJQUFBQSxpQkFBaUIsQ0FBQ3JCLE9BQUQsRUFBVTdJLEtBQVYsQ0FBakI7QUFDQWtKLElBQUFBLGNBQWMsQ0FBQ04sS0FBRCxFQUFRNUksS0FBUixDQUFkO0FBQ0g7O0FBQ0QsV0FBUzRMLGNBQVQsQ0FBd0J2VixDQUF4QixFQUEyQnZFLENBQTNCLEVBQThCO0FBQzFCLFFBQUl1RSxDQUFDLENBQUNsQyxNQUFGLEtBQWFyQyxDQUFDLENBQUNxQyxNQUFuQixFQUEyQjtBQUN2QixhQUFPLEtBQVA7QUFDSDs7QUFDRCxTQUFLLElBQUlNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc0QixDQUFDLENBQUNsQyxNQUFOLElBQWdCTSxDQUFDLEdBQUczQyxDQUFDLENBQUNxQyxNQUF0QyxFQUE4Q00sQ0FBQyxFQUEvQyxFQUFtRDtBQUMvQyxVQUFJNEIsQ0FBQyxDQUFDNUIsQ0FBRCxDQUFELEtBQVMzQyxDQUFDLENBQUMyQyxDQUFELENBQWQsRUFBbUI7QUFDZjtBQUNIOztBQUNELGFBQU8sS0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNIOztBQUNELFdBQVNpWCxLQUFULENBQWVGLE1BQWYsRUFBdUJ4TCxLQUF2QixFQUE4QjtBQUMxQndMLElBQUFBLE1BQU0sQ0FBQ3BGLE9BQVAsQ0FBZSxVQUFVcUYsS0FBVixFQUFpQjtBQUM1QnpMLE1BQUFBLEtBQUssQ0FBQzZHLFFBQU4sQ0FBZVcsUUFBUSxDQUFDaUUsS0FBRCxDQUF2QixJQUFrQ0EsS0FBbEM7QUFDSCxLQUZEO0FBR0EsUUFBSUksV0FBVyxHQUFHOVosTUFBTSxDQUFDMFcsTUFBUCxDQUFjekksS0FBSyxDQUFDNkcsUUFBcEIsQ0FBbEI7QUFDQWdGLElBQUFBLFdBQVcsQ0FBQ04sSUFBWixDQUFpQkEsSUFBakI7QUFDQSxRQUFJTyxZQUFZLEdBQUdELFdBQVcsQ0FBQ3hHLEdBQVosQ0FBZ0JtQyxRQUFoQixDQUFuQjtBQUNBLFFBQUlaLEdBQUcsR0FBRzVHLEtBQUssQ0FBQzRHLEdBQWhCOztBQUNBLFFBQUksQ0FBQ2dGLGNBQWMsQ0FBQ2hGLEdBQUQsRUFBTWtGLFlBQU4sQ0FBbkIsRUFBd0M7QUFDcEM5TCxNQUFBQSxLQUFLLENBQUM0RyxHQUFOLEdBQVlrRixZQUFaO0FBQ0g7QUFDSjs7QUFDRCxTQUFPO0FBQ0hWLElBQUFBLFNBQVMsRUFBRUEsU0FEUjtBQUVIQyxJQUFBQSxVQUFVLEVBQUVBLFVBRlQ7QUFHSFgsSUFBQUEsU0FBUyxFQUFFQSxTQUhSO0FBSUhDLElBQUFBLE1BQU0sRUFBRTNDLG1CQUFtQixDQUFDaUIsYUFBRCxDQUp4QjtBQUtIK0IsSUFBQUEsU0FBUyxFQUFFaEQsbUJBQW1CLENBQUNpQyxnQkFBRCxDQUwzQjtBQU1IaUIsSUFBQUEsU0FBUyxFQUFFbEQsbUJBQW1CLENBQUN3QyxnQkFBRCxDQU4zQjtBQU9ISyxJQUFBQSxNQUFNLEVBQUU3QyxtQkFBbUIsQ0FBQ29CLGFBQUQsQ0FQeEI7QUFRSDBCLElBQUFBLE9BQU8sRUFBRTlDLG1CQUFtQixDQUFDcUIsY0FBRCxDQVJ6QjtBQVNIMEIsSUFBQUEsTUFBTSxFQUFFL0MsbUJBQW1CLENBQUN1QixhQUFELENBVHhCO0FBVUhxQixJQUFBQSxPQUFPLEVBQUU1QyxtQkFBbUIsQ0FBQ2tCLGNBQUQsQ0FWekI7QUFXSCtCLElBQUFBLFVBQVUsRUFBRWpELG1CQUFtQixDQUFDa0MsaUJBQUQsQ0FYNUI7QUFZSGlCLElBQUFBLFVBQVUsRUFBRW5ELG1CQUFtQixDQUFDeUMsaUJBQUQ7QUFaNUIsR0FBUDtBQWNIOztBQUVELFNBQVMvUixvQkFBVCxDQUE2QjhHLE9BQTdCLEVBQXNDO0FBQ2xDLE1BQUlBLE9BQU8sS0FBSyxLQUFLLENBQXJCLEVBQXdCO0FBQUVBLElBQUFBLE9BQU8sR0FBRyxFQUFWO0FBQWU7O0FBQ3pDLE1BQUloSixFQUFFLEdBQUdKLGNBQWMsQ0FBQztBQUNwQjJWLElBQUFBLFlBQVksRUFBRSxLQURNO0FBRXBCdkUsSUFBQUEsUUFBUSxFQUFFLGtCQUFVd0UsUUFBVixFQUFvQjtBQUFFLGFBQU9BLFFBQVEsQ0FBQ3pFLEVBQWhCO0FBQXFCO0FBRmpDLEdBQUQsRUFHcEIvSCxPQUhvQixDQUF2QjtBQUFBLE1BR2FnSSxRQUFRLEdBQUdoUixFQUFFLENBQUNnUixRQUgzQjtBQUFBLE1BR3FDdUUsWUFBWSxHQUFHdlYsRUFBRSxDQUFDdVYsWUFIdkQ7O0FBSUEsTUFBSUUsWUFBWSxHQUFHbkYseUJBQXlCLEVBQTVDO0FBQ0EsTUFBSW9GLGdCQUFnQixHQUFHakYsc0JBQXNCLEVBQTdDO0FBQ0EsTUFBSWtGLFlBQVksR0FBR0osWUFBWSxHQUFHVCx3QkFBd0IsQ0FBQzlELFFBQUQsRUFBV3VFLFlBQVgsQ0FBM0IsR0FBc0QvQywwQkFBMEIsQ0FBQ3hCLFFBQUQsQ0FBL0c7QUFDQSxTQUFPcFIsY0FBYyxDQUFDQSxjQUFjLENBQUNBLGNBQWMsQ0FBQztBQUNoRG9SLElBQUFBLFFBQVEsRUFBRUEsUUFEc0M7QUFFaER1RSxJQUFBQSxZQUFZLEVBQUVBO0FBRmtDLEdBQUQsRUFHaERFLFlBSGdELENBQWYsRUFHbEJDLGdCQUhrQixDQUFmLEVBR2dCQyxZQUhoQixDQUFyQjtBQUlIOztBQUVELElBQUlDLFdBQVcsR0FBRyxrRUFBbEI7O0FBQ0EsSUFBSWhTLE9BQU0sR0FBRyxTQUFUQSxPQUFTLENBQVVpUyxJQUFWLEVBQWdCO0FBQ3pCLE1BQUlBLElBQUksS0FBSyxLQUFLLENBQWxCLEVBQXFCO0FBQUVBLElBQUFBLElBQUksR0FBRyxFQUFQO0FBQVk7O0FBQ25DLE1BQUk5RSxFQUFFLEdBQUcsRUFBVDtBQUNBLE1BQUk5UyxDQUFDLEdBQUc0WCxJQUFSOztBQUNBLFNBQU81WCxDQUFDLEVBQVIsRUFBWTtBQUNSOFMsSUFBQUEsRUFBRSxJQUFJNkUsV0FBVyxDQUFDRSxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBdEIsQ0FBakI7QUFDSDs7QUFDRCxTQUFPaEYsRUFBUDtBQUNILENBUkQ7O0FBVUEsSUFBSWlGLGdCQUFnQixHQUFHLENBQ25CLE1BRG1CLEVBRW5CLFNBRm1CLEVBR25CLE9BSG1CLEVBSW5CLE1BSm1CLENBQXZCOztBQU1BLElBQUlDLGVBQWUsR0FBa0IsWUFBWTtBQUM3QyxXQUFTQSxlQUFULENBQXlCOUksT0FBekIsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3BDLFNBQUtELE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNIOztBQUNELFNBQU82SSxlQUFQO0FBQ0gsQ0FOb0MsRUFBckM7O0FBT0EsSUFBSUMsZUFBZSxHQUFrQixZQUFZO0FBQzdDLFdBQVNBLGVBQVQsQ0FBeUIvSSxPQUF6QixFQUFrQ0MsSUFBbEMsRUFBd0M7QUFDcEMsU0FBS0QsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7O0FBQ0QsU0FBTzhJLGVBQVA7QUFDSCxDQU5vQyxFQUFyQzs7QUFPQSxJQUFJdlMsbUJBQWtCLEdBQUcsU0FBckJBLG1CQUFxQixDQUFVbEcsS0FBVixFQUFpQjtBQUN0QyxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssS0FBSyxJQUEzQyxFQUFpRDtBQUM3QyxRQUFJMFksV0FBVyxHQUFHLEVBQWxCOztBQUNBLFNBQUssSUFBSXBXLEVBQUUsR0FBRyxDQUFULEVBQVlxVyxrQkFBa0IsR0FBR0osZ0JBQXRDLEVBQXdEalcsRUFBRSxHQUFHcVcsa0JBQWtCLENBQUN6WSxNQUFoRixFQUF3Rm9DLEVBQUUsRUFBMUYsRUFBOEY7QUFDMUYsVUFBSXNXLFFBQVEsR0FBR0Qsa0JBQWtCLENBQUNyVyxFQUFELENBQWpDOztBQUNBLFVBQUksT0FBT3RDLEtBQUssQ0FBQzRZLFFBQUQsQ0FBWixLQUEyQixRQUEvQixFQUF5QztBQUNyQ0YsUUFBQUEsV0FBVyxDQUFDRSxRQUFELENBQVgsR0FBd0I1WSxLQUFLLENBQUM0WSxRQUFELENBQTdCO0FBQ0g7QUFDSjs7QUFDRCxXQUFPRixXQUFQO0FBQ0g7O0FBQ0QsU0FBTztBQUFFdlAsSUFBQUEsT0FBTyxFQUFFNUssTUFBTSxDQUFDeUIsS0FBRDtBQUFqQixHQUFQO0FBQ0gsQ0FaRDs7QUFhQSxTQUFTdUUsaUJBQVQsQ0FBMEJzVSxVQUExQixFQUFzQ0MsY0FBdEMsRUFBc0R2TixPQUF0RCxFQUErRDtBQUMzRCxNQUFJMUgsU0FBUyxHQUFHUyxhQUFZLENBQUN1VSxVQUFVLEdBQUcsWUFBZCxFQUE0QixVQUFVbkosT0FBVixFQUFtQnFKLFNBQW5CLEVBQThCOUUsR0FBOUIsRUFBbUN0RSxJQUFuQyxFQUF5QztBQUFFLFdBQVE7QUFDdkdELE1BQUFBLE9BQU8sRUFBRUEsT0FEOEY7QUFFdkdDLE1BQUFBLElBQUksRUFBRW5OLGFBQWEsQ0FBQ0wsY0FBYyxDQUFDLEVBQUQsRUFBS3dOLElBQUksSUFBSSxFQUFiLENBQWYsRUFBaUM7QUFDaERzRSxRQUFBQSxHQUFHLEVBQUVBLEdBRDJDO0FBRWhEOEUsUUFBQUEsU0FBUyxFQUFFQSxTQUZxQztBQUdoREMsUUFBQUEsYUFBYSxFQUFFO0FBSGlDLE9BQWpDO0FBRm9GLEtBQVI7QUFPOUYsR0FQdUIsQ0FBNUI7O0FBUUEsTUFBSUMsT0FBTyxHQUFHM1UsYUFBWSxDQUFDdVUsVUFBVSxHQUFHLFVBQWQsRUFBMEIsVUFBVUUsU0FBVixFQUFxQjlFLEdBQXJCLEVBQTBCdEUsSUFBMUIsRUFBZ0M7QUFBRSxXQUFRO0FBQzFGRCxNQUFBQSxPQUFPLEVBQUUsS0FBSyxDQUQ0RTtBQUUxRkMsTUFBQUEsSUFBSSxFQUFFbk4sYUFBYSxDQUFDTCxjQUFjLENBQUMsRUFBRCxFQUFLd04sSUFBSSxJQUFJLEVBQWIsQ0FBZixFQUFpQztBQUNoRHNFLFFBQUFBLEdBQUcsRUFBRUEsR0FEMkM7QUFFaEQ4RSxRQUFBQSxTQUFTLEVBQUVBLFNBRnFDO0FBR2hEQyxRQUFBQSxhQUFhLEVBQUU7QUFIaUMsT0FBakM7QUFGdUUsS0FBUjtBQU9qRixHQVBxQixDQUExQjs7QUFRQSxNQUFJbFYsUUFBUSxHQUFHUSxhQUFZLENBQUN1VSxVQUFVLEdBQUcsV0FBZCxFQUEyQixVQUFVdEwsS0FBVixFQUFpQndMLFNBQWpCLEVBQTRCOUUsR0FBNUIsRUFBaUN2RSxPQUFqQyxFQUEwQ0MsSUFBMUMsRUFBZ0Q7QUFBRSxXQUFRO0FBQzVHRCxNQUFBQSxPQUFPLEVBQUVBLE9BRG1HO0FBRTVHbkMsTUFBQUEsS0FBSyxFQUFFLENBQUNoQyxPQUFPLElBQUlBLE9BQU8sQ0FBQzJOLGNBQW5CLElBQXFDaFQsbUJBQXRDLEVBQTBEcUgsS0FBSyxJQUFJLFVBQW5FLENBRnFHO0FBRzVHb0MsTUFBQUEsSUFBSSxFQUFFbk4sYUFBYSxDQUFDTCxjQUFjLENBQUMsRUFBRCxFQUFLd04sSUFBSSxJQUFJLEVBQWIsQ0FBZixFQUFpQztBQUNoRHNFLFFBQUFBLEdBQUcsRUFBRUEsR0FEMkM7QUFFaEQ4RSxRQUFBQSxTQUFTLEVBQUVBLFNBRnFDO0FBR2hESSxRQUFBQSxpQkFBaUIsRUFBRSxDQUFDLENBQUN6SixPQUgyQjtBQUloRHNKLFFBQUFBLGFBQWEsRUFBRSxVQUppQztBQUtoREksUUFBQUEsT0FBTyxFQUFFLENBQUM3TCxLQUFLLElBQUksSUFBVCxHQUFnQixLQUFLLENBQXJCLEdBQXlCQSxLQUFLLENBQUMxSyxJQUFoQyxNQUEwQyxZQUxIO0FBTWhEcUcsUUFBQUEsU0FBUyxFQUFFLENBQUNxRSxLQUFLLElBQUksSUFBVCxHQUFnQixLQUFLLENBQXJCLEdBQXlCQSxLQUFLLENBQUMxSyxJQUFoQyxNQUEwQztBQU5MLE9BQWpDO0FBSHlGLEtBQVI7QUFXbkcsR0FYc0IsQ0FBM0I7O0FBWUEsTUFBSXdXLGdCQUFnQixHQUFHLEtBQXZCO0FBQ0EsTUFBSUMsRUFBRSxHQUFHLE9BQU9DLGVBQVAsS0FBMkIsV0FBM0IsR0FBeUNBLGVBQXpDLEdBQTBFLFlBQVk7QUFDM0YsYUFBU0MsT0FBVCxHQUFtQjtBQUNmLFdBQUtDLE1BQUwsR0FBYztBQUNWTCxRQUFBQSxPQUFPLEVBQUUsS0FEQztBQUVWTSxRQUFBQSxnQkFBZ0IsRUFBRSw0QkFBWSxDQUM3QixDQUhTO0FBSVZDLFFBQUFBLGFBQWEsRUFBRSx5QkFBWTtBQUN2QixpQkFBTyxLQUFQO0FBQ0gsU0FOUztBQU9WQyxRQUFBQSxPQUFPLEVBQUUsbUJBQVksQ0FDcEIsQ0FSUztBQVNWQyxRQUFBQSxtQkFBbUIsRUFBRSwrQkFBWSxDQUNoQztBQVZTLE9BQWQ7QUFZSDs7QUFDREwsSUFBQUEsT0FBTyxDQUFDcmIsU0FBUixDQUFrQjJiLEtBQWxCLEdBQTBCLFlBQVk7QUFDbEMsVUFBSSxJQUFKLEVBQVU7QUFDTixZQUFJLENBQUNULGdCQUFMLEVBQXVCO0FBQ25CQSxVQUFBQSxnQkFBZ0IsR0FBRyxJQUFuQjtBQUNBaFIsVUFBQUEsT0FBTyxDQUFDMFIsSUFBUixDQUFhLGlPQUFiO0FBQ0g7QUFDSjtBQUNKLEtBUEQ7O0FBUUEsV0FBT1AsT0FBUDtBQUNILEdBeEJrRixFQUFuRjs7QUF5QkEsV0FBU2hLLGFBQVQsQ0FBdUJ5RSxHQUF2QixFQUE0QjtBQUN4QixXQUFPLFVBQVUrRixRQUFWLEVBQW9CbE8sUUFBcEIsRUFBOEJtTyxLQUE5QixFQUFxQztBQUN4QyxVQUFJQyxFQUFKOztBQUNBLFVBQUluQixTQUFTLEdBQUcsQ0FBQyxDQUFDbUIsRUFBRSxHQUFHM08sT0FBTyxJQUFJLElBQVgsR0FBa0IsS0FBSyxDQUF2QixHQUEyQkEsT0FBTyxDQUFDNE8sV0FBekMsS0FBeUQsSUFBekQsR0FBZ0VELEVBQWhFLEdBQXFFL1QsT0FBdEUsR0FBaEI7QUFDQSxVQUFJaVUsZUFBZSxHQUFHLElBQUlkLEVBQUosRUFBdEI7QUFDQSxVQUFJZSxXQUFKO0FBQ0EsVUFBSUMsY0FBYyxHQUFHLElBQUk1VyxPQUFKLENBQVksVUFBVTVFLENBQVYsRUFBYThFLE1BQWIsRUFBcUI7QUFBRSxlQUFPd1csZUFBZSxDQUFDWCxNQUFoQixDQUF1QkMsZ0JBQXZCLENBQXdDLE9BQXhDLEVBQWlELFlBQVk7QUFBRSxpQkFBTzlWLE1BQU0sQ0FBQztBQUFFZixZQUFBQSxJQUFJLEVBQUUsWUFBUjtBQUFzQnNHLFlBQUFBLE9BQU8sRUFBRWtSLFdBQVcsSUFBSTtBQUE5QyxXQUFELENBQWI7QUFBMkUsU0FBMUksQ0FBUDtBQUFxSixPQUF4TCxDQUFyQjtBQUNBLFVBQUlyUyxPQUFPLEdBQUcsS0FBZDs7QUFDQSxlQUFTOFIsS0FBVCxDQUFlUyxNQUFmLEVBQXVCO0FBQ25CLFlBQUl2UyxPQUFKLEVBQWE7QUFDVHFTLFVBQUFBLFdBQVcsR0FBR0UsTUFBZDtBQUNBSCxVQUFBQSxlQUFlLENBQUNOLEtBQWhCO0FBQ0g7QUFDSjs7QUFDRCxVQUFJVSxPQUFPLEdBQUcsWUFBWTtBQUN0QixlQUFPbFgsT0FBTyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsWUFBWTtBQUNuQyxjQUFJbVgsR0FBSixFQUFTQyxXQUFULEVBQXNCQyxLQUF0QixFQUE2QkMsWUFBN0I7O0FBQ0EsaUJBQU9qYyxXQUFXLENBQUMsSUFBRCxFQUFPLFVBQVU0RCxFQUFWLEVBQWM7QUFDbkMsb0JBQVFBLEVBQUUsQ0FBQ3hELEtBQVg7QUFDSSxtQkFBSyxDQUFMO0FBQ0l3RCxnQkFBQUEsRUFBRSxDQUFDckQsSUFBSCxDQUFRaUIsSUFBUixDQUFhLENBQUMsQ0FBRCxFQUFJLENBQUosR0FBUyxDQUFULENBQWI7O0FBQ0Esb0JBQUlvTCxPQUFPLElBQUlBLE9BQU8sQ0FBQ3JDLFNBQW5CLElBQWdDcUMsT0FBTyxDQUFDckMsU0FBUixDQUFrQitLLEdBQWxCLEVBQXVCO0FBQUVuSSxrQkFBQUEsUUFBUSxFQUFFQSxRQUFaO0FBQXNCbU8sa0JBQUFBLEtBQUssRUFBRUE7QUFBN0IsaUJBQXZCLE1BQWlFLEtBQXJHLEVBQTRHO0FBQ3hHLHdCQUFNO0FBQ0ZwWCxvQkFBQUEsSUFBSSxFQUFFLGdCQURKO0FBRUZzRyxvQkFBQUEsT0FBTyxFQUFFO0FBRlAsbUJBQU47QUFJSDs7QUFDRG5CLGdCQUFBQSxPQUFPLEdBQUcsSUFBVjtBQUNBZ1MsZ0JBQUFBLFFBQVEsQ0FBQ2YsT0FBTyxDQUFDRixTQUFELEVBQVk5RSxHQUFaLEVBQWlCLENBQUN3RyxHQUFHLEdBQUdsUCxPQUFPLElBQUksSUFBWCxHQUFrQixLQUFLLENBQXZCLEdBQTJCQSxPQUFPLENBQUNzUCxjQUExQyxLQUE2RCxJQUE3RCxHQUFvRSxLQUFLLENBQXpFLEdBQTZFSixHQUFHLENBQUNwYyxJQUFKLENBQVNrTixPQUFULEVBQWtCO0FBQUV3TixrQkFBQUEsU0FBUyxFQUFFQSxTQUFiO0FBQXdCOUUsa0JBQUFBLEdBQUcsRUFBRUE7QUFBN0IsaUJBQWxCLEVBQXNEO0FBQUVuSSxrQkFBQUEsUUFBUSxFQUFFQSxRQUFaO0FBQXNCbU8sa0JBQUFBLEtBQUssRUFBRUE7QUFBN0IsaUJBQXRELENBQTlGLENBQVIsQ0FBUjtBQUNBLHVCQUFPLENBQUMsQ0FBRCxFQUFjdlcsT0FBTyxDQUFDb1gsSUFBUixDQUFhLENBQzFCUixjQUQwQixFQUUxQjVXLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQm1WLGNBQWMsQ0FBQzdFLEdBQUQsRUFBTTtBQUNoQytGLGtCQUFBQSxRQUFRLEVBQUVBLFFBRHNCO0FBRWhDbE8sa0JBQUFBLFFBQVEsRUFBRUEsUUFGc0I7QUFHaENtTyxrQkFBQUEsS0FBSyxFQUFFQSxLQUh5QjtBQUloQ2xCLGtCQUFBQSxTQUFTLEVBQUVBLFNBSnFCO0FBS2hDVSxrQkFBQUEsTUFBTSxFQUFFVyxlQUFlLENBQUNYLE1BTFE7QUFNaENzQixrQkFBQUEsZUFBZSxFQUFFLHlCQUFVL2EsS0FBVixFQUFpQjJQLElBQWpCLEVBQXVCO0FBQ3BDLDJCQUFPLElBQUk2SSxlQUFKLENBQW9CeFksS0FBcEIsRUFBMkIyUCxJQUEzQixDQUFQO0FBQ0gsbUJBUitCO0FBU2hDcUwsa0JBQUFBLGdCQUFnQixFQUFFLDBCQUFVaGIsS0FBVixFQUFpQjJQLElBQWpCLEVBQXVCO0FBQ3JDLDJCQUFPLElBQUk4SSxlQUFKLENBQW9CelksS0FBcEIsRUFBMkIyUCxJQUEzQixDQUFQO0FBQ0g7QUFYK0IsaUJBQU4sQ0FBOUIsRUFZSTFMLElBWkosQ0FZUyxVQUFVcUgsTUFBVixFQUFrQjtBQUN2QixzQkFBSUEsTUFBTSxZQUFZa04sZUFBdEIsRUFBdUM7QUFDbkMsMEJBQU1sTixNQUFOO0FBQ0g7O0FBQ0Qsc0JBQUlBLE1BQU0sWUFBWW1OLGVBQXRCLEVBQXVDO0FBQ25DLDJCQUFPNVUsU0FBUyxDQUFDeUgsTUFBTSxDQUFDb0UsT0FBUixFQUFpQnFKLFNBQWpCLEVBQTRCOUUsR0FBNUIsRUFBaUMzSSxNQUFNLENBQUNxRSxJQUF4QyxDQUFoQjtBQUNIOztBQUNELHlCQUFPOUwsU0FBUyxDQUFDeUgsTUFBRCxFQUFTeU4sU0FBVCxFQUFvQjlFLEdBQXBCLENBQWhCO0FBQ0gsaUJBcEJELENBRjBCLENBQWIsQ0FBZCxDQUFQOztBQXdCSixtQkFBSyxDQUFMO0FBQ0l5RyxnQkFBQUEsV0FBVyxHQUFHblksRUFBRSxDQUFDdkQsSUFBSCxFQUFkO0FBQ0EsdUJBQU8sQ0FBQyxDQUFELEVBQWMsQ0FBZCxDQUFQOztBQUNKLG1CQUFLLENBQUw7QUFDSTJiLGdCQUFBQSxLQUFLLEdBQUdwWSxFQUFFLENBQUN2RCxJQUFILEVBQVI7QUFDQTBiLGdCQUFBQSxXQUFXLEdBQUdDLEtBQUssWUFBWW5DLGVBQWpCLEdBQW1DMVUsUUFBUSxDQUFDLElBQUQsRUFBT2lWLFNBQVAsRUFBa0I5RSxHQUFsQixFQUF1QjBHLEtBQUssQ0FBQ2pMLE9BQTdCLEVBQXNDaUwsS0FBSyxDQUFDaEwsSUFBNUMsQ0FBM0MsR0FBK0Y3TCxRQUFRLENBQUM2VyxLQUFELEVBQVE1QixTQUFSLEVBQW1COUUsR0FBbkIsQ0FBckg7QUFDQSx1QkFBTyxDQUFDLENBQUQsRUFBYyxDQUFkLENBQVA7O0FBQ0osbUJBQUssQ0FBTDtBQUNJMkcsZ0JBQUFBLFlBQVksR0FBR3JQLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUMwUCwwQkFBcEIsSUFBa0RuWCxRQUFRLENBQUMrTCxLQUFULENBQWU2SyxXQUFmLENBQWxELElBQWlGQSxXQUFXLENBQUMvSyxJQUFaLENBQWlCekcsU0FBakg7O0FBQ0Esb0JBQUksQ0FBQzBSLFlBQUwsRUFBbUI7QUFDZlosa0JBQUFBLFFBQVEsQ0FBQ1UsV0FBRCxDQUFSO0FBQ0g7O0FBQ0QsdUJBQU8sQ0FBQyxDQUFELEVBQWVBLFdBQWYsQ0FBUDtBQS9DUjtBQWlESCxXQWxEaUIsQ0FBbEI7QUFtREgsU0FyRGEsQ0FBZDtBQXNESCxPQXZEYSxFQUFkOztBQXdEQSxhQUFPLHVCQUFjRixPQUFkLEVBQXVCO0FBQzFCVixRQUFBQSxLQUFLLEVBQUVBLEtBRG1CO0FBRTFCZixRQUFBQSxTQUFTLEVBQUVBLFNBRmU7QUFHMUI5RSxRQUFBQSxHQUFHLEVBQUVBLEdBSHFCO0FBSTFCaUgsUUFBQUEsTUFBTSxFQUFFLGtCQUFZO0FBQ2hCLGlCQUFPVixPQUFPLENBQUN2VyxJQUFSLENBQWFvQyxhQUFiLENBQVA7QUFDSDtBQU55QixPQUF2QixDQUFQO0FBUUgsS0E3RUQ7QUE4RUg7O0FBQ0QsU0FBTyx1QkFBY21KLGFBQWQsRUFBNkI7QUFDaEN5SixJQUFBQSxPQUFPLEVBQUVBLE9BRHVCO0FBRWhDblYsSUFBQUEsUUFBUSxFQUFFQSxRQUZzQjtBQUdoQ0QsSUFBQUEsU0FBUyxFQUFFQSxTQUhxQjtBQUloQ2dWLElBQUFBLFVBQVUsRUFBRUE7QUFKb0IsR0FBN0IsQ0FBUDtBQU1IOztBQUNELFNBQVN4UyxhQUFULENBQXNCbUYsTUFBdEIsRUFBOEI7QUFDMUIsTUFBSUEsTUFBTSxDQUFDbUUsSUFBUCxJQUFlbkUsTUFBTSxDQUFDbUUsSUFBUCxDQUFZd0osaUJBQS9CLEVBQWtEO0FBQzlDLFVBQU0zTixNQUFNLENBQUNrRSxPQUFiO0FBQ0g7O0FBQ0QsTUFBSWxFLE1BQU0sQ0FBQytCLEtBQVgsRUFBa0I7QUFDZCxVQUFNL0IsTUFBTSxDQUFDK0IsS0FBYjtBQUNIOztBQUNELFNBQU8vQixNQUFNLENBQUNrRSxPQUFkO0FBQ0g7O0FBRUQsSUFBSXlMLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBVXZiLENBQVYsRUFBYTtBQUNoQyxTQUFPQSxDQUFDLElBQUksT0FBT0EsQ0FBQyxDQUFDaVEsS0FBVCxLQUFtQixVQUEvQjtBQUNILENBRkQ7O0FBSUEsSUFBSXVMLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVV6SyxPQUFWLEVBQW1CbkYsTUFBbkIsRUFBMkI7QUFDckMsTUFBSTJQLGdCQUFnQixDQUFDeEssT0FBRCxDQUFwQixFQUErQjtBQUMzQixXQUFPQSxPQUFPLENBQUNkLEtBQVIsQ0FBY3JFLE1BQWQsQ0FBUDtBQUNILEdBRkQsTUFHSztBQUNELFdBQU9tRixPQUFPLENBQUNuRixNQUFELENBQWQ7QUFDSDtBQUNKLENBUEQ7O0FBUUEsU0FBU2hHLFFBQVQsR0FBbUI7QUFDZixNQUFJNlYsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsT0FBSyxJQUFJL1ksRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQytZLElBQUFBLFFBQVEsQ0FBQy9ZLEVBQUQsQ0FBUixHQUFlcUUsU0FBUyxDQUFDckUsRUFBRCxDQUF4QjtBQUNIOztBQUNELFNBQU8sVUFBVWtKLE1BQVYsRUFBa0I7QUFDckIsV0FBTzZQLFFBQVEsQ0FBQ3ZNLElBQVQsQ0FBYyxVQUFVNkIsT0FBVixFQUFtQjtBQUFFLGFBQU95SyxPQUFPLENBQUN6SyxPQUFELEVBQVVuRixNQUFWLENBQWQ7QUFBa0MsS0FBckUsQ0FBUDtBQUNILEdBRkQ7QUFHSDs7QUFDRCxTQUFTakcsUUFBVCxHQUFtQjtBQUNmLE1BQUk4VixRQUFRLEdBQUcsRUFBZjs7QUFDQSxPQUFLLElBQUkvWSxFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHcUUsU0FBUyxDQUFDekcsTUFBaEMsRUFBd0NvQyxFQUFFLEVBQTFDLEVBQThDO0FBQzFDK1ksSUFBQUEsUUFBUSxDQUFDL1ksRUFBRCxDQUFSLEdBQWVxRSxTQUFTLENBQUNyRSxFQUFELENBQXhCO0FBQ0g7O0FBQ0QsU0FBTyxVQUFVa0osTUFBVixFQUFrQjtBQUNyQixXQUFPNlAsUUFBUSxDQUFDdEwsS0FBVCxDQUFlLFVBQVVZLE9BQVYsRUFBbUI7QUFBRSxhQUFPeUssT0FBTyxDQUFDekssT0FBRCxFQUFVbkYsTUFBVixDQUFkO0FBQWtDLEtBQXRFLENBQVA7QUFDSCxHQUZEO0FBR0g7O0FBQ0QsU0FBUzhQLDBCQUFULENBQW9DOVAsTUFBcEMsRUFBNEMrUCxXQUE1QyxFQUF5RDtBQUNyRCxNQUFJLENBQUMvUCxNQUFELElBQVcsQ0FBQ0EsTUFBTSxDQUFDbUUsSUFBdkIsRUFDSSxPQUFPLEtBQVA7QUFDSixNQUFJNkwsaUJBQWlCLEdBQUcsT0FBT2hRLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWW9KLFNBQW5CLEtBQWlDLFFBQXpEO0FBQ0EsTUFBSTBDLHFCQUFxQixHQUFHRixXQUFXLENBQUN6UixPQUFaLENBQW9CMEIsTUFBTSxDQUFDbUUsSUFBUCxDQUFZcUosYUFBaEMsSUFBaUQsQ0FBQyxDQUE5RTtBQUNBLFNBQU93QyxpQkFBaUIsSUFBSUMscUJBQTVCO0FBQ0g7O0FBQ0QsU0FBU0MsaUJBQVQsQ0FBMkJ0WixDQUEzQixFQUE4QjtBQUMxQixTQUFPLE9BQU9BLENBQUMsQ0FBQyxDQUFELENBQVIsS0FBZ0IsVUFBaEIsSUFBOEIsYUFBYUEsQ0FBQyxDQUFDLENBQUQsQ0FBNUMsSUFBbUQsZUFBZUEsQ0FBQyxDQUFDLENBQUQsQ0FBbkUsSUFBMEUsY0FBY0EsQ0FBQyxDQUFDLENBQUQsQ0FBaEc7QUFDSDs7QUFDRCxTQUFTeUQsVUFBVCxHQUFxQjtBQUNqQixNQUFJOFYsV0FBVyxHQUFHLEVBQWxCOztBQUNBLE9BQUssSUFBSXJaLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdxRSxTQUFTLENBQUN6RyxNQUFoQyxFQUF3Q29DLEVBQUUsRUFBMUMsRUFBOEM7QUFDMUNxWixJQUFBQSxXQUFXLENBQUNyWixFQUFELENBQVgsR0FBa0JxRSxTQUFTLENBQUNyRSxFQUFELENBQTNCO0FBQ0g7O0FBQ0QsTUFBSXFaLFdBQVcsQ0FBQ3piLE1BQVosS0FBdUIsQ0FBM0IsRUFBOEI7QUFDMUIsV0FBTyxVQUFVc0wsTUFBVixFQUFrQjtBQUFFLGFBQU84UCwwQkFBMEIsQ0FBQzlQLE1BQUQsRUFBUyxDQUFDLFNBQUQsQ0FBVCxDQUFqQztBQUF5RCxLQUFwRjtBQUNIOztBQUNELE1BQUksQ0FBQ2tRLGlCQUFpQixDQUFDQyxXQUFELENBQXRCLEVBQXFDO0FBQ2pDLFdBQU85VixVQUFTLEdBQUc4VixXQUFXLENBQUMsQ0FBRCxDQUFkLENBQWhCO0FBQ0g7O0FBQ0QsU0FBTyxVQUFVblEsTUFBVixFQUFrQjtBQUNyQixRQUFJNlAsUUFBUSxHQUFHTSxXQUFXLENBQUN2SyxHQUFaLENBQWdCLFVBQVV3SyxVQUFWLEVBQXNCO0FBQUUsYUFBT0EsVUFBVSxDQUFDM0MsT0FBbEI7QUFBNEIsS0FBcEUsQ0FBZjs7QUFDQSxRQUFJNEMsZUFBZSxHQUFHclcsUUFBTyxDQUFDdEIsS0FBUixDQUFjLEtBQUssQ0FBbkIsRUFBc0JtWCxRQUF0QixDQUF0Qjs7QUFDQSxXQUFPUSxlQUFlLENBQUNyUSxNQUFELENBQXRCO0FBQ0gsR0FKRDtBQUtIOztBQUNELFNBQVN4RixXQUFULEdBQXNCO0FBQ2xCLE1BQUkyVixXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsT0FBSyxJQUFJclosRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQ3FaLElBQUFBLFdBQVcsQ0FBQ3JaLEVBQUQsQ0FBWCxHQUFrQnFFLFNBQVMsQ0FBQ3JFLEVBQUQsQ0FBM0I7QUFDSDs7QUFDRCxNQUFJcVosV0FBVyxDQUFDemIsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUMxQixXQUFPLFVBQVVzTCxNQUFWLEVBQWtCO0FBQUUsYUFBTzhQLDBCQUEwQixDQUFDOVAsTUFBRCxFQUFTLENBQUMsVUFBRCxDQUFULENBQWpDO0FBQTBELEtBQXJGO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDa1EsaUJBQWlCLENBQUNDLFdBQUQsQ0FBdEIsRUFBcUM7QUFDakMsV0FBTzNWLFdBQVUsR0FBRzJWLFdBQVcsQ0FBQyxDQUFELENBQWQsQ0FBakI7QUFDSDs7QUFDRCxTQUFPLFVBQVVuUSxNQUFWLEVBQWtCO0FBQ3JCLFFBQUk2UCxRQUFRLEdBQUdNLFdBQVcsQ0FBQ3ZLLEdBQVosQ0FBZ0IsVUFBVXdLLFVBQVYsRUFBc0I7QUFBRSxhQUFPQSxVQUFVLENBQUM5WCxRQUFsQjtBQUE2QixLQUFyRSxDQUFmOztBQUNBLFFBQUkrWCxlQUFlLEdBQUdyVyxRQUFPLENBQUN0QixLQUFSLENBQWMsS0FBSyxDQUFuQixFQUFzQm1YLFFBQXRCLENBQXRCOztBQUNBLFdBQU9RLGVBQWUsQ0FBQ3JRLE1BQUQsQ0FBdEI7QUFDSCxHQUpEO0FBS0g7O0FBQ0QsU0FBU3ZGLG9CQUFULEdBQStCO0FBQzNCLE1BQUkwVixXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsT0FBSyxJQUFJclosRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3FFLFNBQVMsQ0FBQ3pHLE1BQWhDLEVBQXdDb0MsRUFBRSxFQUExQyxFQUE4QztBQUMxQ3FaLElBQUFBLFdBQVcsQ0FBQ3JaLEVBQUQsQ0FBWCxHQUFrQnFFLFNBQVMsQ0FBQ3JFLEVBQUQsQ0FBM0I7QUFDSDs7QUFDRCxNQUFJd1osT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVXRRLE1BQVYsRUFBa0I7QUFDNUIsV0FBT0EsTUFBTSxJQUFJQSxNQUFNLENBQUNtRSxJQUFqQixJQUF5Qm5FLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWXdKLGlCQUE1QztBQUNILEdBRkQ7O0FBR0EsTUFBSXdDLFdBQVcsQ0FBQ3piLE1BQVosS0FBdUIsQ0FBM0IsRUFBOEI7QUFDMUIsV0FBTyxVQUFVc0wsTUFBVixFQUFrQjtBQUNyQixVQUFJcVEsZUFBZSxHQUFHdFcsUUFBTyxDQUFDUyxXQUFVLENBQUM5QixLQUFYLENBQWlCLEtBQUssQ0FBdEIsRUFBeUJ5WCxXQUF6QixDQUFELEVBQXdDRyxPQUF4QyxDQUE3Qjs7QUFDQSxhQUFPRCxlQUFlLENBQUNyUSxNQUFELENBQXRCO0FBQ0gsS0FIRDtBQUlIOztBQUNELE1BQUksQ0FBQ2tRLGlCQUFpQixDQUFDQyxXQUFELENBQXRCLEVBQXFDO0FBQ2pDLFdBQU8xVixvQkFBbUIsR0FBRzBWLFdBQVcsQ0FBQyxDQUFELENBQWQsQ0FBMUI7QUFDSDs7QUFDRCxTQUFPLFVBQVVuUSxNQUFWLEVBQWtCO0FBQ3JCLFFBQUlxUSxlQUFlLEdBQUd0VyxRQUFPLENBQUNTLFdBQVUsQ0FBQzlCLEtBQVgsQ0FBaUIsS0FBSyxDQUF0QixFQUF5QnlYLFdBQXpCLENBQUQsRUFBd0NHLE9BQXhDLENBQTdCOztBQUNBLFdBQU9ELGVBQWUsQ0FBQ3JRLE1BQUQsQ0FBdEI7QUFDSCxHQUhEO0FBSUg7O0FBQ0QsU0FBUzdGLFlBQVQsR0FBdUI7QUFDbkIsTUFBSWdXLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxPQUFLLElBQUlyWixFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHcUUsU0FBUyxDQUFDekcsTUFBaEMsRUFBd0NvQyxFQUFFLEVBQTFDLEVBQThDO0FBQzFDcVosSUFBQUEsV0FBVyxDQUFDclosRUFBRCxDQUFYLEdBQWtCcUUsU0FBUyxDQUFDckUsRUFBRCxDQUEzQjtBQUNIOztBQUNELE1BQUlxWixXQUFXLENBQUN6YixNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzFCLFdBQU8sVUFBVXNMLE1BQVYsRUFBa0I7QUFBRSxhQUFPOFAsMEJBQTBCLENBQUM5UCxNQUFELEVBQVMsQ0FBQyxXQUFELENBQVQsQ0FBakM7QUFBMkQsS0FBdEY7QUFDSDs7QUFDRCxNQUFJLENBQUNrUSxpQkFBaUIsQ0FBQ0MsV0FBRCxDQUF0QixFQUFxQztBQUNqQyxXQUFPaFcsWUFBVyxHQUFHZ1csV0FBVyxDQUFDLENBQUQsQ0FBZCxDQUFsQjtBQUNIOztBQUNELFNBQU8sVUFBVW5RLE1BQVYsRUFBa0I7QUFDckIsUUFBSTZQLFFBQVEsR0FBR00sV0FBVyxDQUFDdkssR0FBWixDQUFnQixVQUFVd0ssVUFBVixFQUFzQjtBQUFFLGFBQU9BLFVBQVUsQ0FBQy9YLFNBQWxCO0FBQThCLEtBQXRFLENBQWY7O0FBQ0EsUUFBSWdZLGVBQWUsR0FBR3JXLFFBQU8sQ0FBQ3RCLEtBQVIsQ0FBYyxLQUFLLENBQW5CLEVBQXNCbVgsUUFBdEIsQ0FBdEI7O0FBQ0EsV0FBT1EsZUFBZSxDQUFDclEsTUFBRCxDQUF0QjtBQUNILEdBSkQ7QUFLSDs7QUFDRCxTQUFTL0YsbUJBQVQsR0FBOEI7QUFDMUIsTUFBSWtXLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxPQUFLLElBQUlyWixFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHcUUsU0FBUyxDQUFDekcsTUFBaEMsRUFBd0NvQyxFQUFFLEVBQTFDLEVBQThDO0FBQzFDcVosSUFBQUEsV0FBVyxDQUFDclosRUFBRCxDQUFYLEdBQWtCcUUsU0FBUyxDQUFDckUsRUFBRCxDQUEzQjtBQUNIOztBQUNELE1BQUlxWixXQUFXLENBQUN6YixNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzFCLFdBQU8sVUFBVXNMLE1BQVYsRUFBa0I7QUFBRSxhQUFPOFAsMEJBQTBCLENBQUM5UCxNQUFELEVBQVMsQ0FBQyxTQUFELEVBQVksV0FBWixFQUF5QixVQUF6QixDQUFULENBQWpDO0FBQWtGLEtBQTdHO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDa1EsaUJBQWlCLENBQUNDLFdBQUQsQ0FBdEIsRUFBcUM7QUFDakMsV0FBT2xXLG1CQUFrQixHQUFHa1csV0FBVyxDQUFDLENBQUQsQ0FBZCxDQUF6QjtBQUNIOztBQUNELFNBQU8sVUFBVW5RLE1BQVYsRUFBa0I7QUFDckIsUUFBSTZQLFFBQVEsR0FBRyxFQUFmOztBQUNBLFNBQUssSUFBSS9ZLEVBQUUsR0FBRyxDQUFULEVBQVl5WixhQUFhLEdBQUdKLFdBQWpDLEVBQThDclosRUFBRSxHQUFHeVosYUFBYSxDQUFDN2IsTUFBakUsRUFBeUVvQyxFQUFFLEVBQTNFLEVBQStFO0FBQzNFLFVBQUlzWixVQUFVLEdBQUdHLGFBQWEsQ0FBQ3paLEVBQUQsQ0FBOUI7QUFDQStZLE1BQUFBLFFBQVEsQ0FBQ2xiLElBQVQsQ0FBY3liLFVBQVUsQ0FBQzNDLE9BQXpCLEVBQWtDMkMsVUFBVSxDQUFDOVgsUUFBN0MsRUFBdUQ4WCxVQUFVLENBQUMvWCxTQUFsRTtBQUNIOztBQUNELFFBQUlnWSxlQUFlLEdBQUdyVyxRQUFPLENBQUN0QixLQUFSLENBQWMsS0FBSyxDQUFuQixFQUFzQm1YLFFBQXRCLENBQXRCOztBQUNBLFdBQU9RLGVBQWUsQ0FBQ3JRLE1BQUQsQ0FBdEI7QUFDSCxHQVJEO0FBU0g7O0FBRUQsQ0FBQyxHQUFHbEYsYUFBYSxDQUFDMFYsU0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XHJcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XHJcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxudmFyIF9fZGVmTm9ybWFsUHJvcCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTsgfTtcclxudmFyIF9fc3ByZWFkVmFsdWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcclxuICAgICAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2IgPSBfX2dldE93blByb3BTeW1ib2xzKGIpOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IF9iW19pXTtcclxuICAgICAgICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG52YXIgX19zcHJlYWRQcm9wcyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTsgfTtcclxudmFyIF9fbWFya0FzTW9kdWxlID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gX19kZWZQcm9wKHRhcmdldCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7IH07XHJcbnZhciBfX2V4cG9ydCA9IGZ1bmN0aW9uICh0YXJnZXQsIGFsbCkge1xyXG4gICAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXHJcbiAgICAgICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcclxufTtcclxudmFyIF9fcmVFeHBvcnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBtb2R1bGUyLCBkZXNjKSB7XHJcbiAgICBpZiAobW9kdWxlMiAmJiB0eXBlb2YgbW9kdWxlMiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbW9kdWxlMiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodGFyZ2V0LCBrZXkpICYmIGtleSAhPT0gXCJkZWZhdWx0XCIpXHJcbiAgICAgICAgICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUyW2tleV07IH0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MobW9kdWxlMiwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IF9fZ2V0T3duUHJvcE5hbWVzKG1vZHVsZTIpOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gX2JbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8xKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufTtcclxudmFyIF9fdG9Nb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlMikge1xyXG4gICAgcmV0dXJuIF9fcmVFeHBvcnQoX19tYXJrQXNNb2R1bGUoX19kZWZQcm9wKG1vZHVsZTIgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2R1bGUyKSkgOiB7fSwgXCJkZWZhdWx0XCIsIG1vZHVsZTIgJiYgbW9kdWxlMi5fX2VzTW9kdWxlICYmIFwiZGVmYXVsdFwiIGluIG1vZHVsZTIgPyB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlMi5kZWZhdWx0OyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0gOiB7IHZhbHVlOiBtb2R1bGUyLCBlbnVtZXJhYmxlOiB0cnVlIH0pKSwgbW9kdWxlMik7XHJcbn07XHJcbnZhciBfX2FzeW5jID0gZnVuY3Rpb24gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfTtcclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gc3JjL2luZGV4LnRzXHJcbl9fbWFya0FzTW9kdWxlKGV4cG9ydHMpO1xyXG5fX2V4cG9ydChleHBvcnRzLCB7XHJcbiAgICBNaWRkbGV3YXJlQXJyYXk6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTsgfSxcclxuICAgIGNvbmZpZ3VyZVN0b3JlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWd1cmVTdG9yZTsgfSxcclxuICAgIGNyZWF0ZUFjdGlvbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlQWN0aW9uOyB9LFxyXG4gICAgY3JlYXRlQXN5bmNUaHVuazogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlQXN5bmNUaHVuazsgfSxcclxuICAgIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcjsgfSxcclxuICAgIGNyZWF0ZUVudGl0eUFkYXB0ZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZUVudGl0eUFkYXB0ZXI7IH0sXHJcbiAgICBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZTsgfSxcclxuICAgIGNyZWF0ZU5leHRTdGF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW1wb3J0X2ltbWVyNS5kZWZhdWx0OyB9LFxyXG4gICAgY3JlYXRlUmVkdWNlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlUmVkdWNlcjsgfSxcclxuICAgIGNyZWF0ZVNlbGVjdG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfcmVzZWxlY3QyLmNyZWF0ZVNlbGVjdG9yOyB9LFxyXG4gICAgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmU7IH0sXHJcbiAgICBjcmVhdGVTbGljZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlU2xpY2U7IH0sXHJcbiAgICBjdXJyZW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfaW1tZXI1LmN1cnJlbnQ7IH0sXHJcbiAgICBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZTsgfSxcclxuICAgIGZyZWV6ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW1wb3J0X2ltbWVyNS5mcmVlemU7IH0sXHJcbiAgICBnZXREZWZhdWx0TWlkZGxld2FyZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmU7IH0sXHJcbiAgICBnZXRUeXBlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRUeXBlOyB9LFxyXG4gICAgaXNBbGxPZjogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNBbGxPZjsgfSxcclxuICAgIGlzQW55T2Y6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQW55T2Y7IH0sXHJcbiAgICBpc0FzeW5jVGh1bmtBY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbjsgfSxcclxuICAgIGlzRHJhZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltcG9ydF9pbW1lcjUuaXNEcmFmdDsgfSxcclxuICAgIGlzRnVsZmlsbGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bGZpbGxlZDsgfSxcclxuICAgIGlzSW1tdXRhYmxlRGVmYXVsdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNJbW11dGFibGVEZWZhdWx0OyB9LFxyXG4gICAgaXNQZW5kaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1BlbmRpbmc7IH0sXHJcbiAgICBpc1BsYWluOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1BsYWluOyB9LFxyXG4gICAgaXNQbGFpbk9iamVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQbGFpbk9iamVjdDsgfSxcclxuICAgIGlzUmVqZWN0ZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzUmVqZWN0ZWQ7IH0sXHJcbiAgICBpc1JlamVjdGVkV2l0aFZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlOyB9LFxyXG4gICAgbWluaVNlcmlhbGl6ZUVycm9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaW5pU2VyaWFsaXplRXJyb3I7IH0sXHJcbiAgICBuYW5vaWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hbm9pZDsgfSxcclxuICAgIG9yaWdpbmFsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfaW1tZXI1Lm9yaWdpbmFsOyB9LFxyXG4gICAgdW53cmFwUmVzdWx0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bndyYXBSZXN1bHQ7IH1cclxufSk7XHJcbnZhciBpbXBvcnRfaW1tZXI0ID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG5fX3JlRXhwb3J0KGV4cG9ydHMsIF9fdG9Nb2R1bGUocmVxdWlyZShcInJlZHV4XCIpKSk7XHJcbnZhciBpbXBvcnRfaW1tZXI1ID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG52YXIgaW1wb3J0X3Jlc2VsZWN0MiA9IF9fdG9Nb2R1bGUocmVxdWlyZShcInJlc2VsZWN0XCIpKTtcclxuLy8gc3JjL2NyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJpbW1lclwiKSk7XHJcbnZhciBpbXBvcnRfcmVzZWxlY3QgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJyZXNlbGVjdFwiKSk7XHJcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBzZWxlY3RvciA9ICgwLCBpbXBvcnRfcmVzZWxlY3QuY3JlYXRlU2VsZWN0b3IpLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3QgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFsoMCwgaW1wb3J0X2ltbWVyLmlzRHJhZnQpKHZhbHVlKSA/ICgwLCBpbXBvcnRfaW1tZXIuY3VycmVudCkodmFsdWUpIDogdmFsdWVdLCByZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHdyYXBwZWRTZWxlY3RvcjtcclxufTtcclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBpbXBvcnRfcmVkdXgyID0gX190b01vZHVsZShyZXF1aXJlKFwicmVkdXhcIikpO1xyXG4vLyBzcmMvZGV2dG9vbHNFeHRlbnNpb24udHNcclxudmFyIGltcG9ydF9yZWR1eCA9IF9fdG9Nb2R1bGUocmVxdWlyZShcInJlZHV4XCIpKTtcclxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBpbXBvcnRfcmVkdXguY29tcG9zZTtcclxuICAgIHJldHVybiBpbXBvcnRfcmVkdXguY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgZGV2VG9vbHNFbmhhbmNlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm9vcCkge1xyXG4gICAgICAgIHJldHVybiBub29wO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2lzUGxhaW5PYmplY3QudHNcclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSB2YWx1ZTtcclxuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IHByb3RvO1xyXG59XHJcbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xyXG52YXIgaW1wb3J0X3JlZHV4X3RodW5rID0gX190b01vZHVsZShyZXF1aXJlKFwicmVkdXgtdGh1bmtcIikpO1xyXG4vLyBzcmMvdXRpbHMudHNcclxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XHJcbiAgICB2YXIgZWxhcHNlZCA9IDA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbnZhciBNaWRkbGV3YXJlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWlkZGxld2FyZUFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWRkbGV3YXJlQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcclxuICAgIH07XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnJbMF0uY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbn0oQXJyYXkpKTtcclxuLy8gc3JjL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2U7XHJcbnZhciBwcmVmaXggPSBcIkludmFyaWFudCBmYWlsZWRcIjtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcclxuICAgIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW107XHJcbiAgICBpZiAoIWRlY3ljbGVyKVxyXG4gICAgICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmlzRnJvemVuKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xyXG4gICAgdmFyIHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHRyYWNrZWQgPSB7IHZhbHVlOiBvYmogfTtcclxuICAgIGlmICghaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cmFja2VkO1xyXG59XHJcbmZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiA9PT0gdm9pZCAwKSB7IHNhbWVQYXJlbnRSZWYgPSBmYWxzZTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB2b2lkIDA7XHJcbiAgICB2YXIgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcclxuICAgIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IHRydWUsIHBhdGg6IHBhdGggfTtcclxuICAgIH1cclxuICAgIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxuICAgIH1cclxuICAgIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIGtleXNUb0RldGVjdCkge1xyXG4gICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgY2hpbGRQYXRoKTtcclxuICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2IgPSBvcHRpb25zLmlzSW1tdXRhYmxlLCBpc0ltbXV0YWJsZSA9IF9iID09PSB2b2lkIDAgPyBpc0ltbXV0YWJsZURlZmF1bHQgOiBfYiwgaWdub3JlZFBhdGhzID0gb3B0aW9ucy5pZ25vcmVkUGF0aHMsIF9jID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9jID09PSB2b2lkIDAgPyAzMiA6IF9jLCBpZ25vcmUgPSBvcHRpb25zLmlnbm9yZTtcclxuICAgIGlnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocyB8fCBpZ25vcmU7XHJcbiAgICB2YXIgdHJhY2sgPSB0cmFja0Zvck11dGF0aW9ucy5iaW5kKG51bGwsIGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgIHZhciBnZXRTdGF0ZSA9IF9iLmdldFN0YXRlO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIkltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICdcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiJy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC53YXNNdXRhdGVkICYmIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgaW5zaWRlIGEgZGlzcGF0Y2gsIGluIHRoZSBwYXRoOiBcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiLiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uIFwiICsgc3RyaW5naWZ5KGFjdGlvbikgKyBcIi4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xyXG4gICAgICAgIH07IH07XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcclxuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICAgIHJldHVybiB0eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbCA9PT0gbnVsbCB8fCB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcclxufVxyXG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpIHtcclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7IGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjsgfVxyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtleVBhdGg6IHBhdGggfHwgXCI8cm9vdD5cIixcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2IgPSBlbnRyaWVzXzFbX2ldLCBrZXkgPSBfYlswXSwgbmVzdGVkVmFsdWUgPSBfYlsxXTtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocyAmJiBpZ25vcmVkUGF0aHMuaW5kZXhPZihuZXN0ZWRQYXRoKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAoZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYiA9IG9wdGlvbnMuaXNTZXJpYWxpemFibGUsIGlzU2VyaWFsaXphYmxlID0gX2IgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfYiwgZ2V0RW50cmllcyA9IG9wdGlvbnMuZ2V0RW50cmllcywgX2MgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25zLCBpZ25vcmVkQWN0aW9ucyA9IF9jID09PSB2b2lkIDAgPyBbXSA6IF9jLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLCBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfZCA9PT0gdm9pZCAwID8gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0gOiBfZCwgX2UgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgaWdub3JlZFBhdGhzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9mID09PSB2b2lkIDAgPyAzMiA6IF9mLCBfZyA9IG9wdGlvbnMuaWdub3JlU3RhdGUsIGlnbm9yZVN0YXRlID0gX2cgPT09IHZvaWQgMCA/IGZhbHNlIDogX2c7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTsgfTsgfTtcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJib29sZWFuXCI7XHJcbn1cclxuZnVuY3Rpb24gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYiA9IG9wdGlvbnMudGh1bmssIHRodW5rID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgX2MgPSBvcHRpb25zLmltbXV0YWJsZUNoZWNrLCBpbW11dGFibGVDaGVjayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjaywgc2VyaWFsaXphYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kO1xyXG4gICAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcclxuICAgIGlmICh0aHVuaykge1xyXG4gICAgICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGltcG9ydF9yZWR1eF90aHVuay5kZWZhdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGltcG9ydF9yZWR1eF90aHVuay5kZWZhdWx0LndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHJ1ZSkge1xyXG4gICAgICAgIGlmIChpbW11dGFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgaW1tdXRhYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihpbW11dGFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIGltbXV0YWJsZU9wdGlvbnMgPSBpbW11dGFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoaW1tdXRhYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VyaWFsaXphYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oc2VyaWFsaXphYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBzZXJpYWxpemFibGVPcHRpb25zID0gc2VyaWFsaXphYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2goY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKHNlcmlhbGl6YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWlkZGxld2FyZUFycmF5O1xyXG59XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG52YXIgSVNfUFJPRFVDVElPTiA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9iID0gb3B0aW9ucyB8fCB7fSwgX2MgPSBfYi5yZWR1Y2VyLCByZWR1Y2VyID0gX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLCBfZCA9IF9iLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZCA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZCwgX2UgPSBfYi5kZXZUb29scywgZGV2VG9vbHMgPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lLCBfZiA9IF9iLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZiwgX2cgPSBfYi5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZztcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gKDAsIGltcG9ydF9yZWR1eDIuY29tYmluZVJlZHVjZXJzKShyZWR1Y2VyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJyZWR1Y2VyXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMnKTtcclxuICAgIH1cclxuICAgIHZhciBmaW5hbE1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlO1xyXG4gICAgaWYgKHR5cGVvZiBmaW5hbE1pZGRsZXdhcmUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGZpbmFsTWlkZGxld2FyZSA9IGZpbmFsTWlkZGxld2FyZShjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUpO1xyXG4gICAgICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiAhQXJyYXkuaXNBcnJheShmaW5hbE1pZGRsZXdhcmUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIndoZW4gdXNpbmcgYSBtaWRkbGV3YXJlIGJ1aWxkZXIgZnVuY3Rpb24sIGFuIGFycmF5IG9mIG1pZGRsZXdhcmUgbXVzdCBiZSByZXR1cm5lZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgZmluYWxNaWRkbGV3YXJlLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCI7IH0pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZWFjaCBtaWRkbGV3YXJlIHByb3ZpZGVkIHRvIGNvbmZpZ3VyZVN0b3JlIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcclxuICAgIH1cclxuICAgIHZhciBtaWRkbGV3YXJlRW5oYW5jZXIgPSAoMCwgaW1wb3J0X3JlZHV4Mi5hcHBseU1pZGRsZXdhcmUpLmFwcGx5KHZvaWQgMCwgZmluYWxNaWRkbGV3YXJlKTtcclxuICAgIHZhciBmaW5hbENvbXBvc2UgPSBpbXBvcnRfcmVkdXgyLmNvbXBvc2U7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IF9fc3ByZWFkQXJyYXkoW21pZGRsZXdhcmVFbmhhbmNlcl0sIGVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIHJldHVybiAoMCwgaW1wb3J0X3JlZHV4Mi5jcmVhdGVTdG9yZSkocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcclxufVxyXG4vLyBzcmMvY3JlYXRlQWN0aW9uLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJlcGFyZUFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgICAgIGlmICghcHJlcGFyZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZFxyXG4gICAgICAgICAgICB9LCBcIm1ldGFcIiBpbiBwcmVwYXJlZCAmJiB7IG1ldGE6IHByZXBhcmVkLm1ldGEgfSksIFwiZXJyb3JcIiBpbiBwcmVwYXJlZCAmJiB7IGVycm9yOiBwcmVwYXJlZC5lcnJvciB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogYXJnc1swXSB9O1xyXG4gICAgfVxyXG4gICAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiXCIgKyB0eXBlOyB9O1xyXG4gICAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcclxuICAgIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24udHlwZSA9PT0gdHlwZTsgfTtcclxuICAgIHJldHVybiBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIFtcInR5cGVcIiwgXCJwYXlsb2FkXCIsIFwiZXJyb3JcIiwgXCJtZXRhXCJdLmluZGV4T2Yoa2V5KSA+IC0xO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIyID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG4vLyBzcmMvbWFwQnVpbGRlcnMudHNcclxuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XHJcbiAgICB2YXIgYWN0aW9uc01hcCA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XHJcbiAgICB2YXIgZGVmYXVsdENhc2VSZWR1Y2VyO1xyXG4gICAgdmFyIGJ1aWxkZXIgPSB7XHJcbiAgICAgICAgYWRkQ2FzZTogZnVuY3Rpb24gKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZE1hdGNoZXJgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gXCJzdHJpbmdcIiA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFkZENhc2UgY2Fubm90IGJlIGNhbGxlZCB3aXRoIHR3byByZWR1Y2VycyBmb3IgdGhlIHNhbWUgYWN0aW9uIHR5cGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uc01hcFt0eXBlXSA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkTWF0Y2hlcjogZnVuY3Rpb24gKG1hdGNoZXIsIHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xyXG4gICAgcmV0dXJuIFthY3Rpb25zTWFwLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXTtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIHZhciBfYiA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9iWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2JbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2JbMl07XHJcbiAgICB2YXIgZnJvemVuSW5pdGlhbFN0YXRlID0gKDAsIGltcG9ydF9pbW1lcjIuZGVmYXVsdCkoaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gZnJvemVuSW5pdGlhbFN0YXRlOyB9XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VycyA9IF9fc3ByZWFkQXJyYXkoW1xyXG4gICAgICAgICAgICBhY3Rpb25zTWFwW2FjdGlvbi50eXBlXVxyXG4gICAgICAgIF0sIGZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hlciA9IF9iLm1hdGNoZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICB2YXIgcmVkdWNlciA9IF9iLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGltcG9ydF9pbW1lcjIuaXNEcmFmdCkocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEoMCwgaW1wb3J0X2ltbWVyMi5pc0RyYWZ0YWJsZSkocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FzZVJlZHVjZXIocHJldmlvdXNTdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJBIGNhc2UgcmVkdWNlciBvbiBhIG5vbi1kcmFmdGFibGUgdmFsdWUgbXVzdCBub3QgcmV0dXJuIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgaW1wb3J0X2ltbWVyMi5kZWZhdWx0KShwcmV2aW91c1N0YXRlLCBmdW5jdGlvbiAoZHJhZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgIH0sIHN0YXRlKTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVNsaWNlLnRzXHJcbmZ1bmN0aW9uIGdldFR5cGUyKHNsaWNlLCBhY3Rpb25LZXkpIHtcclxuICAgIHJldHVybiBzbGljZSArIFwiL1wiICsgYWN0aW9uS2V5O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcclxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLCBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImBuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2VcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVkdWNlcnMgPSBvcHRpb25zLnJlZHVjZXJzIHx8IHt9O1xyXG4gICAgdmFyIF9iID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfYyA9IF9iWzBdLCBleHRyYVJlZHVjZXJzID0gX2MgPT09IHZvaWQgMCA/IHt9IDogX2MsIF9kID0gX2JbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gX2JbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZTtcclxuICAgIHZhciByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbkNyZWF0b3JzID0ge307XHJcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlMihuYW1lLCByZWR1Y2VyTmFtZSk7XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHZhciBwcmVwYXJlQ2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcclxuICAgICAgICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgYWN0aW9uQ3JlYXRvcnNbcmVkdWNlck5hbWVdID0gcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSk7XHJcbiAgICB9KTtcclxuICAgIHZhciBmaW5hbENhc2VSZWR1Y2VycyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBleHRyYVJlZHVjZXJzKSwgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUpO1xyXG4gICAgdmFyIHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZmluYWxDYXNlUmVkdWNlcnMsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIHJlZHVjZXI6IHJlZHVjZXIsXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvZW50aXR5X3N0YXRlLnRzXHJcbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBlbnRpdGllczoge31cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcclxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZShhZGRpdGlvbmFsU3RhdGUpIHtcclxuICAgICAgICBpZiAoYWRkaXRpb25hbFN0YXRlID09PSB2b2lkIDApIHsgYWRkaXRpb25hbFN0YXRlID0ge307IH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX3NlbGVjdG9ycy50c1xyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuaWRzOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuZW50aXRpZXM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7IHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gKF8sIGlkKSB7IHJldHVybiBpZDsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QnlJZCA9IGZ1bmN0aW9uIChlbnRpdGllcywgaWQpIHsgcmV0dXJuIGVudGl0aWVzW2lkXTsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0VG90YWwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIGZ1bmN0aW9uIChpZHMpIHsgcmV0dXJuIGlkcy5sZW5ndGg7IH0pO1xyXG4gICAgICAgIGlmICghc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsOiBzZWxlY3RBbGwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXHJcbiAgICAgICAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgICAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXHJcbiAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxyXG4gICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9ycyB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIzID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoKDAsIGltcG9ydF9pbW1lcjMuaXNEcmFmdCkoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9pbW1lcjMuZGVmYXVsdCkoc3RhdGUsIHJ1bk11dGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3V0aWxzLnRzXHJcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xyXG4gICAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XHJcbiAgICBpZiAoa2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IHN0YXRlLmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYiA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2JbMF0sIHVwZGF0ZWQgPSBfYlsxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9iID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYi5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYi5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYi5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWwyID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsMiwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcclxuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICBtb2RlbHMucHVzaCh1cGRhdGVkKTtcclxuICAgICAgICByZXR1cm4gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBtb2RlbHMgPSBbXTtcclxuICAgICAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkgeyByZXR1cm4gdGFrZVVwZGF0ZWRNb2RlbChtb2RlbHMsIHVwZGF0ZSwgc3RhdGUpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYiA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2JbMF0sIHVwZGF0ZWQgPSBfYlsxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYiA9IF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYi5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Iuc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcclxuICAgIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL2Z1bGZpbGxlZFwiLCBmdW5jdGlvbiAocGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwiZnVsZmlsbGVkXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHZvaWQgMCxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciByZWplY3RlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcmVqZWN0ZWRcIiwgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZywgcGF5bG9hZCwgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIGVycm9yOiAob3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZUVycm9yIHx8IG1pbmlTZXJpYWxpemVFcnJvcikoZXJyb3IgfHwgXCJSZWplY3RlZFwiKSxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgYWJvcnRlZDogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJBYm9ydEVycm9yXCIsXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiID8gQWJvcnRDb250cm9sbGVyIDogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZGlzcGxheWVkV2FybmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlRoaXMgcGxhdGZvcm0gZG9lcyBub3QgaW1wbGVtZW50IEFib3J0Q29udHJvbGxlci4gXFxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBBYm9ydENvbnRyb2xsZXIgdG8gcmVhY3QgdG8gYGFib3J0YCBldmVudHMsIHBsZWFzZSBjb25zaWRlciBpbXBvcnRpbmcgYSBwb2x5ZmlsbCBsaWtlICdhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwvZGlzdC9hYm9ydGNvbnRyb2xsZXItcG9seWZpbGwtb25seScuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgIH0oKSk7XHJcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAoKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgIT0gbnVsbCA/IF9hIDogbmFub2lkKSgpO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XHJcbiAgICAgICAgICAgIHZhciBhYm9ydFJlYXNvbjtcclxuICAgICAgICAgICAgdmFyIGFib3J0ZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KHsgbmFtZTogXCJBYm9ydEVycm9yXCIsIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8IFwiQWJvcnRlZFwiIH0pOyB9KTsgfSk7XHJcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EyLCBmaW5hbEFjdGlvbiwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDIsICwgM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29uZGl0aW9uICYmIG9wdGlvbnMuY29uZGl0aW9uKGFyZywgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb25kaXRpb25FcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcsIChfYTIgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFBlbmRpbmdNZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbi8vIHNyYy90c0hlbHBlcnMudHNcclxudmFyIGhhc01hdGNoRnVuY3Rpb24gPSBmdW5jdGlvbiAodikge1xyXG4gICAgcmV0dXJuIHYgJiYgdHlwZW9mIHYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIjtcclxufTtcclxuLy8gc3JjL21hdGNoZXJzLnRzXHJcbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gKG1hdGNoZXIsIGFjdGlvbikge1xyXG4gICAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNBbnlPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuc29tZShmdW5jdGlvbiAobWF0Y2hlcikgeyByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBbGxPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgdmFsaWRTdGF0dXMpIHtcclxuICAgIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSBcInN0cmluZ1wiO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcclxuICAgIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSBcImZ1bmN0aW9uXCIgJiYgXCJwZW5kaW5nXCIgaW4gYVswXSAmJiBcImZ1bGZpbGxlZFwiIGluIGFbMF0gJiYgXCJyZWplY3RlZFwiIGluIGFbMF07XHJcbn1cclxuZnVuY3Rpb24gaXNQZW5kaW5nKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1BlbmRpbmcoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJyZWplY3RlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcclxuICAgIH07XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcImZ1bGZpbGxlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLmZ1bGZpbGxlZDsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCIsIFwiZnVsZmlsbGVkXCIsIFwicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFzeW5jVGh1bmtzXzEgPSBhc3luY1RodW5rczsgX2kgPCBhc3luY1RodW5rc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYXN5bmNUaHVuayA9IGFzeW5jVGh1bmtzXzFbX2ldO1xyXG4gICAgICAgICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9pbmRleC50c1xyXG4oMCwgaW1wb3J0X2ltbWVyNC5lbmFibGVFUzUpKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiXX0=