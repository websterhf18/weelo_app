857a3ecc3b1bc2e0b84f2f8adb8b9be7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;

var _makeQueries = require("./makeQueries");

var _filterNodeByType = require("./filterNodeByType");

var _errors = require("./errors");

var getTextInputNodeByPlaceholderText = function getTextInputNodeByPlaceholderText(node, placeholder) {
  try {
    var _require = require('react-native'),
        TextInput = _require.TextInput;

    return (0, _filterNodeByType.filterNodeByType)(node, TextInput) && (typeof placeholder === 'string' ? placeholder === node.props.placeholder : placeholder.test(node.props.placeholder));
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var queryAllByPlaceholderText = function queryAllByPlaceholderText(instance) {
  return function queryAllByPlaceholderFn(placeholder) {
    return instance.findAll(function (node) {
      return getTextInputNodeByPlaceholderText(node, placeholder);
    });
  };
};

exports.queryAllByPlaceholderText = queryAllByPlaceholderText;

var getMultipleError = function getMultipleError(placeholder) {
  return "Found multiple elements with placeholder: " + String(placeholder) + " ";
};

var getMissingError = function getMissingError(placeholder) {
  return "Unable to find an element with placeholder: " + String(placeholder);
};

var _ref = (0, _makeQueries.makeQueries)(queryAllByPlaceholderText, getMissingError, getMultipleError),
    getByPlaceholderText = _ref.getBy,
    getAllByPlaceholderText = _ref.getAllBy,
    queryByPlaceholderText = _ref.queryBy,
    findByPlaceholderText = _ref.findBy,
    findAllByPlaceholderText = _ref.findAllBy;

exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.findByPlaceholderText = findByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5UGxhY2Vob2xkZXJUZXh0LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeVBsYWNlaG9sZGVyVGV4dCIsInF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsImdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiX21ha2VRdWVyaWVzIiwicmVxdWlyZSIsIl9maWx0ZXJOb2RlQnlUeXBlIiwiX2Vycm9ycyIsImdldFRleHRJbnB1dE5vZGVCeVBsYWNlaG9sZGVyVGV4dCIsIm5vZGUiLCJwbGFjZWhvbGRlciIsIlRleHRJbnB1dCIsImZpbHRlck5vZGVCeVR5cGUiLCJwcm9wcyIsInRlc3QiLCJlcnJvciIsImNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvciIsImluc3RhbmNlIiwicXVlcnlBbGxCeVBsYWNlaG9sZGVyRm4iLCJmaW5kQWxsIiwiZ2V0TXVsdGlwbGVFcnJvciIsIlN0cmluZyIsImdldE1pc3NpbmdFcnJvciIsIm1ha2VRdWVyaWVzIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJmaW5kQnkiLCJmaW5kQWxsQnkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxzQkFBUixHQUFpQ0YsT0FBTyxDQUFDRyx5QkFBUixHQUFvQ0gsT0FBTyxDQUFDSSxvQkFBUixHQUErQkosT0FBTyxDQUFDSyx1QkFBUixHQUFrQ0wsT0FBTyxDQUFDTSxxQkFBUixHQUFnQ04sT0FBTyxDQUFDTyx3QkFBUixHQUFtQyxLQUFLLENBQTlNOztBQUVBLElBQUlDLFlBQVksR0FBR0MsT0FBTyxpQkFBMUI7O0FBRUEsSUFBSUMsaUJBQWlCLEdBQUdELE9BQU8sc0JBQS9COztBQUVBLElBQUlFLE9BQU8sR0FBR0YsT0FBTyxZQUFyQjs7QUFFQSxJQUFNRyxpQ0FBaUMsR0FBRyxTQUFwQ0EsaUNBQW9DLENBQUNDLElBQUQsRUFBT0MsV0FBUCxFQUF1QjtBQUMvRCxNQUFJO0FBQ0YsbUJBRUlMLE9BQU8sQ0FBQyxjQUFELENBRlg7QUFBQSxRQUNFTSxTQURGLFlBQ0VBLFNBREY7O0FBSUEsV0FBTyxDQUFDLEdBQUdMLGlCQUFpQixDQUFDTSxnQkFBdEIsRUFBd0NILElBQXhDLEVBQThDRSxTQUE5QyxNQUE2RCxPQUFPRCxXQUFQLEtBQXVCLFFBQXZCLEdBQWtDQSxXQUFXLEtBQUtELElBQUksQ0FBQ0ksS0FBTCxDQUFXSCxXQUE3RCxHQUEyRUEsV0FBVyxDQUFDSSxJQUFaLENBQWlCTCxJQUFJLENBQUNJLEtBQUwsQ0FBV0gsV0FBNUIsQ0FBeEksQ0FBUDtBQUNELEdBTkQsQ0FNRSxPQUFPSyxLQUFQLEVBQWM7QUFDZCxVQUFNLENBQUMsR0FBR1IsT0FBTyxDQUFDUyw4QkFBWixFQUE0Q0QsS0FBNUMsQ0FBTjtBQUNEO0FBQ0YsQ0FWRDs7QUFZQSxJQUFNaEIseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUE0QixDQUFBa0IsUUFBUTtBQUFBLFNBQUksU0FBU0MsdUJBQVQsQ0FBaUNSLFdBQWpDLEVBQThDO0FBQzFGLFdBQU9PLFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixVQUFBVixJQUFJO0FBQUEsYUFBSUQsaUNBQWlDLENBQUNDLElBQUQsRUFBT0MsV0FBUCxDQUFyQztBQUFBLEtBQXJCLENBQVA7QUFDRCxHQUZ5QztBQUFBLENBQTFDOztBQUlBZCxPQUFPLENBQUNHLHlCQUFSLEdBQW9DQSx5QkFBcEM7O0FBRUEsSUFBTXFCLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQVYsV0FBVztBQUFBLHdEQUFpRFcsTUFBTSxDQUFDWCxXQUFELENBQXZEO0FBQUEsQ0FBcEM7O0FBRUEsSUFBTVksZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFBWixXQUFXO0FBQUEsMERBQW1EVyxNQUFNLENBQUNYLFdBQUQsQ0FBekQ7QUFBQSxDQUFuQzs7QUFFQSxXQU1JLENBQUMsR0FBR04sWUFBWSxDQUFDbUIsV0FBakIsRUFBOEJ4Qix5QkFBOUIsRUFBeUR1QixlQUF6RCxFQUEwRUYsZ0JBQTFFLENBTko7QUFBQSxJQUNTcEIsb0JBRFQsUUFDRXdCLEtBREY7QUFBQSxJQUVZdkIsdUJBRlosUUFFRXdCLFFBRkY7QUFBQSxJQUdXM0Isc0JBSFgsUUFHRTRCLE9BSEY7QUFBQSxJQUlVeEIscUJBSlYsUUFJRXlCLE1BSkY7QUFBQSxJQUtheEIsd0JBTGIsUUFLRXlCLFNBTEY7O0FBT0FoQyxPQUFPLENBQUNPLHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQVAsT0FBTyxDQUFDTSxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0FOLE9BQU8sQ0FBQ0Usc0JBQVIsR0FBaUNBLHNCQUFqQztBQUNBRixPQUFPLENBQUNLLHVCQUFSLEdBQWtDQSx1QkFBbEM7QUFDQUwsT0FBTyxDQUFDSSxvQkFBUixHQUErQkEsb0JBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSB2b2lkIDA7XG5cbnZhciBfbWFrZVF1ZXJpZXMgPSByZXF1aXJlKFwiLi9tYWtlUXVlcmllc1wiKTtcblxudmFyIF9maWx0ZXJOb2RlQnlUeXBlID0gcmVxdWlyZShcIi4vZmlsdGVyTm9kZUJ5VHlwZVwiKTtcblxudmFyIF9lcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5cbmNvbnN0IGdldFRleHRJbnB1dE5vZGVCeVBsYWNlaG9sZGVyVGV4dCA9IChub2RlLCBwbGFjZWhvbGRlcikgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIFRleHRJbnB1dFxuICAgIH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcblxuICAgIHJldHVybiAoMCwgX2ZpbHRlck5vZGVCeVR5cGUuZmlsdGVyTm9kZUJ5VHlwZSkobm9kZSwgVGV4dElucHV0KSAmJiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJyA/IHBsYWNlaG9sZGVyID09PSBub2RlLnByb3BzLnBsYWNlaG9sZGVyIDogcGxhY2Vob2xkZXIudGVzdChub2RlLnByb3BzLnBsYWNlaG9sZGVyKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgKDAsIF9lcnJvcnMuY3JlYXRlTGlicmFyeU5vdFN1cHBvcnRlZEVycm9yKShlcnJvcik7XG4gIH1cbn07XG5cbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBpbnN0YW5jZSA9PiBmdW5jdGlvbiBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJGbihwbGFjZWhvbGRlcikge1xuICByZXR1cm4gaW5zdGFuY2UuZmluZEFsbChub2RlID0+IGdldFRleHRJbnB1dE5vZGVCeVBsYWNlaG9sZGVyVGV4dChub2RlLCBwbGFjZWhvbGRlcikpO1xufTtcblxuZXhwb3J0cy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dDtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IHBsYWNlaG9sZGVyID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHBsYWNlaG9sZGVyOiAke1N0cmluZyhwbGFjZWhvbGRlcil9IGA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IHBsYWNlaG9sZGVyID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggcGxhY2Vob2xkZXI6ICR7U3RyaW5nKHBsYWNlaG9sZGVyKX1gO1xuXG5jb25zdCB7XG4gIGdldEJ5OiBnZXRCeVBsYWNlaG9sZGVyVGV4dCxcbiAgZ2V0QWxsQnk6IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0LFxuICBxdWVyeUJ5OiBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0LFxuICBmaW5kQnk6IGZpbmRCeVBsYWNlaG9sZGVyVGV4dCxcbiAgZmluZEFsbEJ5OiBmaW5kQWxsQnlQbGFjZWhvbGRlclRleHRcbn0gPSAoMCwgX21ha2VRdWVyaWVzLm1ha2VRdWVyaWVzKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRNaXNzaW5nRXJyb3IsIGdldE11bHRpcGxlRXJyb3IpO1xuZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSBmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQ7Il19