{"version":3,"sources":["coins.service.ts"],"names":["CoinsService","coinsRepo","getCoins","console","log","message","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQaA,Y;AACT,wBAAoBC,SAApB,EAA8C;AAAA;AAAA,SAA1BA,SAA0B,GAA1BA,SAA0B;AAAA;AAAE;;;;WAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEqB,KAAKA,SAAL,CAAeC,QAAf,EAFrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIQC,cAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0D,YAAMC,OAAhE;AAJR;AAAA,oBAKc,IAAIC,KAAJ,aALd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * @author Hugo Garcia\n * @description Use cases for coins\n * @returns \n */\nimport { CoinsContract } from \"@contracts/coins.contract\";\nimport { CoinsEntity } from \"@entity/coins.entity\";\n\nexport class CoinsService {\n    constructor(private coinsRepo: CoinsContract) {};\n\n    async getCoins(): Promise<CoinsEntity[]> {\n        try {\n            return await this.coinsRepo.getCoins();\n        } catch (error) {\n            console.log('***** Error CoinsService -> getCoins *****', error.message);\n            throw new Error(error);\n        }\n    }\n}"]}